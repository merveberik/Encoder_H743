
Encoder_H734.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000411c  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080043b4  080043b4  000143b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080043c4  080043c4  000143c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080043c8  080043c8  000143c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  20000000  080043cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000f4  20000010  080043dc  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000104  080043dc  00020104  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   00019dd6  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002b39  00000000  00000000  00039e14  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000ea0  00000000  00000000  0003c950  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000d88  00000000  00000000  0003d7f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00007411  00000000  00000000  0003e578  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000057d4  00000000  00000000  00045989  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0004b15d  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00003c18  00000000  00000000  0004b1dc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	20000010 	.word	0x20000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800439c 	.word	0x0800439c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	20000014 	.word	0x20000014
 80002d4:	0800439c 	.word	0x0800439c

080002d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80002dc:	2003      	movs	r0, #3
 80002de:	f000 f963 	bl	80005a8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80002e2:	f001 f931 	bl	8001548 <HAL_RCC_GetSysClockFreq>
 80002e6:	4601      	mov	r1, r0
 80002e8:	4b13      	ldr	r3, [pc, #76]	; (8000338 <HAL_Init+0x60>)
 80002ea:	699b      	ldr	r3, [r3, #24]
 80002ec:	0a1b      	lsrs	r3, r3, #8
 80002ee:	f003 030f 	and.w	r3, r3, #15
 80002f2:	4a12      	ldr	r2, [pc, #72]	; (800033c <HAL_Init+0x64>)
 80002f4:	5cd3      	ldrb	r3, [r2, r3]
 80002f6:	f003 031f 	and.w	r3, r3, #31
 80002fa:	fa21 f303 	lsr.w	r3, r1, r3
 80002fe:	4a10      	ldr	r2, [pc, #64]	; (8000340 <HAL_Init+0x68>)
 8000300:	6013      	str	r3, [r2, #0]

  /* Update the SystemD2Clock global variable */
  SystemD2Clock = (SystemCoreClock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000302:	4b0f      	ldr	r3, [pc, #60]	; (8000340 <HAL_Init+0x68>)
 8000304:	681a      	ldr	r2, [r3, #0]
 8000306:	4b0c      	ldr	r3, [pc, #48]	; (8000338 <HAL_Init+0x60>)
 8000308:	699b      	ldr	r3, [r3, #24]
 800030a:	f003 030f 	and.w	r3, r3, #15
 800030e:	490b      	ldr	r1, [pc, #44]	; (800033c <HAL_Init+0x64>)
 8000310:	5ccb      	ldrb	r3, [r1, r3]
 8000312:	f003 031f 	and.w	r3, r3, #31
 8000316:	fa22 f303 	lsr.w	r3, r2, r3
 800031a:	4a0a      	ldr	r2, [pc, #40]	; (8000344 <HAL_Init+0x6c>)
 800031c:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800031e:	2000      	movs	r0, #0
 8000320:	f000 f812 	bl	8000348 <HAL_InitTick>
 8000324:	4603      	mov	r3, r0
 8000326:	2b00      	cmp	r3, #0
 8000328:	d001      	beq.n	800032e <HAL_Init+0x56>
  {
    return HAL_ERROR;
 800032a:	2301      	movs	r3, #1
 800032c:	e002      	b.n	8000334 <HAL_Init+0x5c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800032e:	f003 fea7 	bl	8004080 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000332:	2300      	movs	r3, #0
}
 8000334:	4618      	mov	r0, r3
 8000336:	bd80      	pop	{r7, pc}
 8000338:	58024400 	.word	0x58024400
 800033c:	080043b4 	.word	0x080043b4
 8000340:	20000008 	.word	0x20000008
 8000344:	2000000c 	.word	0x2000000c

08000348 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b082      	sub	sp, #8
 800034c:	af00      	add	r7, sp, #0
 800034e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000350:	4b15      	ldr	r3, [pc, #84]	; (80003a8 <HAL_InitTick+0x60>)
 8000352:	781b      	ldrb	r3, [r3, #0]
 8000354:	2b00      	cmp	r3, #0
 8000356:	d101      	bne.n	800035c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000358:	2301      	movs	r3, #1
 800035a:	e021      	b.n	80003a0 <HAL_InitTick+0x58>
      return HAL_ERROR;
    }
  }
#else
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800035c:	4b13      	ldr	r3, [pc, #76]	; (80003ac <HAL_InitTick+0x64>)
 800035e:	681a      	ldr	r2, [r3, #0]
 8000360:	4b11      	ldr	r3, [pc, #68]	; (80003a8 <HAL_InitTick+0x60>)
 8000362:	781b      	ldrb	r3, [r3, #0]
 8000364:	4619      	mov	r1, r3
 8000366:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800036a:	fbb3 f3f1 	udiv	r3, r3, r1
 800036e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000372:	4618      	mov	r0, r3
 8000374:	f000 f94b 	bl	800060e <HAL_SYSTICK_Config>
 8000378:	4603      	mov	r3, r0
 800037a:	2b00      	cmp	r3, #0
 800037c:	d001      	beq.n	8000382 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 800037e:	2301      	movs	r3, #1
 8000380:	e00e      	b.n	80003a0 <HAL_InitTick+0x58>
  }
#endif

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	2b0f      	cmp	r3, #15
 8000386:	d80a      	bhi.n	800039e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000388:	2200      	movs	r2, #0
 800038a:	6879      	ldr	r1, [r7, #4]
 800038c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000390:	f000 f915 	bl	80005be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000394:	4a06      	ldr	r2, [pc, #24]	; (80003b0 <HAL_InitTick+0x68>)
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800039a:	2300      	movs	r3, #0
 800039c:	e000      	b.n	80003a0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800039e:	2301      	movs	r3, #1
}
 80003a0:	4618      	mov	r0, r3
 80003a2:	3708      	adds	r7, #8
 80003a4:	46bd      	mov	sp, r7
 80003a6:	bd80      	pop	{r7, pc}
 80003a8:	20000004 	.word	0x20000004
 80003ac:	20000008 	.word	0x20000008
 80003b0:	20000000 	.word	0x20000000

080003b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80003b4:	b480      	push	{r7}
 80003b6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80003b8:	4b06      	ldr	r3, [pc, #24]	; (80003d4 <HAL_IncTick+0x20>)
 80003ba:	781b      	ldrb	r3, [r3, #0]
 80003bc:	461a      	mov	r2, r3
 80003be:	4b06      	ldr	r3, [pc, #24]	; (80003d8 <HAL_IncTick+0x24>)
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	4413      	add	r3, r2
 80003c4:	4a04      	ldr	r2, [pc, #16]	; (80003d8 <HAL_IncTick+0x24>)
 80003c6:	6013      	str	r3, [r2, #0]
}
 80003c8:	bf00      	nop
 80003ca:	46bd      	mov	sp, r7
 80003cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d0:	4770      	bx	lr
 80003d2:	bf00      	nop
 80003d4:	20000004 	.word	0x20000004
 80003d8:	2000002c 	.word	0x2000002c

080003dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80003dc:	b480      	push	{r7}
 80003de:	af00      	add	r7, sp, #0
  return uwTick;
 80003e0:	4b03      	ldr	r3, [pc, #12]	; (80003f0 <HAL_GetTick+0x14>)
 80003e2:	681b      	ldr	r3, [r3, #0]
}
 80003e4:	4618      	mov	r0, r3
 80003e6:	46bd      	mov	sp, r7
 80003e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ec:	4770      	bx	lr
 80003ee:	bf00      	nop
 80003f0:	2000002c 	.word	0x2000002c

080003f4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80003f4:	b480      	push	{r7}
 80003f6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80003f8:	4b03      	ldr	r3, [pc, #12]	; (8000408 <HAL_GetREVID+0x14>)
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	0c1b      	lsrs	r3, r3, #16
}
 80003fe:	4618      	mov	r0, r3
 8000400:	46bd      	mov	sp, r7
 8000402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000406:	4770      	bx	lr
 8000408:	5c001000 	.word	0x5c001000

0800040c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800040c:	b480      	push	{r7}
 800040e:	b085      	sub	sp, #20
 8000410:	af00      	add	r7, sp, #0
 8000412:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	f003 0307 	and.w	r3, r3, #7
 800041a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800041c:	4b0b      	ldr	r3, [pc, #44]	; (800044c <__NVIC_SetPriorityGrouping+0x40>)
 800041e:	68db      	ldr	r3, [r3, #12]
 8000420:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000422:	68ba      	ldr	r2, [r7, #8]
 8000424:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000428:	4013      	ands	r3, r2
 800042a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800042c:	68fb      	ldr	r3, [r7, #12]
 800042e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000430:	68bb      	ldr	r3, [r7, #8]
 8000432:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000434:	4b06      	ldr	r3, [pc, #24]	; (8000450 <__NVIC_SetPriorityGrouping+0x44>)
 8000436:	4313      	orrs	r3, r2
 8000438:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800043a:	4a04      	ldr	r2, [pc, #16]	; (800044c <__NVIC_SetPriorityGrouping+0x40>)
 800043c:	68bb      	ldr	r3, [r7, #8]
 800043e:	60d3      	str	r3, [r2, #12]
}
 8000440:	bf00      	nop
 8000442:	3714      	adds	r7, #20
 8000444:	46bd      	mov	sp, r7
 8000446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044a:	4770      	bx	lr
 800044c:	e000ed00 	.word	0xe000ed00
 8000450:	05fa0000 	.word	0x05fa0000

08000454 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000454:	b480      	push	{r7}
 8000456:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000458:	4b04      	ldr	r3, [pc, #16]	; (800046c <__NVIC_GetPriorityGrouping+0x18>)
 800045a:	68db      	ldr	r3, [r3, #12]
 800045c:	0a1b      	lsrs	r3, r3, #8
 800045e:	f003 0307 	and.w	r3, r3, #7
}
 8000462:	4618      	mov	r0, r3
 8000464:	46bd      	mov	sp, r7
 8000466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046a:	4770      	bx	lr
 800046c:	e000ed00 	.word	0xe000ed00

08000470 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000470:	b480      	push	{r7}
 8000472:	b083      	sub	sp, #12
 8000474:	af00      	add	r7, sp, #0
 8000476:	4603      	mov	r3, r0
 8000478:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800047a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800047e:	2b00      	cmp	r3, #0
 8000480:	db0b      	blt.n	800049a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000482:	4909      	ldr	r1, [pc, #36]	; (80004a8 <__NVIC_EnableIRQ+0x38>)
 8000484:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000488:	095b      	lsrs	r3, r3, #5
 800048a:	88fa      	ldrh	r2, [r7, #6]
 800048c:	f002 021f 	and.w	r2, r2, #31
 8000490:	2001      	movs	r0, #1
 8000492:	fa00 f202 	lsl.w	r2, r0, r2
 8000496:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800049a:	bf00      	nop
 800049c:	370c      	adds	r7, #12
 800049e:	46bd      	mov	sp, r7
 80004a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a4:	4770      	bx	lr
 80004a6:	bf00      	nop
 80004a8:	e000e100 	.word	0xe000e100

080004ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80004ac:	b480      	push	{r7}
 80004ae:	b083      	sub	sp, #12
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	4603      	mov	r3, r0
 80004b4:	6039      	str	r1, [r7, #0]
 80004b6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80004b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80004bc:	2b00      	cmp	r3, #0
 80004be:	db0a      	blt.n	80004d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004c0:	490d      	ldr	r1, [pc, #52]	; (80004f8 <__NVIC_SetPriority+0x4c>)
 80004c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80004c6:	683a      	ldr	r2, [r7, #0]
 80004c8:	b2d2      	uxtb	r2, r2
 80004ca:	0112      	lsls	r2, r2, #4
 80004cc:	b2d2      	uxtb	r2, r2
 80004ce:	440b      	add	r3, r1
 80004d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80004d4:	e00a      	b.n	80004ec <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004d6:	4909      	ldr	r1, [pc, #36]	; (80004fc <__NVIC_SetPriority+0x50>)
 80004d8:	88fb      	ldrh	r3, [r7, #6]
 80004da:	f003 030f 	and.w	r3, r3, #15
 80004de:	3b04      	subs	r3, #4
 80004e0:	683a      	ldr	r2, [r7, #0]
 80004e2:	b2d2      	uxtb	r2, r2
 80004e4:	0112      	lsls	r2, r2, #4
 80004e6:	b2d2      	uxtb	r2, r2
 80004e8:	440b      	add	r3, r1
 80004ea:	761a      	strb	r2, [r3, #24]
}
 80004ec:	bf00      	nop
 80004ee:	370c      	adds	r7, #12
 80004f0:	46bd      	mov	sp, r7
 80004f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f6:	4770      	bx	lr
 80004f8:	e000e100 	.word	0xe000e100
 80004fc:	e000ed00 	.word	0xe000ed00

08000500 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000500:	b480      	push	{r7}
 8000502:	b089      	sub	sp, #36	; 0x24
 8000504:	af00      	add	r7, sp, #0
 8000506:	60f8      	str	r0, [r7, #12]
 8000508:	60b9      	str	r1, [r7, #8]
 800050a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800050c:	68fb      	ldr	r3, [r7, #12]
 800050e:	f003 0307 	and.w	r3, r3, #7
 8000512:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000514:	69fb      	ldr	r3, [r7, #28]
 8000516:	f1c3 0307 	rsb	r3, r3, #7
 800051a:	2b04      	cmp	r3, #4
 800051c:	bf28      	it	cs
 800051e:	2304      	movcs	r3, #4
 8000520:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000522:	69fb      	ldr	r3, [r7, #28]
 8000524:	3304      	adds	r3, #4
 8000526:	2b06      	cmp	r3, #6
 8000528:	d902      	bls.n	8000530 <NVIC_EncodePriority+0x30>
 800052a:	69fb      	ldr	r3, [r7, #28]
 800052c:	3b03      	subs	r3, #3
 800052e:	e000      	b.n	8000532 <NVIC_EncodePriority+0x32>
 8000530:	2300      	movs	r3, #0
 8000532:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000534:	2201      	movs	r2, #1
 8000536:	69bb      	ldr	r3, [r7, #24]
 8000538:	fa02 f303 	lsl.w	r3, r2, r3
 800053c:	1e5a      	subs	r2, r3, #1
 800053e:	68bb      	ldr	r3, [r7, #8]
 8000540:	401a      	ands	r2, r3
 8000542:	697b      	ldr	r3, [r7, #20]
 8000544:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000546:	2101      	movs	r1, #1
 8000548:	697b      	ldr	r3, [r7, #20]
 800054a:	fa01 f303 	lsl.w	r3, r1, r3
 800054e:	1e59      	subs	r1, r3, #1
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000554:	4313      	orrs	r3, r2
         );
}
 8000556:	4618      	mov	r0, r3
 8000558:	3724      	adds	r7, #36	; 0x24
 800055a:	46bd      	mov	sp, r7
 800055c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000560:	4770      	bx	lr
	...

08000564 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b082      	sub	sp, #8
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	3b01      	subs	r3, #1
 8000570:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000574:	d301      	bcc.n	800057a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000576:	2301      	movs	r3, #1
 8000578:	e00f      	b.n	800059a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800057a:	4a0a      	ldr	r2, [pc, #40]	; (80005a4 <SysTick_Config+0x40>)
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	3b01      	subs	r3, #1
 8000580:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000582:	210f      	movs	r1, #15
 8000584:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000588:	f7ff ff90 	bl	80004ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800058c:	4b05      	ldr	r3, [pc, #20]	; (80005a4 <SysTick_Config+0x40>)
 800058e:	2200      	movs	r2, #0
 8000590:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000592:	4b04      	ldr	r3, [pc, #16]	; (80005a4 <SysTick_Config+0x40>)
 8000594:	2207      	movs	r2, #7
 8000596:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000598:	2300      	movs	r3, #0
}
 800059a:	4618      	mov	r0, r3
 800059c:	3708      	adds	r7, #8
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	e000e010 	.word	0xe000e010

080005a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80005b0:	6878      	ldr	r0, [r7, #4]
 80005b2:	f7ff ff2b 	bl	800040c <__NVIC_SetPriorityGrouping>
}
 80005b6:	bf00      	nop
 80005b8:	3708      	adds	r7, #8
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}

080005be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80005be:	b580      	push	{r7, lr}
 80005c0:	b086      	sub	sp, #24
 80005c2:	af00      	add	r7, sp, #0
 80005c4:	4603      	mov	r3, r0
 80005c6:	60b9      	str	r1, [r7, #8]
 80005c8:	607a      	str	r2, [r7, #4]
 80005ca:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80005cc:	f7ff ff42 	bl	8000454 <__NVIC_GetPriorityGrouping>
 80005d0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80005d2:	687a      	ldr	r2, [r7, #4]
 80005d4:	68b9      	ldr	r1, [r7, #8]
 80005d6:	6978      	ldr	r0, [r7, #20]
 80005d8:	f7ff ff92 	bl	8000500 <NVIC_EncodePriority>
 80005dc:	4602      	mov	r2, r0
 80005de:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80005e2:	4611      	mov	r1, r2
 80005e4:	4618      	mov	r0, r3
 80005e6:	f7ff ff61 	bl	80004ac <__NVIC_SetPriority>
}
 80005ea:	bf00      	nop
 80005ec:	3718      	adds	r7, #24
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}

080005f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80005f2:	b580      	push	{r7, lr}
 80005f4:	b082      	sub	sp, #8
 80005f6:	af00      	add	r7, sp, #0
 80005f8:	4603      	mov	r3, r0
 80005fa:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80005fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000600:	4618      	mov	r0, r3
 8000602:	f7ff ff35 	bl	8000470 <__NVIC_EnableIRQ>
}
 8000606:	bf00      	nop
 8000608:	3708      	adds	r7, #8
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}

0800060e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800060e:	b580      	push	{r7, lr}
 8000610:	b082      	sub	sp, #8
 8000612:	af00      	add	r7, sp, #0
 8000614:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000616:	6878      	ldr	r0, [r7, #4]
 8000618:	f7ff ffa4 	bl	8000564 <SysTick_Config>
 800061c:	4603      	mov	r3, r0
}
 800061e:	4618      	mov	r0, r3
 8000620:	3708      	adds	r7, #8
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
	...

08000628 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000628:	b480      	push	{r7}
 800062a:	b089      	sub	sp, #36	; 0x24
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
 8000630:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000632:	2300      	movs	r3, #0
 8000634:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000636:	4b89      	ldr	r3, [pc, #548]	; (800085c <HAL_GPIO_Init+0x234>)
 8000638:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800063a:	e194      	b.n	8000966 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800063c:	683b      	ldr	r3, [r7, #0]
 800063e:	681a      	ldr	r2, [r3, #0]
 8000640:	2101      	movs	r1, #1
 8000642:	69fb      	ldr	r3, [r7, #28]
 8000644:	fa01 f303 	lsl.w	r3, r1, r3
 8000648:	4013      	ands	r3, r2
 800064a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800064c:	693b      	ldr	r3, [r7, #16]
 800064e:	2b00      	cmp	r3, #0
 8000650:	f000 8186 	beq.w	8000960 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000654:	683b      	ldr	r3, [r7, #0]
 8000656:	685b      	ldr	r3, [r3, #4]
 8000658:	2b02      	cmp	r3, #2
 800065a:	d003      	beq.n	8000664 <HAL_GPIO_Init+0x3c>
 800065c:	683b      	ldr	r3, [r7, #0]
 800065e:	685b      	ldr	r3, [r3, #4]
 8000660:	2b12      	cmp	r3, #18
 8000662:	d123      	bne.n	80006ac <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000664:	69fb      	ldr	r3, [r7, #28]
 8000666:	08da      	lsrs	r2, r3, #3
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	3208      	adds	r2, #8
 800066c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000670:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000672:	69fb      	ldr	r3, [r7, #28]
 8000674:	f003 0307 	and.w	r3, r3, #7
 8000678:	009b      	lsls	r3, r3, #2
 800067a:	220f      	movs	r2, #15
 800067c:	fa02 f303 	lsl.w	r3, r2, r3
 8000680:	43db      	mvns	r3, r3
 8000682:	69ba      	ldr	r2, [r7, #24]
 8000684:	4013      	ands	r3, r2
 8000686:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000688:	683b      	ldr	r3, [r7, #0]
 800068a:	691a      	ldr	r2, [r3, #16]
 800068c:	69fb      	ldr	r3, [r7, #28]
 800068e:	f003 0307 	and.w	r3, r3, #7
 8000692:	009b      	lsls	r3, r3, #2
 8000694:	fa02 f303 	lsl.w	r3, r2, r3
 8000698:	69ba      	ldr	r2, [r7, #24]
 800069a:	4313      	orrs	r3, r2
 800069c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800069e:	69fb      	ldr	r3, [r7, #28]
 80006a0:	08da      	lsrs	r2, r3, #3
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	3208      	adds	r2, #8
 80006a6:	69b9      	ldr	r1, [r7, #24]
 80006a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80006b2:	69fb      	ldr	r3, [r7, #28]
 80006b4:	005b      	lsls	r3, r3, #1
 80006b6:	2203      	movs	r2, #3
 80006b8:	fa02 f303 	lsl.w	r3, r2, r3
 80006bc:	43db      	mvns	r3, r3
 80006be:	69ba      	ldr	r2, [r7, #24]
 80006c0:	4013      	ands	r3, r2
 80006c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80006c4:	683b      	ldr	r3, [r7, #0]
 80006c6:	685b      	ldr	r3, [r3, #4]
 80006c8:	f003 0203 	and.w	r2, r3, #3
 80006cc:	69fb      	ldr	r3, [r7, #28]
 80006ce:	005b      	lsls	r3, r3, #1
 80006d0:	fa02 f303 	lsl.w	r3, r2, r3
 80006d4:	69ba      	ldr	r2, [r7, #24]
 80006d6:	4313      	orrs	r3, r2
 80006d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	69ba      	ldr	r2, [r7, #24]
 80006de:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006e0:	683b      	ldr	r3, [r7, #0]
 80006e2:	685b      	ldr	r3, [r3, #4]
 80006e4:	2b01      	cmp	r3, #1
 80006e6:	d00b      	beq.n	8000700 <HAL_GPIO_Init+0xd8>
 80006e8:	683b      	ldr	r3, [r7, #0]
 80006ea:	685b      	ldr	r3, [r3, #4]
 80006ec:	2b02      	cmp	r3, #2
 80006ee:	d007      	beq.n	8000700 <HAL_GPIO_Init+0xd8>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80006f0:	683b      	ldr	r3, [r7, #0]
 80006f2:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006f4:	2b11      	cmp	r3, #17
 80006f6:	d003      	beq.n	8000700 <HAL_GPIO_Init+0xd8>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80006f8:	683b      	ldr	r3, [r7, #0]
 80006fa:	685b      	ldr	r3, [r3, #4]
 80006fc:	2b12      	cmp	r3, #18
 80006fe:	d130      	bne.n	8000762 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	689b      	ldr	r3, [r3, #8]
 8000704:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000706:	69fb      	ldr	r3, [r7, #28]
 8000708:	005b      	lsls	r3, r3, #1
 800070a:	2203      	movs	r2, #3
 800070c:	fa02 f303 	lsl.w	r3, r2, r3
 8000710:	43db      	mvns	r3, r3
 8000712:	69ba      	ldr	r2, [r7, #24]
 8000714:	4013      	ands	r3, r2
 8000716:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000718:	683b      	ldr	r3, [r7, #0]
 800071a:	68da      	ldr	r2, [r3, #12]
 800071c:	69fb      	ldr	r3, [r7, #28]
 800071e:	005b      	lsls	r3, r3, #1
 8000720:	fa02 f303 	lsl.w	r3, r2, r3
 8000724:	69ba      	ldr	r2, [r7, #24]
 8000726:	4313      	orrs	r3, r2
 8000728:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	69ba      	ldr	r2, [r7, #24]
 800072e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	685b      	ldr	r3, [r3, #4]
 8000734:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000736:	2201      	movs	r2, #1
 8000738:	69fb      	ldr	r3, [r7, #28]
 800073a:	fa02 f303 	lsl.w	r3, r2, r3
 800073e:	43db      	mvns	r3, r3
 8000740:	69ba      	ldr	r2, [r7, #24]
 8000742:	4013      	ands	r3, r2
 8000744:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000746:	683b      	ldr	r3, [r7, #0]
 8000748:	685b      	ldr	r3, [r3, #4]
 800074a:	091b      	lsrs	r3, r3, #4
 800074c:	f003 0201 	and.w	r2, r3, #1
 8000750:	69fb      	ldr	r3, [r7, #28]
 8000752:	fa02 f303 	lsl.w	r3, r2, r3
 8000756:	69ba      	ldr	r2, [r7, #24]
 8000758:	4313      	orrs	r3, r2
 800075a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	69ba      	ldr	r2, [r7, #24]
 8000760:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	68db      	ldr	r3, [r3, #12]
 8000766:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000768:	69fb      	ldr	r3, [r7, #28]
 800076a:	005b      	lsls	r3, r3, #1
 800076c:	2203      	movs	r2, #3
 800076e:	fa02 f303 	lsl.w	r3, r2, r3
 8000772:	43db      	mvns	r3, r3
 8000774:	69ba      	ldr	r2, [r7, #24]
 8000776:	4013      	ands	r3, r2
 8000778:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800077a:	683b      	ldr	r3, [r7, #0]
 800077c:	689a      	ldr	r2, [r3, #8]
 800077e:	69fb      	ldr	r3, [r7, #28]
 8000780:	005b      	lsls	r3, r3, #1
 8000782:	fa02 f303 	lsl.w	r3, r2, r3
 8000786:	69ba      	ldr	r2, [r7, #24]
 8000788:	4313      	orrs	r3, r2
 800078a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	69ba      	ldr	r2, [r7, #24]
 8000790:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000792:	683b      	ldr	r3, [r7, #0]
 8000794:	685b      	ldr	r3, [r3, #4]
 8000796:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800079a:	2b00      	cmp	r3, #0
 800079c:	f000 80e0 	beq.w	8000960 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007a0:	4a2f      	ldr	r2, [pc, #188]	; (8000860 <HAL_GPIO_Init+0x238>)
 80007a2:	4b2f      	ldr	r3, [pc, #188]	; (8000860 <HAL_GPIO_Init+0x238>)
 80007a4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80007a8:	f043 0302 	orr.w	r3, r3, #2
 80007ac:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80007b0:	4b2b      	ldr	r3, [pc, #172]	; (8000860 <HAL_GPIO_Init+0x238>)
 80007b2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80007b6:	f003 0302 	and.w	r3, r3, #2
 80007ba:	60fb      	str	r3, [r7, #12]
 80007bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80007be:	4a29      	ldr	r2, [pc, #164]	; (8000864 <HAL_GPIO_Init+0x23c>)
 80007c0:	69fb      	ldr	r3, [r7, #28]
 80007c2:	089b      	lsrs	r3, r3, #2
 80007c4:	3302      	adds	r3, #2
 80007c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80007cc:	69fb      	ldr	r3, [r7, #28]
 80007ce:	f003 0303 	and.w	r3, r3, #3
 80007d2:	009b      	lsls	r3, r3, #2
 80007d4:	220f      	movs	r2, #15
 80007d6:	fa02 f303 	lsl.w	r3, r2, r3
 80007da:	43db      	mvns	r3, r3
 80007dc:	69ba      	ldr	r2, [r7, #24]
 80007de:	4013      	ands	r3, r2
 80007e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	4a20      	ldr	r2, [pc, #128]	; (8000868 <HAL_GPIO_Init+0x240>)
 80007e6:	4293      	cmp	r3, r2
 80007e8:	d052      	beq.n	8000890 <HAL_GPIO_Init+0x268>
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	4a1f      	ldr	r2, [pc, #124]	; (800086c <HAL_GPIO_Init+0x244>)
 80007ee:	4293      	cmp	r3, r2
 80007f0:	d031      	beq.n	8000856 <HAL_GPIO_Init+0x22e>
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	4a1e      	ldr	r2, [pc, #120]	; (8000870 <HAL_GPIO_Init+0x248>)
 80007f6:	4293      	cmp	r3, r2
 80007f8:	d02b      	beq.n	8000852 <HAL_GPIO_Init+0x22a>
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	4a1d      	ldr	r2, [pc, #116]	; (8000874 <HAL_GPIO_Init+0x24c>)
 80007fe:	4293      	cmp	r3, r2
 8000800:	d025      	beq.n	800084e <HAL_GPIO_Init+0x226>
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	4a1c      	ldr	r2, [pc, #112]	; (8000878 <HAL_GPIO_Init+0x250>)
 8000806:	4293      	cmp	r3, r2
 8000808:	d01f      	beq.n	800084a <HAL_GPIO_Init+0x222>
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	4a1b      	ldr	r2, [pc, #108]	; (800087c <HAL_GPIO_Init+0x254>)
 800080e:	4293      	cmp	r3, r2
 8000810:	d019      	beq.n	8000846 <HAL_GPIO_Init+0x21e>
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	4a1a      	ldr	r2, [pc, #104]	; (8000880 <HAL_GPIO_Init+0x258>)
 8000816:	4293      	cmp	r3, r2
 8000818:	d013      	beq.n	8000842 <HAL_GPIO_Init+0x21a>
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	4a19      	ldr	r2, [pc, #100]	; (8000884 <HAL_GPIO_Init+0x25c>)
 800081e:	4293      	cmp	r3, r2
 8000820:	d00d      	beq.n	800083e <HAL_GPIO_Init+0x216>
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	4a18      	ldr	r2, [pc, #96]	; (8000888 <HAL_GPIO_Init+0x260>)
 8000826:	4293      	cmp	r3, r2
 8000828:	d007      	beq.n	800083a <HAL_GPIO_Init+0x212>
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	4a17      	ldr	r2, [pc, #92]	; (800088c <HAL_GPIO_Init+0x264>)
 800082e:	4293      	cmp	r3, r2
 8000830:	d101      	bne.n	8000836 <HAL_GPIO_Init+0x20e>
 8000832:	2309      	movs	r3, #9
 8000834:	e02d      	b.n	8000892 <HAL_GPIO_Init+0x26a>
 8000836:	230a      	movs	r3, #10
 8000838:	e02b      	b.n	8000892 <HAL_GPIO_Init+0x26a>
 800083a:	2308      	movs	r3, #8
 800083c:	e029      	b.n	8000892 <HAL_GPIO_Init+0x26a>
 800083e:	2307      	movs	r3, #7
 8000840:	e027      	b.n	8000892 <HAL_GPIO_Init+0x26a>
 8000842:	2306      	movs	r3, #6
 8000844:	e025      	b.n	8000892 <HAL_GPIO_Init+0x26a>
 8000846:	2305      	movs	r3, #5
 8000848:	e023      	b.n	8000892 <HAL_GPIO_Init+0x26a>
 800084a:	2304      	movs	r3, #4
 800084c:	e021      	b.n	8000892 <HAL_GPIO_Init+0x26a>
 800084e:	2303      	movs	r3, #3
 8000850:	e01f      	b.n	8000892 <HAL_GPIO_Init+0x26a>
 8000852:	2302      	movs	r3, #2
 8000854:	e01d      	b.n	8000892 <HAL_GPIO_Init+0x26a>
 8000856:	2301      	movs	r3, #1
 8000858:	e01b      	b.n	8000892 <HAL_GPIO_Init+0x26a>
 800085a:	bf00      	nop
 800085c:	58000080 	.word	0x58000080
 8000860:	58024400 	.word	0x58024400
 8000864:	58000400 	.word	0x58000400
 8000868:	58020000 	.word	0x58020000
 800086c:	58020400 	.word	0x58020400
 8000870:	58020800 	.word	0x58020800
 8000874:	58020c00 	.word	0x58020c00
 8000878:	58021000 	.word	0x58021000
 800087c:	58021400 	.word	0x58021400
 8000880:	58021800 	.word	0x58021800
 8000884:	58021c00 	.word	0x58021c00
 8000888:	58022000 	.word	0x58022000
 800088c:	58022400 	.word	0x58022400
 8000890:	2300      	movs	r3, #0
 8000892:	69fa      	ldr	r2, [r7, #28]
 8000894:	f002 0203 	and.w	r2, r2, #3
 8000898:	0092      	lsls	r2, r2, #2
 800089a:	4093      	lsls	r3, r2
 800089c:	69ba      	ldr	r2, [r7, #24]
 800089e:	4313      	orrs	r3, r2
 80008a0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80008a2:	4938      	ldr	r1, [pc, #224]	; (8000984 <HAL_GPIO_Init+0x35c>)
 80008a4:	69fb      	ldr	r3, [r7, #28]
 80008a6:	089b      	lsrs	r3, r3, #2
 80008a8:	3302      	adds	r3, #2
 80008aa:	69ba      	ldr	r2, [r7, #24]
 80008ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80008b0:	697b      	ldr	r3, [r7, #20]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80008b6:	693b      	ldr	r3, [r7, #16]
 80008b8:	43db      	mvns	r3, r3
 80008ba:	69ba      	ldr	r2, [r7, #24]
 80008bc:	4013      	ands	r3, r2
 80008be:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80008c0:	683b      	ldr	r3, [r7, #0]
 80008c2:	685b      	ldr	r3, [r3, #4]
 80008c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d003      	beq.n	80008d4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80008cc:	69ba      	ldr	r2, [r7, #24]
 80008ce:	693b      	ldr	r3, [r7, #16]
 80008d0:	4313      	orrs	r3, r2
 80008d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80008d4:	697b      	ldr	r3, [r7, #20]
 80008d6:	69ba      	ldr	r2, [r7, #24]
 80008d8:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80008da:	697b      	ldr	r3, [r7, #20]
 80008dc:	685b      	ldr	r3, [r3, #4]
 80008de:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80008e0:	693b      	ldr	r3, [r7, #16]
 80008e2:	43db      	mvns	r3, r3
 80008e4:	69ba      	ldr	r2, [r7, #24]
 80008e6:	4013      	ands	r3, r2
 80008e8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80008ea:	683b      	ldr	r3, [r7, #0]
 80008ec:	685b      	ldr	r3, [r3, #4]
 80008ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d003      	beq.n	80008fe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80008f6:	69ba      	ldr	r2, [r7, #24]
 80008f8:	693b      	ldr	r3, [r7, #16]
 80008fa:	4313      	orrs	r3, r2
 80008fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80008fe:	697b      	ldr	r3, [r7, #20]
 8000900:	69ba      	ldr	r2, [r7, #24]
 8000902:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000904:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800090c:	693b      	ldr	r3, [r7, #16]
 800090e:	43db      	mvns	r3, r3
 8000910:	69ba      	ldr	r2, [r7, #24]
 8000912:	4013      	ands	r3, r2
 8000914:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	685b      	ldr	r3, [r3, #4]
 800091a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800091e:	2b00      	cmp	r3, #0
 8000920:	d003      	beq.n	800092a <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8000922:	69ba      	ldr	r2, [r7, #24]
 8000924:	693b      	ldr	r3, [r7, #16]
 8000926:	4313      	orrs	r3, r2
 8000928:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800092a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800092e:	69bb      	ldr	r3, [r7, #24]
 8000930:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000932:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000936:	685b      	ldr	r3, [r3, #4]
 8000938:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800093a:	693b      	ldr	r3, [r7, #16]
 800093c:	43db      	mvns	r3, r3
 800093e:	69ba      	ldr	r2, [r7, #24]
 8000940:	4013      	ands	r3, r2
 8000942:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000944:	683b      	ldr	r3, [r7, #0]
 8000946:	685b      	ldr	r3, [r3, #4]
 8000948:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800094c:	2b00      	cmp	r3, #0
 800094e:	d003      	beq.n	8000958 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8000950:	69ba      	ldr	r2, [r7, #24]
 8000952:	693b      	ldr	r3, [r7, #16]
 8000954:	4313      	orrs	r3, r2
 8000956:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8000958:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800095c:	69bb      	ldr	r3, [r7, #24]
 800095e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8000960:	69fb      	ldr	r3, [r7, #28]
 8000962:	3301      	adds	r3, #1
 8000964:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000966:	683b      	ldr	r3, [r7, #0]
 8000968:	681a      	ldr	r2, [r3, #0]
 800096a:	69fb      	ldr	r3, [r7, #28]
 800096c:	fa22 f303 	lsr.w	r3, r2, r3
 8000970:	2b00      	cmp	r3, #0
 8000972:	f47f ae63 	bne.w	800063c <HAL_GPIO_Init+0x14>
  }
}
 8000976:	bf00      	nop
 8000978:	3724      	adds	r7, #36	; 0x24
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop
 8000984:	58000400 	.word	0x58000400

08000988 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000988:	b480      	push	{r7}
 800098a:	b083      	sub	sp, #12
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
 8000990:	460b      	mov	r3, r1
 8000992:	807b      	strh	r3, [r7, #2]
 8000994:	4613      	mov	r3, r2
 8000996:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000998:	787b      	ldrb	r3, [r7, #1]
 800099a:	2b00      	cmp	r3, #0
 800099c:	d003      	beq.n	80009a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800099e:	887a      	ldrh	r2, [r7, #2]
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80009a4:	e003      	b.n	80009ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80009a6:	887b      	ldrh	r3, [r7, #2]
 80009a8:	041a      	lsls	r2, r3, #16
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	619a      	str	r2, [r3, #24]
}
 80009ae:	bf00      	nop
 80009b0:	370c      	adds	r7, #12
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr

080009ba <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80009ba:	b480      	push	{r7}
 80009bc:	b083      	sub	sp, #12
 80009be:	af00      	add	r7, sp, #0
 80009c0:	6078      	str	r0, [r7, #4]
 80009c2:	460b      	mov	r3, r1
 80009c4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	695a      	ldr	r2, [r3, #20]
 80009ca:	887b      	ldrh	r3, [r7, #2]
 80009cc:	401a      	ands	r2, r3
 80009ce:	887b      	ldrh	r3, [r7, #2]
 80009d0:	429a      	cmp	r2, r3
 80009d2:	d104      	bne.n	80009de <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80009d4:	887b      	ldrh	r3, [r7, #2]
 80009d6:	041a      	lsls	r2, r3, #16
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80009dc:	e002      	b.n	80009e4 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80009de:	887a      	ldrh	r2, [r7, #2]
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	619a      	str	r2, [r3, #24]
}
 80009e4:	bf00      	nop
 80009e6:	370c      	adds	r7, #12
 80009e8:	46bd      	mov	sp, r7
 80009ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ee:	4770      	bx	lr

080009f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	4603      	mov	r3, r0
 80009f8:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80009fa:	4b08      	ldr	r3, [pc, #32]	; (8000a1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80009fc:	689a      	ldr	r2, [r3, #8]
 80009fe:	88fb      	ldrh	r3, [r7, #6]
 8000a00:	4013      	ands	r3, r2
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d006      	beq.n	8000a14 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000a06:	4a05      	ldr	r2, [pc, #20]	; (8000a1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000a08:	88fb      	ldrh	r3, [r7, #6]
 8000a0a:	6093      	str	r3, [r2, #8]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000a0c:	88fb      	ldrh	r3, [r7, #6]
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f003 f8f8 	bl	8003c04 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8000a14:	bf00      	nop
 8000a16:	3708      	adds	r7, #8
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	58000080 	.word	0x58000080

08000a20 <HAL_PWREx_ConfigSupply>:
  *            @arg PWR_EXTERNAL_SOURCE_SUPPLY          The LDO regulator is Bypassed.
  *                                                     The Vcore Power Domains are supplied from external source.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b084      	sub	sp, #16
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  if(!__HAL_PWR_GET_FLAG(PWR_FLAG_SCUEN))
 8000a28:	4b18      	ldr	r3, [pc, #96]	; (8000a8c <HAL_PWREx_ConfigSupply+0x6c>)
 8000a2a:	68db      	ldr	r3, [r3, #12]
 8000a2c:	f003 0304 	and.w	r3, r3, #4
 8000a30:	2b04      	cmp	r3, #4
 8000a32:	d008      	beq.n	8000a46 <HAL_PWREx_ConfigSupply+0x26>
  {
    if((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8000a34:	4b15      	ldr	r3, [pc, #84]	; (8000a8c <HAL_PWREx_ConfigSupply+0x6c>)
 8000a36:	68db      	ldr	r3, [r3, #12]
 8000a38:	f003 0207 	and.w	r2, r3, #7
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	429a      	cmp	r2, r3
 8000a40:	d001      	beq.n	8000a46 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new regulator config */
      return HAL_ERROR;
 8000a42:	2301      	movs	r3, #1
 8000a44:	e01d      	b.n	8000a82 <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG(PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8000a46:	4911      	ldr	r1, [pc, #68]	; (8000a8c <HAL_PWREx_ConfigSupply+0x6c>)
 8000a48:	4b10      	ldr	r3, [pc, #64]	; (8000a8c <HAL_PWREx_ConfigSupply+0x6c>)
 8000a4a:	68db      	ldr	r3, [r3, #12]
 8000a4c:	f023 0207 	bic.w	r2, r3, #7
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	4313      	orrs	r3, r2
 8000a54:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000a56:	f7ff fcc1 	bl	80003dc <HAL_GetTick>
 8000a5a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ACTVOSRDY))
 8000a5c:	e009      	b.n	8000a72 <HAL_PWREx_ConfigSupply+0x52>
  {
    if((HAL_GetTick() - tickstart ) > PWR_FLAG_SETTING_DELAY_US)
 8000a5e:	f7ff fcbd 	bl	80003dc <HAL_GetTick>
 8000a62:	4602      	mov	r2, r0
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	1ad3      	subs	r3, r2, r3
 8000a68:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000a6c:	d901      	bls.n	8000a72 <HAL_PWREx_ConfigSupply+0x52>
    {
      return HAL_TIMEOUT;
 8000a6e:	2303      	movs	r3, #3
 8000a70:	e007      	b.n	8000a82 <HAL_PWREx_ConfigSupply+0x62>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ACTVOSRDY))
 8000a72:	4b06      	ldr	r3, [pc, #24]	; (8000a8c <HAL_PWREx_ConfigSupply+0x6c>)
 8000a74:	685b      	ldr	r3, [r3, #4]
 8000a76:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a7e:	d1ee      	bne.n	8000a5e <HAL_PWREx_ConfigSupply+0x3e>
    }
  }

  return HAL_OK;
 8000a80:	2300      	movs	r3, #0
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	3710      	adds	r7, #16
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	58024800 	.word	0x58024800

08000a90 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b08a      	sub	sp, #40	; 0x28
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d101      	bne.n	8000aa2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	e3a4      	b.n	80011ec <HAL_RCC_OscConfig+0x75c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	f003 0301 	and.w	r3, r3, #1
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	f000 8087 	beq.w	8000bbe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000ab0:	4b9a      	ldr	r3, [pc, #616]	; (8000d1c <HAL_RCC_OscConfig+0x28c>)
 8000ab2:	691b      	ldr	r3, [r3, #16]
 8000ab4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000ab8:	627b      	str	r3, [r7, #36]	; 0x24
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8000aba:	4b98      	ldr	r3, [pc, #608]	; (8000d1c <HAL_RCC_OscConfig+0x28c>)
 8000abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000abe:	623b      	str	r3, [r7, #32]
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8000ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ac2:	2b10      	cmp	r3, #16
 8000ac4:	d007      	beq.n	8000ad6 <HAL_RCC_OscConfig+0x46>
 8000ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ac8:	2b18      	cmp	r3, #24
 8000aca:	d110      	bne.n	8000aee <HAL_RCC_OscConfig+0x5e>
 8000acc:	6a3b      	ldr	r3, [r7, #32]
 8000ace:	f003 0303 	and.w	r3, r3, #3
 8000ad2:	2b02      	cmp	r3, #2
 8000ad4:	d10b      	bne.n	8000aee <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ad6:	4b91      	ldr	r3, [pc, #580]	; (8000d1c <HAL_RCC_OscConfig+0x28c>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d06c      	beq.n	8000bbc <HAL_RCC_OscConfig+0x12c>
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	685b      	ldr	r3, [r3, #4]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d168      	bne.n	8000bbc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000aea:	2301      	movs	r3, #1
 8000aec:	e37e      	b.n	80011ec <HAL_RCC_OscConfig+0x75c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	685b      	ldr	r3, [r3, #4]
 8000af2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000af6:	d106      	bne.n	8000b06 <HAL_RCC_OscConfig+0x76>
 8000af8:	4a88      	ldr	r2, [pc, #544]	; (8000d1c <HAL_RCC_OscConfig+0x28c>)
 8000afa:	4b88      	ldr	r3, [pc, #544]	; (8000d1c <HAL_RCC_OscConfig+0x28c>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b02:	6013      	str	r3, [r2, #0]
 8000b04:	e02e      	b.n	8000b64 <HAL_RCC_OscConfig+0xd4>
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	685b      	ldr	r3, [r3, #4]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d10c      	bne.n	8000b28 <HAL_RCC_OscConfig+0x98>
 8000b0e:	4a83      	ldr	r2, [pc, #524]	; (8000d1c <HAL_RCC_OscConfig+0x28c>)
 8000b10:	4b82      	ldr	r3, [pc, #520]	; (8000d1c <HAL_RCC_OscConfig+0x28c>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b18:	6013      	str	r3, [r2, #0]
 8000b1a:	4a80      	ldr	r2, [pc, #512]	; (8000d1c <HAL_RCC_OscConfig+0x28c>)
 8000b1c:	4b7f      	ldr	r3, [pc, #508]	; (8000d1c <HAL_RCC_OscConfig+0x28c>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b24:	6013      	str	r3, [r2, #0]
 8000b26:	e01d      	b.n	8000b64 <HAL_RCC_OscConfig+0xd4>
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	685b      	ldr	r3, [r3, #4]
 8000b2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000b30:	d10c      	bne.n	8000b4c <HAL_RCC_OscConfig+0xbc>
 8000b32:	4a7a      	ldr	r2, [pc, #488]	; (8000d1c <HAL_RCC_OscConfig+0x28c>)
 8000b34:	4b79      	ldr	r3, [pc, #484]	; (8000d1c <HAL_RCC_OscConfig+0x28c>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b3c:	6013      	str	r3, [r2, #0]
 8000b3e:	4a77      	ldr	r2, [pc, #476]	; (8000d1c <HAL_RCC_OscConfig+0x28c>)
 8000b40:	4b76      	ldr	r3, [pc, #472]	; (8000d1c <HAL_RCC_OscConfig+0x28c>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b48:	6013      	str	r3, [r2, #0]
 8000b4a:	e00b      	b.n	8000b64 <HAL_RCC_OscConfig+0xd4>
 8000b4c:	4a73      	ldr	r2, [pc, #460]	; (8000d1c <HAL_RCC_OscConfig+0x28c>)
 8000b4e:	4b73      	ldr	r3, [pc, #460]	; (8000d1c <HAL_RCC_OscConfig+0x28c>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b56:	6013      	str	r3, [r2, #0]
 8000b58:	4a70      	ldr	r2, [pc, #448]	; (8000d1c <HAL_RCC_OscConfig+0x28c>)
 8000b5a:	4b70      	ldr	r3, [pc, #448]	; (8000d1c <HAL_RCC_OscConfig+0x28c>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	685b      	ldr	r3, [r3, #4]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d013      	beq.n	8000b94 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000b6c:	f7ff fc36 	bl	80003dc <HAL_GetTick>
 8000b70:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000b72:	e008      	b.n	8000b86 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b74:	f7ff fc32 	bl	80003dc <HAL_GetTick>
 8000b78:	4602      	mov	r2, r0
 8000b7a:	69fb      	ldr	r3, [r7, #28]
 8000b7c:	1ad3      	subs	r3, r2, r3
 8000b7e:	2b64      	cmp	r3, #100	; 0x64
 8000b80:	d901      	bls.n	8000b86 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000b82:	2303      	movs	r3, #3
 8000b84:	e332      	b.n	80011ec <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000b86:	4b65      	ldr	r3, [pc, #404]	; (8000d1c <HAL_RCC_OscConfig+0x28c>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d0f0      	beq.n	8000b74 <HAL_RCC_OscConfig+0xe4>
 8000b92:	e014      	b.n	8000bbe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000b94:	f7ff fc22 	bl	80003dc <HAL_GetTick>
 8000b98:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000b9a:	e008      	b.n	8000bae <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b9c:	f7ff fc1e 	bl	80003dc <HAL_GetTick>
 8000ba0:	4602      	mov	r2, r0
 8000ba2:	69fb      	ldr	r3, [r7, #28]
 8000ba4:	1ad3      	subs	r3, r2, r3
 8000ba6:	2b64      	cmp	r3, #100	; 0x64
 8000ba8:	d901      	bls.n	8000bae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000baa:	2303      	movs	r3, #3
 8000bac:	e31e      	b.n	80011ec <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000bae:	4b5b      	ldr	r3, [pc, #364]	; (8000d1c <HAL_RCC_OscConfig+0x28c>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d1f0      	bne.n	8000b9c <HAL_RCC_OscConfig+0x10c>
 8000bba:	e000      	b.n	8000bbe <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	f003 0302 	and.w	r3, r3, #2
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	f000 80b0 	beq.w	8000d2c <HAL_RCC_OscConfig+0x29c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000bcc:	4b53      	ldr	r3, [pc, #332]	; (8000d1c <HAL_RCC_OscConfig+0x28c>)
 8000bce:	691b      	ldr	r3, [r3, #16]
 8000bd0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000bd4:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8000bd6:	4b51      	ldr	r3, [pc, #324]	; (8000d1c <HAL_RCC_OscConfig+0x28c>)
 8000bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bda:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8000bdc:	69bb      	ldr	r3, [r7, #24]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d007      	beq.n	8000bf2 <HAL_RCC_OscConfig+0x162>
 8000be2:	69bb      	ldr	r3, [r7, #24]
 8000be4:	2b18      	cmp	r3, #24
 8000be6:	d149      	bne.n	8000c7c <HAL_RCC_OscConfig+0x1ec>
 8000be8:	697b      	ldr	r3, [r7, #20]
 8000bea:	f003 0303 	and.w	r3, r3, #3
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d144      	bne.n	8000c7c <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000bf2:	4b4a      	ldr	r3, [pc, #296]	; (8000d1c <HAL_RCC_OscConfig+0x28c>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	f003 0304 	and.w	r3, r3, #4
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d005      	beq.n	8000c0a <HAL_RCC_OscConfig+0x17a>
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	68db      	ldr	r3, [r3, #12]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d101      	bne.n	8000c0a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8000c06:	2301      	movs	r3, #1
 8000c08:	e2f0      	b.n	80011ec <HAL_RCC_OscConfig+0x75c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
      /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8000c0a:	4944      	ldr	r1, [pc, #272]	; (8000d1c <HAL_RCC_OscConfig+0x28c>)
 8000c0c:	4b43      	ldr	r3, [pc, #268]	; (8000d1c <HAL_RCC_OscConfig+0x28c>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	f023 0219 	bic.w	r2, r3, #25
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	68db      	ldr	r3, [r3, #12]
 8000c18:	4313      	orrs	r3, r2
 8000c1a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c1c:	f7ff fbde 	bl	80003dc <HAL_GetTick>
 8000c20:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000c22:	e008      	b.n	8000c36 <HAL_RCC_OscConfig+0x1a6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c24:	f7ff fbda 	bl	80003dc <HAL_GetTick>
 8000c28:	4602      	mov	r2, r0
 8000c2a:	69fb      	ldr	r3, [r7, #28]
 8000c2c:	1ad3      	subs	r3, r2, r3
 8000c2e:	2b02      	cmp	r3, #2
 8000c30:	d901      	bls.n	8000c36 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8000c32:	2303      	movs	r3, #3
 8000c34:	e2da      	b.n	80011ec <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000c36:	4b39      	ldr	r3, [pc, #228]	; (8000d1c <HAL_RCC_OscConfig+0x28c>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	f003 0304 	and.w	r3, r3, #4
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d0f0      	beq.n	8000c24 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c42:	f7ff fbd7 	bl	80003f4 <HAL_GetREVID>
 8000c46:	4602      	mov	r2, r0
 8000c48:	f241 0303 	movw	r3, #4099	; 0x1003
 8000c4c:	429a      	cmp	r2, r3
 8000c4e:	d80a      	bhi.n	8000c66 <HAL_RCC_OscConfig+0x1d6>
 8000c50:	4932      	ldr	r1, [pc, #200]	; (8000d1c <HAL_RCC_OscConfig+0x28c>)
 8000c52:	4b32      	ldr	r3, [pc, #200]	; (8000d1c <HAL_RCC_OscConfig+0x28c>)
 8000c54:	685b      	ldr	r3, [r3, #4]
 8000c56:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	691b      	ldr	r3, [r3, #16]
 8000c5e:	031b      	lsls	r3, r3, #12
 8000c60:	4313      	orrs	r3, r2
 8000c62:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000c64:	e062      	b.n	8000d2c <HAL_RCC_OscConfig+0x29c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c66:	492d      	ldr	r1, [pc, #180]	; (8000d1c <HAL_RCC_OscConfig+0x28c>)
 8000c68:	4b2c      	ldr	r3, [pc, #176]	; (8000d1c <HAL_RCC_OscConfig+0x28c>)
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	691b      	ldr	r3, [r3, #16]
 8000c74:	061b      	lsls	r3, r3, #24
 8000c76:	4313      	orrs	r3, r2
 8000c78:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000c7a:	e057      	b.n	8000d2c <HAL_RCC_OscConfig+0x29c>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	68db      	ldr	r3, [r3, #12]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d038      	beq.n	8000cf6 <HAL_RCC_OscConfig+0x266>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8000c84:	4925      	ldr	r1, [pc, #148]	; (8000d1c <HAL_RCC_OscConfig+0x28c>)
 8000c86:	4b25      	ldr	r3, [pc, #148]	; (8000d1c <HAL_RCC_OscConfig+0x28c>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	f023 0219 	bic.w	r2, r3, #25
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	68db      	ldr	r3, [r3, #12]
 8000c92:	4313      	orrs	r3, r2
 8000c94:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c96:	f7ff fba1 	bl	80003dc <HAL_GetTick>
 8000c9a:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000c9c:	e008      	b.n	8000cb0 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c9e:	f7ff fb9d 	bl	80003dc <HAL_GetTick>
 8000ca2:	4602      	mov	r2, r0
 8000ca4:	69fb      	ldr	r3, [r7, #28]
 8000ca6:	1ad3      	subs	r3, r2, r3
 8000ca8:	2b02      	cmp	r3, #2
 8000caa:	d901      	bls.n	8000cb0 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8000cac:	2303      	movs	r3, #3
 8000cae:	e29d      	b.n	80011ec <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000cb0:	4b1a      	ldr	r3, [pc, #104]	; (8000d1c <HAL_RCC_OscConfig+0x28c>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	f003 0304 	and.w	r3, r3, #4
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d0f0      	beq.n	8000c9e <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cbc:	f7ff fb9a 	bl	80003f4 <HAL_GetREVID>
 8000cc0:	4602      	mov	r2, r0
 8000cc2:	f241 0303 	movw	r3, #4099	; 0x1003
 8000cc6:	429a      	cmp	r2, r3
 8000cc8:	d80a      	bhi.n	8000ce0 <HAL_RCC_OscConfig+0x250>
 8000cca:	4914      	ldr	r1, [pc, #80]	; (8000d1c <HAL_RCC_OscConfig+0x28c>)
 8000ccc:	4b13      	ldr	r3, [pc, #76]	; (8000d1c <HAL_RCC_OscConfig+0x28c>)
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	691b      	ldr	r3, [r3, #16]
 8000cd8:	031b      	lsls	r3, r3, #12
 8000cda:	4313      	orrs	r3, r2
 8000cdc:	604b      	str	r3, [r1, #4]
 8000cde:	e025      	b.n	8000d2c <HAL_RCC_OscConfig+0x29c>
 8000ce0:	490e      	ldr	r1, [pc, #56]	; (8000d1c <HAL_RCC_OscConfig+0x28c>)
 8000ce2:	4b0e      	ldr	r3, [pc, #56]	; (8000d1c <HAL_RCC_OscConfig+0x28c>)
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	691b      	ldr	r3, [r3, #16]
 8000cee:	061b      	lsls	r3, r3, #24
 8000cf0:	4313      	orrs	r3, r2
 8000cf2:	604b      	str	r3, [r1, #4]
 8000cf4:	e01a      	b.n	8000d2c <HAL_RCC_OscConfig+0x29c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000cf6:	4a09      	ldr	r2, [pc, #36]	; (8000d1c <HAL_RCC_OscConfig+0x28c>)
 8000cf8:	4b08      	ldr	r3, [pc, #32]	; (8000d1c <HAL_RCC_OscConfig+0x28c>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	f023 0301 	bic.w	r3, r3, #1
 8000d00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d02:	f7ff fb6b 	bl	80003dc <HAL_GetTick>
 8000d06:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000d08:	e00a      	b.n	8000d20 <HAL_RCC_OscConfig+0x290>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d0a:	f7ff fb67 	bl	80003dc <HAL_GetTick>
 8000d0e:	4602      	mov	r2, r0
 8000d10:	69fb      	ldr	r3, [r7, #28]
 8000d12:	1ad3      	subs	r3, r2, r3
 8000d14:	2b02      	cmp	r3, #2
 8000d16:	d903      	bls.n	8000d20 <HAL_RCC_OscConfig+0x290>
          {
            return HAL_TIMEOUT;
 8000d18:	2303      	movs	r3, #3
 8000d1a:	e267      	b.n	80011ec <HAL_RCC_OscConfig+0x75c>
 8000d1c:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000d20:	4ba0      	ldr	r3, [pc, #640]	; (8000fa4 <HAL_RCC_OscConfig+0x514>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	f003 0304 	and.w	r3, r3, #4
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d1ee      	bne.n	8000d0a <HAL_RCC_OscConfig+0x27a>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	f003 0310 	and.w	r3, r3, #16
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	f000 808f 	beq.w	8000e58 <HAL_RCC_OscConfig+0x3c8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000d3a:	4b9a      	ldr	r3, [pc, #616]	; (8000fa4 <HAL_RCC_OscConfig+0x514>)
 8000d3c:	691b      	ldr	r3, [r3, #16]
 8000d3e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000d42:	613b      	str	r3, [r7, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8000d44:	4b97      	ldr	r3, [pc, #604]	; (8000fa4 <HAL_RCC_OscConfig+0x514>)
 8000d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d48:	60fb      	str	r3, [r7, #12]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8000d4a:	693b      	ldr	r3, [r7, #16]
 8000d4c:	2b08      	cmp	r3, #8
 8000d4e:	d007      	beq.n	8000d60 <HAL_RCC_OscConfig+0x2d0>
 8000d50:	693b      	ldr	r3, [r7, #16]
 8000d52:	2b18      	cmp	r3, #24
 8000d54:	d12d      	bne.n	8000db2 <HAL_RCC_OscConfig+0x322>
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	f003 0303 	and.w	r3, r3, #3
 8000d5c:	2b01      	cmp	r3, #1
 8000d5e:	d128      	bne.n	8000db2 <HAL_RCC_OscConfig+0x322>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8000d60:	4b90      	ldr	r3, [pc, #576]	; (8000fa4 <HAL_RCC_OscConfig+0x514>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d005      	beq.n	8000d78 <HAL_RCC_OscConfig+0x2e8>
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	69db      	ldr	r3, [r3, #28]
 8000d70:	2b80      	cmp	r3, #128	; 0x80
 8000d72:	d001      	beq.n	8000d78 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8000d74:	2301      	movs	r3, #1
 8000d76:	e239      	b.n	80011ec <HAL_RCC_OscConfig+0x75c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8000d78:	f7ff fb3c 	bl	80003f4 <HAL_GetREVID>
 8000d7c:	4602      	mov	r2, r0
 8000d7e:	f241 0303 	movw	r3, #4099	; 0x1003
 8000d82:	429a      	cmp	r2, r3
 8000d84:	d80a      	bhi.n	8000d9c <HAL_RCC_OscConfig+0x30c>
 8000d86:	4987      	ldr	r1, [pc, #540]	; (8000fa4 <HAL_RCC_OscConfig+0x514>)
 8000d88:	4b86      	ldr	r3, [pc, #536]	; (8000fa4 <HAL_RCC_OscConfig+0x514>)
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	6a1b      	ldr	r3, [r3, #32]
 8000d94:	069b      	lsls	r3, r3, #26
 8000d96:	4313      	orrs	r3, r2
 8000d98:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8000d9a:	e05d      	b.n	8000e58 <HAL_RCC_OscConfig+0x3c8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8000d9c:	4981      	ldr	r1, [pc, #516]	; (8000fa4 <HAL_RCC_OscConfig+0x514>)
 8000d9e:	4b81      	ldr	r3, [pc, #516]	; (8000fa4 <HAL_RCC_OscConfig+0x514>)
 8000da0:	68db      	ldr	r3, [r3, #12]
 8000da2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	6a1b      	ldr	r3, [r3, #32]
 8000daa:	061b      	lsls	r3, r3, #24
 8000dac:	4313      	orrs	r3, r2
 8000dae:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8000db0:	e052      	b.n	8000e58 <HAL_RCC_OscConfig+0x3c8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	69db      	ldr	r3, [r3, #28]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d035      	beq.n	8000e26 <HAL_RCC_OscConfig+0x396>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8000dba:	4a7a      	ldr	r2, [pc, #488]	; (8000fa4 <HAL_RCC_OscConfig+0x514>)
 8000dbc:	4b79      	ldr	r3, [pc, #484]	; (8000fa4 <HAL_RCC_OscConfig+0x514>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000dc4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000dc6:	f7ff fb09 	bl	80003dc <HAL_GetTick>
 8000dca:	61f8      	str	r0, [r7, #28]

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8000dcc:	e008      	b.n	8000de0 <HAL_RCC_OscConfig+0x350>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8000dce:	f7ff fb05 	bl	80003dc <HAL_GetTick>
 8000dd2:	4602      	mov	r2, r0
 8000dd4:	69fb      	ldr	r3, [r7, #28]
 8000dd6:	1ad3      	subs	r3, r2, r3
 8000dd8:	2b02      	cmp	r3, #2
 8000dda:	d901      	bls.n	8000de0 <HAL_RCC_OscConfig+0x350>
          {
            return HAL_TIMEOUT;
 8000ddc:	2303      	movs	r3, #3
 8000dde:	e205      	b.n	80011ec <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8000de0:	4b70      	ldr	r3, [pc, #448]	; (8000fa4 <HAL_RCC_OscConfig+0x514>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d0f0      	beq.n	8000dce <HAL_RCC_OscConfig+0x33e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8000dec:	f7ff fb02 	bl	80003f4 <HAL_GetREVID>
 8000df0:	4602      	mov	r2, r0
 8000df2:	f241 0303 	movw	r3, #4099	; 0x1003
 8000df6:	429a      	cmp	r2, r3
 8000df8:	d80a      	bhi.n	8000e10 <HAL_RCC_OscConfig+0x380>
 8000dfa:	496a      	ldr	r1, [pc, #424]	; (8000fa4 <HAL_RCC_OscConfig+0x514>)
 8000dfc:	4b69      	ldr	r3, [pc, #420]	; (8000fa4 <HAL_RCC_OscConfig+0x514>)
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	6a1b      	ldr	r3, [r3, #32]
 8000e08:	069b      	lsls	r3, r3, #26
 8000e0a:	4313      	orrs	r3, r2
 8000e0c:	604b      	str	r3, [r1, #4]
 8000e0e:	e023      	b.n	8000e58 <HAL_RCC_OscConfig+0x3c8>
 8000e10:	4964      	ldr	r1, [pc, #400]	; (8000fa4 <HAL_RCC_OscConfig+0x514>)
 8000e12:	4b64      	ldr	r3, [pc, #400]	; (8000fa4 <HAL_RCC_OscConfig+0x514>)
 8000e14:	68db      	ldr	r3, [r3, #12]
 8000e16:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	6a1b      	ldr	r3, [r3, #32]
 8000e1e:	061b      	lsls	r3, r3, #24
 8000e20:	4313      	orrs	r3, r2
 8000e22:	60cb      	str	r3, [r1, #12]
 8000e24:	e018      	b.n	8000e58 <HAL_RCC_OscConfig+0x3c8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8000e26:	4a5f      	ldr	r2, [pc, #380]	; (8000fa4 <HAL_RCC_OscConfig+0x514>)
 8000e28:	4b5e      	ldr	r3, [pc, #376]	; (8000fa4 <HAL_RCC_OscConfig+0x514>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000e30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e32:	f7ff fad3 	bl	80003dc <HAL_GetTick>
 8000e36:	61f8      	str	r0, [r7, #28]

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8000e38:	e008      	b.n	8000e4c <HAL_RCC_OscConfig+0x3bc>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8000e3a:	f7ff facf 	bl	80003dc <HAL_GetTick>
 8000e3e:	4602      	mov	r2, r0
 8000e40:	69fb      	ldr	r3, [r7, #28]
 8000e42:	1ad3      	subs	r3, r2, r3
 8000e44:	2b02      	cmp	r3, #2
 8000e46:	d901      	bls.n	8000e4c <HAL_RCC_OscConfig+0x3bc>
          {
            return HAL_TIMEOUT;
 8000e48:	2303      	movs	r3, #3
 8000e4a:	e1cf      	b.n	80011ec <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8000e4c:	4b55      	ldr	r3, [pc, #340]	; (8000fa4 <HAL_RCC_OscConfig+0x514>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d1f0      	bne.n	8000e3a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	f003 0308 	and.w	r3, r3, #8
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d036      	beq.n	8000ed2 <HAL_RCC_OscConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	695b      	ldr	r3, [r3, #20]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d019      	beq.n	8000ea0 <HAL_RCC_OscConfig+0x410>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e6c:	4a4d      	ldr	r2, [pc, #308]	; (8000fa4 <HAL_RCC_OscConfig+0x514>)
 8000e6e:	4b4d      	ldr	r3, [pc, #308]	; (8000fa4 <HAL_RCC_OscConfig+0x514>)
 8000e70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000e72:	f043 0301 	orr.w	r3, r3, #1
 8000e76:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e78:	f7ff fab0 	bl	80003dc <HAL_GetTick>
 8000e7c:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8000e7e:	e008      	b.n	8000e92 <HAL_RCC_OscConfig+0x402>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e80:	f7ff faac 	bl	80003dc <HAL_GetTick>
 8000e84:	4602      	mov	r2, r0
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	1ad3      	subs	r3, r2, r3
 8000e8a:	2b02      	cmp	r3, #2
 8000e8c:	d901      	bls.n	8000e92 <HAL_RCC_OscConfig+0x402>
        {
          return HAL_TIMEOUT;
 8000e8e:	2303      	movs	r3, #3
 8000e90:	e1ac      	b.n	80011ec <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8000e92:	4b44      	ldr	r3, [pc, #272]	; (8000fa4 <HAL_RCC_OscConfig+0x514>)
 8000e94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000e96:	f003 0302 	and.w	r3, r3, #2
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d0f0      	beq.n	8000e80 <HAL_RCC_OscConfig+0x3f0>
 8000e9e:	e018      	b.n	8000ed2 <HAL_RCC_OscConfig+0x442>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000ea0:	4a40      	ldr	r2, [pc, #256]	; (8000fa4 <HAL_RCC_OscConfig+0x514>)
 8000ea2:	4b40      	ldr	r3, [pc, #256]	; (8000fa4 <HAL_RCC_OscConfig+0x514>)
 8000ea4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000ea6:	f023 0301 	bic.w	r3, r3, #1
 8000eaa:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000eac:	f7ff fa96 	bl	80003dc <HAL_GetTick>
 8000eb0:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8000eb2:	e008      	b.n	8000ec6 <HAL_RCC_OscConfig+0x436>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000eb4:	f7ff fa92 	bl	80003dc <HAL_GetTick>
 8000eb8:	4602      	mov	r2, r0
 8000eba:	69fb      	ldr	r3, [r7, #28]
 8000ebc:	1ad3      	subs	r3, r2, r3
 8000ebe:	2b02      	cmp	r3, #2
 8000ec0:	d901      	bls.n	8000ec6 <HAL_RCC_OscConfig+0x436>
        {
          return HAL_TIMEOUT;
 8000ec2:	2303      	movs	r3, #3
 8000ec4:	e192      	b.n	80011ec <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8000ec6:	4b37      	ldr	r3, [pc, #220]	; (8000fa4 <HAL_RCC_OscConfig+0x514>)
 8000ec8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000eca:	f003 0302 	and.w	r3, r3, #2
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d1f0      	bne.n	8000eb4 <HAL_RCC_OscConfig+0x424>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f003 0320 	and.w	r3, r3, #32
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d036      	beq.n	8000f4c <HAL_RCC_OscConfig+0x4bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	699b      	ldr	r3, [r3, #24]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d019      	beq.n	8000f1a <HAL_RCC_OscConfig+0x48a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8000ee6:	4a2f      	ldr	r2, [pc, #188]	; (8000fa4 <HAL_RCC_OscConfig+0x514>)
 8000ee8:	4b2e      	ldr	r3, [pc, #184]	; (8000fa4 <HAL_RCC_OscConfig+0x514>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ef0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8000ef2:	f7ff fa73 	bl	80003dc <HAL_GetTick>
 8000ef6:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8000ef8:	e008      	b.n	8000f0c <HAL_RCC_OscConfig+0x47c>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8000efa:	f7ff fa6f 	bl	80003dc <HAL_GetTick>
 8000efe:	4602      	mov	r2, r0
 8000f00:	69fb      	ldr	r3, [r7, #28]
 8000f02:	1ad3      	subs	r3, r2, r3
 8000f04:	2b02      	cmp	r3, #2
 8000f06:	d901      	bls.n	8000f0c <HAL_RCC_OscConfig+0x47c>
        {
          return HAL_TIMEOUT;
 8000f08:	2303      	movs	r3, #3
 8000f0a:	e16f      	b.n	80011ec <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8000f0c:	4b25      	ldr	r3, [pc, #148]	; (8000fa4 <HAL_RCC_OscConfig+0x514>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d0f0      	beq.n	8000efa <HAL_RCC_OscConfig+0x46a>
 8000f18:	e018      	b.n	8000f4c <HAL_RCC_OscConfig+0x4bc>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8000f1a:	4a22      	ldr	r2, [pc, #136]	; (8000fa4 <HAL_RCC_OscConfig+0x514>)
 8000f1c:	4b21      	ldr	r3, [pc, #132]	; (8000fa4 <HAL_RCC_OscConfig+0x514>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000f24:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8000f26:	f7ff fa59 	bl	80003dc <HAL_GetTick>
 8000f2a:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8000f2c:	e008      	b.n	8000f40 <HAL_RCC_OscConfig+0x4b0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8000f2e:	f7ff fa55 	bl	80003dc <HAL_GetTick>
 8000f32:	4602      	mov	r2, r0
 8000f34:	69fb      	ldr	r3, [r7, #28]
 8000f36:	1ad3      	subs	r3, r2, r3
 8000f38:	2b02      	cmp	r3, #2
 8000f3a:	d901      	bls.n	8000f40 <HAL_RCC_OscConfig+0x4b0>
        {
          return HAL_TIMEOUT;
 8000f3c:	2303      	movs	r3, #3
 8000f3e:	e155      	b.n	80011ec <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8000f40:	4b18      	ldr	r3, [pc, #96]	; (8000fa4 <HAL_RCC_OscConfig+0x514>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d1f0      	bne.n	8000f2e <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f003 0304 	and.w	r3, r3, #4
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	f000 8086 	beq.w	8001066 <HAL_RCC_OscConfig+0x5d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8000f5a:	4a13      	ldr	r2, [pc, #76]	; (8000fa8 <HAL_RCC_OscConfig+0x518>)
 8000f5c:	4b12      	ldr	r3, [pc, #72]	; (8000fa8 <HAL_RCC_OscConfig+0x518>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f64:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8000f66:	f7ff fa39 	bl	80003dc <HAL_GetTick>
 8000f6a:	61f8      	str	r0, [r7, #28]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8000f6c:	e008      	b.n	8000f80 <HAL_RCC_OscConfig+0x4f0>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8000f6e:	f7ff fa35 	bl	80003dc <HAL_GetTick>
 8000f72:	4602      	mov	r2, r0
 8000f74:	69fb      	ldr	r3, [r7, #28]
 8000f76:	1ad3      	subs	r3, r2, r3
 8000f78:	2b64      	cmp	r3, #100	; 0x64
 8000f7a:	d901      	bls.n	8000f80 <HAL_RCC_OscConfig+0x4f0>
      {
        return HAL_TIMEOUT;
 8000f7c:	2303      	movs	r3, #3
 8000f7e:	e135      	b.n	80011ec <HAL_RCC_OscConfig+0x75c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8000f80:	4b09      	ldr	r3, [pc, #36]	; (8000fa8 <HAL_RCC_OscConfig+0x518>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d0f0      	beq.n	8000f6e <HAL_RCC_OscConfig+0x4de>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	689b      	ldr	r3, [r3, #8]
 8000f90:	2b01      	cmp	r3, #1
 8000f92:	d10b      	bne.n	8000fac <HAL_RCC_OscConfig+0x51c>
 8000f94:	4a03      	ldr	r2, [pc, #12]	; (8000fa4 <HAL_RCC_OscConfig+0x514>)
 8000f96:	4b03      	ldr	r3, [pc, #12]	; (8000fa4 <HAL_RCC_OscConfig+0x514>)
 8000f98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f9a:	f043 0301 	orr.w	r3, r3, #1
 8000f9e:	6713      	str	r3, [r2, #112]	; 0x70
 8000fa0:	e032      	b.n	8001008 <HAL_RCC_OscConfig+0x578>
 8000fa2:	bf00      	nop
 8000fa4:	58024400 	.word	0x58024400
 8000fa8:	58024800 	.word	0x58024800
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	689b      	ldr	r3, [r3, #8]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d10c      	bne.n	8000fce <HAL_RCC_OscConfig+0x53e>
 8000fb4:	4a8f      	ldr	r2, [pc, #572]	; (80011f4 <HAL_RCC_OscConfig+0x764>)
 8000fb6:	4b8f      	ldr	r3, [pc, #572]	; (80011f4 <HAL_RCC_OscConfig+0x764>)
 8000fb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000fba:	f023 0301 	bic.w	r3, r3, #1
 8000fbe:	6713      	str	r3, [r2, #112]	; 0x70
 8000fc0:	4a8c      	ldr	r2, [pc, #560]	; (80011f4 <HAL_RCC_OscConfig+0x764>)
 8000fc2:	4b8c      	ldr	r3, [pc, #560]	; (80011f4 <HAL_RCC_OscConfig+0x764>)
 8000fc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000fc6:	f023 0304 	bic.w	r3, r3, #4
 8000fca:	6713      	str	r3, [r2, #112]	; 0x70
 8000fcc:	e01c      	b.n	8001008 <HAL_RCC_OscConfig+0x578>
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	689b      	ldr	r3, [r3, #8]
 8000fd2:	2b05      	cmp	r3, #5
 8000fd4:	d10c      	bne.n	8000ff0 <HAL_RCC_OscConfig+0x560>
 8000fd6:	4a87      	ldr	r2, [pc, #540]	; (80011f4 <HAL_RCC_OscConfig+0x764>)
 8000fd8:	4b86      	ldr	r3, [pc, #536]	; (80011f4 <HAL_RCC_OscConfig+0x764>)
 8000fda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000fdc:	f043 0304 	orr.w	r3, r3, #4
 8000fe0:	6713      	str	r3, [r2, #112]	; 0x70
 8000fe2:	4a84      	ldr	r2, [pc, #528]	; (80011f4 <HAL_RCC_OscConfig+0x764>)
 8000fe4:	4b83      	ldr	r3, [pc, #524]	; (80011f4 <HAL_RCC_OscConfig+0x764>)
 8000fe6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000fe8:	f043 0301 	orr.w	r3, r3, #1
 8000fec:	6713      	str	r3, [r2, #112]	; 0x70
 8000fee:	e00b      	b.n	8001008 <HAL_RCC_OscConfig+0x578>
 8000ff0:	4a80      	ldr	r2, [pc, #512]	; (80011f4 <HAL_RCC_OscConfig+0x764>)
 8000ff2:	4b80      	ldr	r3, [pc, #512]	; (80011f4 <HAL_RCC_OscConfig+0x764>)
 8000ff4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ff6:	f023 0301 	bic.w	r3, r3, #1
 8000ffa:	6713      	str	r3, [r2, #112]	; 0x70
 8000ffc:	4a7d      	ldr	r2, [pc, #500]	; (80011f4 <HAL_RCC_OscConfig+0x764>)
 8000ffe:	4b7d      	ldr	r3, [pc, #500]	; (80011f4 <HAL_RCC_OscConfig+0x764>)
 8001000:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001002:	f023 0304 	bic.w	r3, r3, #4
 8001006:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	689b      	ldr	r3, [r3, #8]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d015      	beq.n	800103c <HAL_RCC_OscConfig+0x5ac>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001010:	f7ff f9e4 	bl	80003dc <HAL_GetTick>
 8001014:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001016:	e00a      	b.n	800102e <HAL_RCC_OscConfig+0x59e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001018:	f7ff f9e0 	bl	80003dc <HAL_GetTick>
 800101c:	4602      	mov	r2, r0
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	1ad3      	subs	r3, r2, r3
 8001022:	f241 3288 	movw	r2, #5000	; 0x1388
 8001026:	4293      	cmp	r3, r2
 8001028:	d901      	bls.n	800102e <HAL_RCC_OscConfig+0x59e>
        {
          return HAL_TIMEOUT;
 800102a:	2303      	movs	r3, #3
 800102c:	e0de      	b.n	80011ec <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800102e:	4b71      	ldr	r3, [pc, #452]	; (80011f4 <HAL_RCC_OscConfig+0x764>)
 8001030:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001032:	f003 0302 	and.w	r3, r3, #2
 8001036:	2b00      	cmp	r3, #0
 8001038:	d0ee      	beq.n	8001018 <HAL_RCC_OscConfig+0x588>
 800103a:	e014      	b.n	8001066 <HAL_RCC_OscConfig+0x5d6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800103c:	f7ff f9ce 	bl	80003dc <HAL_GetTick>
 8001040:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001042:	e00a      	b.n	800105a <HAL_RCC_OscConfig+0x5ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001044:	f7ff f9ca 	bl	80003dc <HAL_GetTick>
 8001048:	4602      	mov	r2, r0
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	1ad3      	subs	r3, r2, r3
 800104e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001052:	4293      	cmp	r3, r2
 8001054:	d901      	bls.n	800105a <HAL_RCC_OscConfig+0x5ca>
        {
          return HAL_TIMEOUT;
 8001056:	2303      	movs	r3, #3
 8001058:	e0c8      	b.n	80011ec <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800105a:	4b66      	ldr	r3, [pc, #408]	; (80011f4 <HAL_RCC_OscConfig+0x764>)
 800105c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800105e:	f003 0302 	and.w	r3, r3, #2
 8001062:	2b00      	cmp	r3, #0
 8001064:	d1ee      	bne.n	8001044 <HAL_RCC_OscConfig+0x5b4>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800106a:	2b00      	cmp	r3, #0
 800106c:	f000 80bd 	beq.w	80011ea <HAL_RCC_OscConfig+0x75a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001070:	4b60      	ldr	r3, [pc, #384]	; (80011f4 <HAL_RCC_OscConfig+0x764>)
 8001072:	691b      	ldr	r3, [r3, #16]
 8001074:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001078:	2b18      	cmp	r3, #24
 800107a:	f000 80b4 	beq.w	80011e6 <HAL_RCC_OscConfig+0x756>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001082:	2b02      	cmp	r3, #2
 8001084:	f040 8095 	bne.w	80011b2 <HAL_RCC_OscConfig+0x722>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001088:	4a5a      	ldr	r2, [pc, #360]	; (80011f4 <HAL_RCC_OscConfig+0x764>)
 800108a:	4b5a      	ldr	r3, [pc, #360]	; (80011f4 <HAL_RCC_OscConfig+0x764>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001092:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001094:	f7ff f9a2 	bl	80003dc <HAL_GetTick>
 8001098:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800109a:	e008      	b.n	80010ae <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800109c:	f7ff f99e 	bl	80003dc <HAL_GetTick>
 80010a0:	4602      	mov	r2, r0
 80010a2:	69fb      	ldr	r3, [r7, #28]
 80010a4:	1ad3      	subs	r3, r2, r3
 80010a6:	2b02      	cmp	r3, #2
 80010a8:	d901      	bls.n	80010ae <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 80010aa:	2303      	movs	r3, #3
 80010ac:	e09e      	b.n	80011ec <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80010ae:	4b51      	ldr	r3, [pc, #324]	; (80011f4 <HAL_RCC_OscConfig+0x764>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d1f0      	bne.n	800109c <HAL_RCC_OscConfig+0x60c>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80010ba:	484e      	ldr	r0, [pc, #312]	; (80011f4 <HAL_RCC_OscConfig+0x764>)
 80010bc:	4b4d      	ldr	r3, [pc, #308]	; (80011f4 <HAL_RCC_OscConfig+0x764>)
 80010be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80010c0:	4b4d      	ldr	r3, [pc, #308]	; (80011f8 <HAL_RCC_OscConfig+0x768>)
 80010c2:	4013      	ands	r3, r2
 80010c4:	687a      	ldr	r2, [r7, #4]
 80010c6:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80010c8:	687a      	ldr	r2, [r7, #4]
 80010ca:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80010cc:	0112      	lsls	r2, r2, #4
 80010ce:	430a      	orrs	r2, r1
 80010d0:	4313      	orrs	r3, r2
 80010d2:	6283      	str	r3, [r0, #40]	; 0x28
 80010d4:	4947      	ldr	r1, [pc, #284]	; (80011f4 <HAL_RCC_OscConfig+0x764>)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010da:	3b01      	subs	r3, #1
 80010dc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010e4:	3b01      	subs	r3, #1
 80010e6:	025b      	lsls	r3, r3, #9
 80010e8:	b29b      	uxth	r3, r3
 80010ea:	431a      	orrs	r2, r3
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010f0:	3b01      	subs	r3, #1
 80010f2:	041b      	lsls	r3, r3, #16
 80010f4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80010f8:	431a      	orrs	r2, r3
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010fe:	3b01      	subs	r3, #1
 8001100:	061b      	lsls	r3, r3, #24
 8001102:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001106:	4313      	orrs	r3, r2
 8001108:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800110a:	4a3a      	ldr	r2, [pc, #232]	; (80011f4 <HAL_RCC_OscConfig+0x764>)
 800110c:	4b39      	ldr	r3, [pc, #228]	; (80011f4 <HAL_RCC_OscConfig+0x764>)
 800110e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001110:	f023 0301 	bic.w	r3, r3, #1
 8001114:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL  PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001116:	4937      	ldr	r1, [pc, #220]	; (80011f4 <HAL_RCC_OscConfig+0x764>)
 8001118:	4b36      	ldr	r3, [pc, #216]	; (80011f4 <HAL_RCC_OscConfig+0x764>)
 800111a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800111c:	4b37      	ldr	r3, [pc, #220]	; (80011fc <HAL_RCC_OscConfig+0x76c>)
 800111e:	4013      	ands	r3, r2
 8001120:	687a      	ldr	r2, [r7, #4]
 8001122:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001124:	00d2      	lsls	r2, r2, #3
 8001126:	4313      	orrs	r3, r2
 8001128:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800112a:	4932      	ldr	r1, [pc, #200]	; (80011f4 <HAL_RCC_OscConfig+0x764>)
 800112c:	4b31      	ldr	r3, [pc, #196]	; (80011f4 <HAL_RCC_OscConfig+0x764>)
 800112e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001130:	f023 020c 	bic.w	r2, r3, #12
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001138:	4313      	orrs	r3, r2
 800113a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800113c:	492d      	ldr	r1, [pc, #180]	; (80011f4 <HAL_RCC_OscConfig+0x764>)
 800113e:	4b2d      	ldr	r3, [pc, #180]	; (80011f4 <HAL_RCC_OscConfig+0x764>)
 8001140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001142:	f023 0202 	bic.w	r2, r3, #2
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800114a:	4313      	orrs	r3, r2
 800114c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800114e:	4a29      	ldr	r2, [pc, #164]	; (80011f4 <HAL_RCC_OscConfig+0x764>)
 8001150:	4b28      	ldr	r3, [pc, #160]	; (80011f4 <HAL_RCC_OscConfig+0x764>)
 8001152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001154:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001158:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800115a:	4a26      	ldr	r2, [pc, #152]	; (80011f4 <HAL_RCC_OscConfig+0x764>)
 800115c:	4b25      	ldr	r3, [pc, #148]	; (80011f4 <HAL_RCC_OscConfig+0x764>)
 800115e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001160:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001164:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001166:	4a23      	ldr	r2, [pc, #140]	; (80011f4 <HAL_RCC_OscConfig+0x764>)
 8001168:	4b22      	ldr	r3, [pc, #136]	; (80011f4 <HAL_RCC_OscConfig+0x764>)
 800116a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800116c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001170:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8001172:	4a20      	ldr	r2, [pc, #128]	; (80011f4 <HAL_RCC_OscConfig+0x764>)
 8001174:	4b1f      	ldr	r3, [pc, #124]	; (80011f4 <HAL_RCC_OscConfig+0x764>)
 8001176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001178:	f043 0301 	orr.w	r3, r3, #1
 800117c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800117e:	4a1d      	ldr	r2, [pc, #116]	; (80011f4 <HAL_RCC_OscConfig+0x764>)
 8001180:	4b1c      	ldr	r3, [pc, #112]	; (80011f4 <HAL_RCC_OscConfig+0x764>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001188:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800118a:	f7ff f927 	bl	80003dc <HAL_GetTick>
 800118e:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001190:	e008      	b.n	80011a4 <HAL_RCC_OscConfig+0x714>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001192:	f7ff f923 	bl	80003dc <HAL_GetTick>
 8001196:	4602      	mov	r2, r0
 8001198:	69fb      	ldr	r3, [r7, #28]
 800119a:	1ad3      	subs	r3, r2, r3
 800119c:	2b02      	cmp	r3, #2
 800119e:	d901      	bls.n	80011a4 <HAL_RCC_OscConfig+0x714>
          {
            return HAL_TIMEOUT;
 80011a0:	2303      	movs	r3, #3
 80011a2:	e023      	b.n	80011ec <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80011a4:	4b13      	ldr	r3, [pc, #76]	; (80011f4 <HAL_RCC_OscConfig+0x764>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d0f0      	beq.n	8001192 <HAL_RCC_OscConfig+0x702>
 80011b0:	e01b      	b.n	80011ea <HAL_RCC_OscConfig+0x75a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011b2:	4a10      	ldr	r2, [pc, #64]	; (80011f4 <HAL_RCC_OscConfig+0x764>)
 80011b4:	4b0f      	ldr	r3, [pc, #60]	; (80011f4 <HAL_RCC_OscConfig+0x764>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80011bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011be:	f7ff f90d 	bl	80003dc <HAL_GetTick>
 80011c2:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80011c4:	e008      	b.n	80011d8 <HAL_RCC_OscConfig+0x748>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80011c6:	f7ff f909 	bl	80003dc <HAL_GetTick>
 80011ca:	4602      	mov	r2, r0
 80011cc:	69fb      	ldr	r3, [r7, #28]
 80011ce:	1ad3      	subs	r3, r2, r3
 80011d0:	2b02      	cmp	r3, #2
 80011d2:	d901      	bls.n	80011d8 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 80011d4:	2303      	movs	r3, #3
 80011d6:	e009      	b.n	80011ec <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80011d8:	4b06      	ldr	r3, [pc, #24]	; (80011f4 <HAL_RCC_OscConfig+0x764>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d1f0      	bne.n	80011c6 <HAL_RCC_OscConfig+0x736>
 80011e4:	e001      	b.n	80011ea <HAL_RCC_OscConfig+0x75a>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80011e6:	2301      	movs	r3, #1
 80011e8:	e000      	b.n	80011ec <HAL_RCC_OscConfig+0x75c>
    }
  }
  return HAL_OK;
 80011ea:	2300      	movs	r3, #0
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	3728      	adds	r7, #40	; 0x28
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	58024400 	.word	0x58024400
 80011f8:	fffffc0c 	.word	0xfffffc0c
 80011fc:	ffff0007 	.word	0xffff0007

08001200 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b084      	sub	sp, #16
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
 8001208:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d101      	bne.n	8001214 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001210:	2301      	movs	r3, #1
 8001212:	e18d      	b.n	8001530 <HAL_RCC_ClockConfig+0x330>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001214:	4b8a      	ldr	r3, [pc, #552]	; (8001440 <HAL_RCC_ClockConfig+0x240>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f003 020f 	and.w	r2, r3, #15
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	429a      	cmp	r2, r3
 8001220:	d210      	bcs.n	8001244 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001222:	4987      	ldr	r1, [pc, #540]	; (8001440 <HAL_RCC_ClockConfig+0x240>)
 8001224:	4b86      	ldr	r3, [pc, #536]	; (8001440 <HAL_RCC_ClockConfig+0x240>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f023 020f 	bic.w	r2, r3, #15
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	4313      	orrs	r3, r2
 8001230:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001232:	4b83      	ldr	r3, [pc, #524]	; (8001440 <HAL_RCC_ClockConfig+0x240>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f003 020f 	and.w	r2, r3, #15
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	429a      	cmp	r2, r3
 800123e:	d001      	beq.n	8001244 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001240:	2301      	movs	r3, #1
 8001242:	e175      	b.n	8001530 <HAL_RCC_ClockConfig+0x330>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f003 0304 	and.w	r3, r3, #4
 800124c:	2b00      	cmp	r3, #0
 800124e:	d010      	beq.n	8001272 <HAL_RCC_ClockConfig+0x72>
  {
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	691a      	ldr	r2, [r3, #16]
 8001254:	4b7b      	ldr	r3, [pc, #492]	; (8001444 <HAL_RCC_ClockConfig+0x244>)
 8001256:	699b      	ldr	r3, [r3, #24]
 8001258:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800125c:	429a      	cmp	r2, r3
 800125e:	d908      	bls.n	8001272 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001260:	4978      	ldr	r1, [pc, #480]	; (8001444 <HAL_RCC_ClockConfig+0x244>)
 8001262:	4b78      	ldr	r3, [pc, #480]	; (8001444 <HAL_RCC_ClockConfig+0x244>)
 8001264:	699b      	ldr	r3, [r3, #24]
 8001266:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	691b      	ldr	r3, [r3, #16]
 800126e:	4313      	orrs	r3, r2
 8001270:	618b      	str	r3, [r1, #24]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f003 0308 	and.w	r3, r3, #8
 800127a:	2b00      	cmp	r3, #0
 800127c:	d010      	beq.n	80012a0 <HAL_RCC_ClockConfig+0xa0>
  {
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	695a      	ldr	r2, [r3, #20]
 8001282:	4b70      	ldr	r3, [pc, #448]	; (8001444 <HAL_RCC_ClockConfig+0x244>)
 8001284:	69db      	ldr	r3, [r3, #28]
 8001286:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800128a:	429a      	cmp	r2, r3
 800128c:	d908      	bls.n	80012a0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800128e:	496d      	ldr	r1, [pc, #436]	; (8001444 <HAL_RCC_ClockConfig+0x244>)
 8001290:	4b6c      	ldr	r3, [pc, #432]	; (8001444 <HAL_RCC_ClockConfig+0x244>)
 8001292:	69db      	ldr	r3, [r3, #28]
 8001294:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	695b      	ldr	r3, [r3, #20]
 800129c:	4313      	orrs	r3, r2
 800129e:	61cb      	str	r3, [r1, #28]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f003 0310 	and.w	r3, r3, #16
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d010      	beq.n	80012ce <HAL_RCC_ClockConfig+0xce>
  {
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	699a      	ldr	r2, [r3, #24]
 80012b0:	4b64      	ldr	r3, [pc, #400]	; (8001444 <HAL_RCC_ClockConfig+0x244>)
 80012b2:	69db      	ldr	r3, [r3, #28]
 80012b4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80012b8:	429a      	cmp	r2, r3
 80012ba:	d908      	bls.n	80012ce <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80012bc:	4961      	ldr	r1, [pc, #388]	; (8001444 <HAL_RCC_ClockConfig+0x244>)
 80012be:	4b61      	ldr	r3, [pc, #388]	; (8001444 <HAL_RCC_ClockConfig+0x244>)
 80012c0:	69db      	ldr	r3, [r3, #28]
 80012c2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	699b      	ldr	r3, [r3, #24]
 80012ca:	4313      	orrs	r3, r2
 80012cc:	61cb      	str	r3, [r1, #28]
    }
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f003 0320 	and.w	r3, r3, #32
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d010      	beq.n	80012fc <HAL_RCC_ClockConfig+0xfc>
  {
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	69da      	ldr	r2, [r3, #28]
 80012de:	4b59      	ldr	r3, [pc, #356]	; (8001444 <HAL_RCC_ClockConfig+0x244>)
 80012e0:	6a1b      	ldr	r3, [r3, #32]
 80012e2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80012e6:	429a      	cmp	r2, r3
 80012e8:	d908      	bls.n	80012fc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80012ea:	4956      	ldr	r1, [pc, #344]	; (8001444 <HAL_RCC_ClockConfig+0x244>)
 80012ec:	4b55      	ldr	r3, [pc, #340]	; (8001444 <HAL_RCC_ClockConfig+0x244>)
 80012ee:	6a1b      	ldr	r3, [r3, #32]
 80012f0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	69db      	ldr	r3, [r3, #28]
 80012f8:	4313      	orrs	r3, r2
 80012fa:	620b      	str	r3, [r1, #32]
    }
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f003 0302 	and.w	r3, r3, #2
 8001304:	2b00      	cmp	r3, #0
 8001306:	d010      	beq.n	800132a <HAL_RCC_ClockConfig+0x12a>
  {
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	68da      	ldr	r2, [r3, #12]
 800130c:	4b4d      	ldr	r3, [pc, #308]	; (8001444 <HAL_RCC_ClockConfig+0x244>)
 800130e:	699b      	ldr	r3, [r3, #24]
 8001310:	f003 030f 	and.w	r3, r3, #15
 8001314:	429a      	cmp	r2, r3
 8001316:	d908      	bls.n	800132a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001318:	494a      	ldr	r1, [pc, #296]	; (8001444 <HAL_RCC_ClockConfig+0x244>)
 800131a:	4b4a      	ldr	r3, [pc, #296]	; (8001444 <HAL_RCC_ClockConfig+0x244>)
 800131c:	699b      	ldr	r3, [r3, #24]
 800131e:	f023 020f 	bic.w	r2, r3, #15
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	68db      	ldr	r3, [r3, #12]
 8001326:	4313      	orrs	r3, r2
 8001328:	618b      	str	r3, [r1, #24]
    }
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f003 0301 	and.w	r3, r3, #1
 8001332:	2b00      	cmp	r3, #0
 8001334:	d055      	beq.n	80013e2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001336:	4943      	ldr	r1, [pc, #268]	; (8001444 <HAL_RCC_ClockConfig+0x244>)
 8001338:	4b42      	ldr	r3, [pc, #264]	; (8001444 <HAL_RCC_ClockConfig+0x244>)
 800133a:	699b      	ldr	r3, [r3, #24]
 800133c:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	689b      	ldr	r3, [r3, #8]
 8001344:	4313      	orrs	r3, r2
 8001346:	618b      	str	r3, [r1, #24]
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	2b02      	cmp	r3, #2
 800134e:	d107      	bne.n	8001360 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001350:	4b3c      	ldr	r3, [pc, #240]	; (8001444 <HAL_RCC_ClockConfig+0x244>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001358:	2b00      	cmp	r3, #0
 800135a:	d121      	bne.n	80013a0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800135c:	2301      	movs	r3, #1
 800135e:	e0e7      	b.n	8001530 <HAL_RCC_ClockConfig+0x330>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	2b03      	cmp	r3, #3
 8001366:	d107      	bne.n	8001378 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001368:	4b36      	ldr	r3, [pc, #216]	; (8001444 <HAL_RCC_ClockConfig+0x244>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001370:	2b00      	cmp	r3, #0
 8001372:	d115      	bne.n	80013a0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001374:	2301      	movs	r3, #1
 8001376:	e0db      	b.n	8001530 <HAL_RCC_ClockConfig+0x330>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	2b01      	cmp	r3, #1
 800137e:	d107      	bne.n	8001390 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001380:	4b30      	ldr	r3, [pc, #192]	; (8001444 <HAL_RCC_ClockConfig+0x244>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001388:	2b00      	cmp	r3, #0
 800138a:	d109      	bne.n	80013a0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800138c:	2301      	movs	r3, #1
 800138e:	e0cf      	b.n	8001530 <HAL_RCC_ClockConfig+0x330>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001390:	4b2c      	ldr	r3, [pc, #176]	; (8001444 <HAL_RCC_ClockConfig+0x244>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f003 0304 	and.w	r3, r3, #4
 8001398:	2b00      	cmp	r3, #0
 800139a:	d101      	bne.n	80013a0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800139c:	2301      	movs	r3, #1
 800139e:	e0c7      	b.n	8001530 <HAL_RCC_ClockConfig+0x330>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80013a0:	4928      	ldr	r1, [pc, #160]	; (8001444 <HAL_RCC_ClockConfig+0x244>)
 80013a2:	4b28      	ldr	r3, [pc, #160]	; (8001444 <HAL_RCC_ClockConfig+0x244>)
 80013a4:	691b      	ldr	r3, [r3, #16]
 80013a6:	f023 0207 	bic.w	r2, r3, #7
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	4313      	orrs	r3, r2
 80013b0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013b2:	f7ff f813 	bl	80003dc <HAL_GetTick>
 80013b6:	60f8      	str	r0, [r7, #12]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013b8:	e00a      	b.n	80013d0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013ba:	f7ff f80f 	bl	80003dc <HAL_GetTick>
 80013be:	4602      	mov	r2, r0
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	1ad3      	subs	r3, r2, r3
 80013c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d901      	bls.n	80013d0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80013cc:	2303      	movs	r3, #3
 80013ce:	e0af      	b.n	8001530 <HAL_RCC_ClockConfig+0x330>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013d0:	4b1c      	ldr	r3, [pc, #112]	; (8001444 <HAL_RCC_ClockConfig+0x244>)
 80013d2:	691b      	ldr	r3, [r3, #16]
 80013d4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	00db      	lsls	r3, r3, #3
 80013de:	429a      	cmp	r2, r3
 80013e0:	d1eb      	bne.n	80013ba <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f003 0302 	and.w	r3, r3, #2
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d010      	beq.n	8001410 <HAL_RCC_ClockConfig+0x210>
  {
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	68da      	ldr	r2, [r3, #12]
 80013f2:	4b14      	ldr	r3, [pc, #80]	; (8001444 <HAL_RCC_ClockConfig+0x244>)
 80013f4:	699b      	ldr	r3, [r3, #24]
 80013f6:	f003 030f 	and.w	r3, r3, #15
 80013fa:	429a      	cmp	r2, r3
 80013fc:	d208      	bcs.n	8001410 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013fe:	4911      	ldr	r1, [pc, #68]	; (8001444 <HAL_RCC_ClockConfig+0x244>)
 8001400:	4b10      	ldr	r3, [pc, #64]	; (8001444 <HAL_RCC_ClockConfig+0x244>)
 8001402:	699b      	ldr	r3, [r3, #24]
 8001404:	f023 020f 	bic.w	r2, r3, #15
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	68db      	ldr	r3, [r3, #12]
 800140c:	4313      	orrs	r3, r2
 800140e:	618b      	str	r3, [r1, #24]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001410:	4b0b      	ldr	r3, [pc, #44]	; (8001440 <HAL_RCC_ClockConfig+0x240>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f003 020f 	and.w	r2, r3, #15
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	429a      	cmp	r2, r3
 800141c:	d914      	bls.n	8001448 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800141e:	4908      	ldr	r1, [pc, #32]	; (8001440 <HAL_RCC_ClockConfig+0x240>)
 8001420:	4b07      	ldr	r3, [pc, #28]	; (8001440 <HAL_RCC_ClockConfig+0x240>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f023 020f 	bic.w	r2, r3, #15
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	4313      	orrs	r3, r2
 800142c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800142e:	4b04      	ldr	r3, [pc, #16]	; (8001440 <HAL_RCC_ClockConfig+0x240>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f003 020f 	and.w	r2, r3, #15
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	429a      	cmp	r2, r3
 800143a:	d005      	beq.n	8001448 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800143c:	2301      	movs	r3, #1
 800143e:	e077      	b.n	8001530 <HAL_RCC_ClockConfig+0x330>
 8001440:	52002000 	.word	0x52002000
 8001444:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f003 0304 	and.w	r3, r3, #4
 8001450:	2b00      	cmp	r3, #0
 8001452:	d010      	beq.n	8001476 <HAL_RCC_ClockConfig+0x276>
 {
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	691a      	ldr	r2, [r3, #16]
 8001458:	4b37      	ldr	r3, [pc, #220]	; (8001538 <HAL_RCC_ClockConfig+0x338>)
 800145a:	699b      	ldr	r3, [r3, #24]
 800145c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001460:	429a      	cmp	r2, r3
 8001462:	d208      	bcs.n	8001476 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001464:	4934      	ldr	r1, [pc, #208]	; (8001538 <HAL_RCC_ClockConfig+0x338>)
 8001466:	4b34      	ldr	r3, [pc, #208]	; (8001538 <HAL_RCC_ClockConfig+0x338>)
 8001468:	699b      	ldr	r3, [r3, #24]
 800146a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	691b      	ldr	r3, [r3, #16]
 8001472:	4313      	orrs	r3, r2
 8001474:	618b      	str	r3, [r1, #24]
   }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f003 0308 	and.w	r3, r3, #8
 800147e:	2b00      	cmp	r3, #0
 8001480:	d010      	beq.n	80014a4 <HAL_RCC_ClockConfig+0x2a4>
 {
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	695a      	ldr	r2, [r3, #20]
 8001486:	4b2c      	ldr	r3, [pc, #176]	; (8001538 <HAL_RCC_ClockConfig+0x338>)
 8001488:	69db      	ldr	r3, [r3, #28]
 800148a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800148e:	429a      	cmp	r2, r3
 8001490:	d208      	bcs.n	80014a4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001492:	4929      	ldr	r1, [pc, #164]	; (8001538 <HAL_RCC_ClockConfig+0x338>)
 8001494:	4b28      	ldr	r3, [pc, #160]	; (8001538 <HAL_RCC_ClockConfig+0x338>)
 8001496:	69db      	ldr	r3, [r3, #28]
 8001498:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	695b      	ldr	r3, [r3, #20]
 80014a0:	4313      	orrs	r3, r2
 80014a2:	61cb      	str	r3, [r1, #28]
   }
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f003 0310 	and.w	r3, r3, #16
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d010      	beq.n	80014d2 <HAL_RCC_ClockConfig+0x2d2>
 {
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	699a      	ldr	r2, [r3, #24]
 80014b4:	4b20      	ldr	r3, [pc, #128]	; (8001538 <HAL_RCC_ClockConfig+0x338>)
 80014b6:	69db      	ldr	r3, [r3, #28]
 80014b8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80014bc:	429a      	cmp	r2, r3
 80014be:	d208      	bcs.n	80014d2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80014c0:	491d      	ldr	r1, [pc, #116]	; (8001538 <HAL_RCC_ClockConfig+0x338>)
 80014c2:	4b1d      	ldr	r3, [pc, #116]	; (8001538 <HAL_RCC_ClockConfig+0x338>)
 80014c4:	69db      	ldr	r3, [r3, #28]
 80014c6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	699b      	ldr	r3, [r3, #24]
 80014ce:	4313      	orrs	r3, r2
 80014d0:	61cb      	str	r3, [r1, #28]
   }
 }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f003 0320 	and.w	r3, r3, #32
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d010      	beq.n	8001500 <HAL_RCC_ClockConfig+0x300>
 {
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	69da      	ldr	r2, [r3, #28]
 80014e2:	4b15      	ldr	r3, [pc, #84]	; (8001538 <HAL_RCC_ClockConfig+0x338>)
 80014e4:	6a1b      	ldr	r3, [r3, #32]
 80014e6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80014ea:	429a      	cmp	r2, r3
 80014ec:	d208      	bcs.n	8001500 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80014ee:	4912      	ldr	r1, [pc, #72]	; (8001538 <HAL_RCC_ClockConfig+0x338>)
 80014f0:	4b11      	ldr	r3, [pc, #68]	; (8001538 <HAL_RCC_ClockConfig+0x338>)
 80014f2:	6a1b      	ldr	r3, [r3, #32]
 80014f4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	69db      	ldr	r3, [r3, #28]
 80014fc:	4313      	orrs	r3, r2
 80014fe:	620b      	str	r3, [r1, #32]
   }
 }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001500:	f000 f822 	bl	8001548 <HAL_RCC_GetSysClockFreq>
 8001504:	4601      	mov	r1, r0
 8001506:	4b0c      	ldr	r3, [pc, #48]	; (8001538 <HAL_RCC_ClockConfig+0x338>)
 8001508:	699b      	ldr	r3, [r3, #24]
 800150a:	0a1b      	lsrs	r3, r3, #8
 800150c:	f003 030f 	and.w	r3, r3, #15
 8001510:	4a0a      	ldr	r2, [pc, #40]	; (800153c <HAL_RCC_ClockConfig+0x33c>)
 8001512:	5cd3      	ldrb	r3, [r2, r3]
 8001514:	f003 031f 	and.w	r3, r3, #31
 8001518:	fa21 f303 	lsr.w	r3, r1, r3
 800151c:	4a08      	ldr	r2, [pc, #32]	; (8001540 <HAL_RCC_ClockConfig+0x340>)
 800151e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8001520:	4b08      	ldr	r3, [pc, #32]	; (8001544 <HAL_RCC_ClockConfig+0x344>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4618      	mov	r0, r3
 8001526:	f7fe ff0f 	bl	8000348 <HAL_InitTick>
 800152a:	4603      	mov	r3, r0
 800152c:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 800152e:	7afb      	ldrb	r3, [r7, #11]
}
 8001530:	4618      	mov	r0, r3
 8001532:	3710      	adds	r7, #16
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	58024400 	.word	0x58024400
 800153c:	080043b4 	.word	0x080043b4
 8001540:	20000008 	.word	0x20000008
 8001544:	20000000 	.word	0x20000000

08001548 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001548:	b480      	push	{r7}
 800154a:	b089      	sub	sp, #36	; 0x24
 800154c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800154e:	4baf      	ldr	r3, [pc, #700]	; (800180c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001550:	691b      	ldr	r3, [r3, #16]
 8001552:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001556:	2b18      	cmp	r3, #24
 8001558:	f200 814e 	bhi.w	80017f8 <HAL_RCC_GetSysClockFreq+0x2b0>
 800155c:	a201      	add	r2, pc, #4	; (adr r2, 8001564 <HAL_RCC_GetSysClockFreq+0x1c>)
 800155e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001562:	bf00      	nop
 8001564:	080015c9 	.word	0x080015c9
 8001568:	080017f9 	.word	0x080017f9
 800156c:	080017f9 	.word	0x080017f9
 8001570:	080017f9 	.word	0x080017f9
 8001574:	080017f9 	.word	0x080017f9
 8001578:	080017f9 	.word	0x080017f9
 800157c:	080017f9 	.word	0x080017f9
 8001580:	080017f9 	.word	0x080017f9
 8001584:	080015ef 	.word	0x080015ef
 8001588:	080017f9 	.word	0x080017f9
 800158c:	080017f9 	.word	0x080017f9
 8001590:	080017f9 	.word	0x080017f9
 8001594:	080017f9 	.word	0x080017f9
 8001598:	080017f9 	.word	0x080017f9
 800159c:	080017f9 	.word	0x080017f9
 80015a0:	080017f9 	.word	0x080017f9
 80015a4:	080015f5 	.word	0x080015f5
 80015a8:	080017f9 	.word	0x080017f9
 80015ac:	080017f9 	.word	0x080017f9
 80015b0:	080017f9 	.word	0x080017f9
 80015b4:	080017f9 	.word	0x080017f9
 80015b8:	080017f9 	.word	0x080017f9
 80015bc:	080017f9 	.word	0x080017f9
 80015c0:	080017f9 	.word	0x080017f9
 80015c4:	080015fb 	.word	0x080015fb
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80015c8:	4b90      	ldr	r3, [pc, #576]	; (800180c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f003 0320 	and.w	r3, r3, #32
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d009      	beq.n	80015e8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80015d4:	4b8d      	ldr	r3, [pc, #564]	; (800180c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	08db      	lsrs	r3, r3, #3
 80015da:	f003 0303 	and.w	r3, r3, #3
 80015de:	4a8c      	ldr	r2, [pc, #560]	; (8001810 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80015e0:	fa22 f303 	lsr.w	r3, r2, r3
 80015e4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80015e6:	e10a      	b.n	80017fe <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80015e8:	4b89      	ldr	r3, [pc, #548]	; (8001810 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80015ea:	61bb      	str	r3, [r7, #24]
    break;
 80015ec:	e107      	b.n	80017fe <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80015ee:	4b89      	ldr	r3, [pc, #548]	; (8001814 <HAL_RCC_GetSysClockFreq+0x2cc>)
 80015f0:	61bb      	str	r3, [r7, #24]
    break;
 80015f2:	e104      	b.n	80017fe <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80015f4:	4b88      	ldr	r3, [pc, #544]	; (8001818 <HAL_RCC_GetSysClockFreq+0x2d0>)
 80015f6:	61bb      	str	r3, [r7, #24]
    break;
 80015f8:	e101      	b.n	80017fe <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80015fa:	4b84      	ldr	r3, [pc, #528]	; (800180c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80015fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015fe:	f003 0303 	and.w	r3, r3, #3
 8001602:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8001604:	4b81      	ldr	r3, [pc, #516]	; (800180c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001608:	091b      	lsrs	r3, r3, #4
 800160a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800160e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001610:	4b7e      	ldr	r3, [pc, #504]	; (800180c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001614:	f003 0301 	and.w	r3, r3, #1
 8001618:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800161a:	4b7c      	ldr	r3, [pc, #496]	; (800180c <HAL_RCC_GetSysClockFreq+0x2c4>)
 800161c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800161e:	08db      	lsrs	r3, r3, #3
 8001620:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001624:	68fa      	ldr	r2, [r7, #12]
 8001626:	fb02 f303 	mul.w	r3, r2, r3
 800162a:	ee07 3a90 	vmov	s15, r3
 800162e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001632:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	2b00      	cmp	r3, #0
 800163a:	f000 80da 	beq.w	80017f2 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	2b01      	cmp	r3, #1
 8001642:	d05a      	beq.n	80016fa <HAL_RCC_GetSysClockFreq+0x1b2>
 8001644:	2b01      	cmp	r3, #1
 8001646:	d302      	bcc.n	800164e <HAL_RCC_GetSysClockFreq+0x106>
 8001648:	2b02      	cmp	r3, #2
 800164a:	d078      	beq.n	800173e <HAL_RCC_GetSysClockFreq+0x1f6>
 800164c:	e099      	b.n	8001782 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800164e:	4b6f      	ldr	r3, [pc, #444]	; (800180c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f003 0320 	and.w	r3, r3, #32
 8001656:	2b00      	cmp	r3, #0
 8001658:	d02d      	beq.n	80016b6 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800165a:	4b6c      	ldr	r3, [pc, #432]	; (800180c <HAL_RCC_GetSysClockFreq+0x2c4>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	08db      	lsrs	r3, r3, #3
 8001660:	f003 0303 	and.w	r3, r3, #3
 8001664:	4a6a      	ldr	r2, [pc, #424]	; (8001810 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8001666:	fa22 f303 	lsr.w	r3, r2, r3
 800166a:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	ee07 3a90 	vmov	s15, r3
 8001672:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	ee07 3a90 	vmov	s15, r3
 800167c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001680:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001684:	4b61      	ldr	r3, [pc, #388]	; (800180c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001688:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800168c:	ee07 3a90 	vmov	s15, r3
 8001690:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001694:	ed97 6a02 	vldr	s12, [r7, #8]
 8001698:	eddf 5a60 	vldr	s11, [pc, #384]	; 800181c <HAL_RCC_GetSysClockFreq+0x2d4>
 800169c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80016a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80016a4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80016a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80016ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016b0:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80016b4:	e087      	b.n	80017c6 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	ee07 3a90 	vmov	s15, r3
 80016bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016c0:	eddf 6a57 	vldr	s13, [pc, #348]	; 8001820 <HAL_RCC_GetSysClockFreq+0x2d8>
 80016c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80016c8:	4b50      	ldr	r3, [pc, #320]	; (800180c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80016ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80016d0:	ee07 3a90 	vmov	s15, r3
 80016d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80016d8:	ed97 6a02 	vldr	s12, [r7, #8]
 80016dc:	eddf 5a4f 	vldr	s11, [pc, #316]	; 800181c <HAL_RCC_GetSysClockFreq+0x2d4>
 80016e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80016e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80016e8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80016ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80016f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016f4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80016f8:	e065      	b.n	80017c6 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	ee07 3a90 	vmov	s15, r3
 8001700:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001704:	eddf 6a47 	vldr	s13, [pc, #284]	; 8001824 <HAL_RCC_GetSysClockFreq+0x2dc>
 8001708:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800170c:	4b3f      	ldr	r3, [pc, #252]	; (800180c <HAL_RCC_GetSysClockFreq+0x2c4>)
 800170e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001710:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001714:	ee07 3a90 	vmov	s15, r3
 8001718:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800171c:	ed97 6a02 	vldr	s12, [r7, #8]
 8001720:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800181c <HAL_RCC_GetSysClockFreq+0x2d4>
 8001724:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001728:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800172c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001730:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001734:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001738:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800173c:	e043      	b.n	80017c6 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	ee07 3a90 	vmov	s15, r3
 8001744:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001748:	eddf 6a37 	vldr	s13, [pc, #220]	; 8001828 <HAL_RCC_GetSysClockFreq+0x2e0>
 800174c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001750:	4b2e      	ldr	r3, [pc, #184]	; (800180c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001754:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001758:	ee07 3a90 	vmov	s15, r3
 800175c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001760:	ed97 6a02 	vldr	s12, [r7, #8]
 8001764:	eddf 5a2d 	vldr	s11, [pc, #180]	; 800181c <HAL_RCC_GetSysClockFreq+0x2d4>
 8001768:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800176c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001770:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001774:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001778:	ee67 7a27 	vmul.f32	s15, s14, s15
 800177c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001780:	e021      	b.n	80017c6 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	ee07 3a90 	vmov	s15, r3
 8001788:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800178c:	eddf 6a25 	vldr	s13, [pc, #148]	; 8001824 <HAL_RCC_GetSysClockFreq+0x2dc>
 8001790:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001794:	4b1d      	ldr	r3, [pc, #116]	; (800180c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001798:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800179c:	ee07 3a90 	vmov	s15, r3
 80017a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80017a4:	ed97 6a02 	vldr	s12, [r7, #8]
 80017a8:	eddf 5a1c 	vldr	s11, [pc, #112]	; 800181c <HAL_RCC_GetSysClockFreq+0x2d4>
 80017ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80017b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80017b4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80017b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80017bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017c0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80017c4:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80017c6:	4b11      	ldr	r3, [pc, #68]	; (800180c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80017c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ca:	0a5b      	lsrs	r3, r3, #9
 80017cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80017d0:	3301      	adds	r3, #1
 80017d2:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	ee07 3a90 	vmov	s15, r3
 80017da:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80017de:	edd7 6a07 	vldr	s13, [r7, #28]
 80017e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017ea:	ee17 3a90 	vmov	r3, s15
 80017ee:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80017f0:	e005      	b.n	80017fe <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 80017f2:	2300      	movs	r3, #0
 80017f4:	61bb      	str	r3, [r7, #24]
    break;
 80017f6:	e002      	b.n	80017fe <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 80017f8:	4b06      	ldr	r3, [pc, #24]	; (8001814 <HAL_RCC_GetSysClockFreq+0x2cc>)
 80017fa:	61bb      	str	r3, [r7, #24]
    break;
 80017fc:	bf00      	nop
  }

  return sysclockfreq;
 80017fe:	69bb      	ldr	r3, [r7, #24]
}
 8001800:	4618      	mov	r0, r3
 8001802:	3724      	adds	r7, #36	; 0x24
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr
 800180c:	58024400 	.word	0x58024400
 8001810:	03d09000 	.word	0x03d09000
 8001814:	003d0900 	.word	0x003d0900
 8001818:	007a1200 	.word	0x007a1200
 800181c:	46000000 	.word	0x46000000
 8001820:	4c742400 	.word	0x4c742400
 8001824:	4a742400 	.word	0x4a742400
 8001828:	4af42400 	.word	0x4af42400

0800182c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b086      	sub	sp, #24
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001834:	2300      	movs	r3, #0
 8001836:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001838:	2300      	movs	r3, #0
 800183a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001844:	2b00      	cmp	r3, #0
 8001846:	d03d      	beq.n	80018c4 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800184c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001850:	d013      	beq.n	800187a <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8001852:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001856:	d802      	bhi.n	800185e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8001858:	2b00      	cmp	r3, #0
 800185a:	d007      	beq.n	800186c <HAL_RCCEx_PeriphCLKConfig+0x40>
 800185c:	e01f      	b.n	800189e <HAL_RCCEx_PeriphCLKConfig+0x72>
 800185e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001862:	d013      	beq.n	800188c <HAL_RCCEx_PeriphCLKConfig+0x60>
 8001864:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8001868:	d01c      	beq.n	80018a4 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800186a:	e018      	b.n	800189e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800186c:	4aaf      	ldr	r2, [pc, #700]	; (8001b2c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800186e:	4baf      	ldr	r3, [pc, #700]	; (8001b2c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001872:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001876:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8001878:	e015      	b.n	80018a6 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	3304      	adds	r3, #4
 800187e:	2102      	movs	r1, #2
 8001880:	4618      	mov	r0, r3
 8001882:	f000 fec3 	bl	800260c <RCCEx_PLL2_Config>
 8001886:	4603      	mov	r3, r0
 8001888:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800188a:	e00c      	b.n	80018a6 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	3324      	adds	r3, #36	; 0x24
 8001890:	2102      	movs	r1, #2
 8001892:	4618      	mov	r0, r3
 8001894:	f000 ff6c 	bl	8002770 <RCCEx_PLL3_Config>
 8001898:	4603      	mov	r3, r0
 800189a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800189c:	e003      	b.n	80018a6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	75fb      	strb	r3, [r7, #23]
      break;
 80018a2:	e000      	b.n	80018a6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80018a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80018a6:	7dfb      	ldrb	r3, [r7, #23]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d109      	bne.n	80018c0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80018ac:	499f      	ldr	r1, [pc, #636]	; (8001b2c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80018ae:	4b9f      	ldr	r3, [pc, #636]	; (8001b2c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80018b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018b2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80018ba:	4313      	orrs	r3, r2
 80018bc:	650b      	str	r3, [r1, #80]	; 0x50
 80018be:	e001      	b.n	80018c4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80018c0:	7dfb      	ldrb	r3, [r7, #23]
 80018c2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d03d      	beq.n	800194c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018d4:	2b04      	cmp	r3, #4
 80018d6:	d826      	bhi.n	8001926 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 80018d8:	a201      	add	r2, pc, #4	; (adr r2, 80018e0 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 80018da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018de:	bf00      	nop
 80018e0:	080018f5 	.word	0x080018f5
 80018e4:	08001903 	.word	0x08001903
 80018e8:	08001915 	.word	0x08001915
 80018ec:	0800192d 	.word	0x0800192d
 80018f0:	0800192d 	.word	0x0800192d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80018f4:	4a8d      	ldr	r2, [pc, #564]	; (8001b2c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80018f6:	4b8d      	ldr	r3, [pc, #564]	; (8001b2c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80018f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018fe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8001900:	e015      	b.n	800192e <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	3304      	adds	r3, #4
 8001906:	2100      	movs	r1, #0
 8001908:	4618      	mov	r0, r3
 800190a:	f000 fe7f 	bl	800260c <RCCEx_PLL2_Config>
 800190e:	4603      	mov	r3, r0
 8001910:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8001912:	e00c      	b.n	800192e <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	3324      	adds	r3, #36	; 0x24
 8001918:	2100      	movs	r1, #0
 800191a:	4618      	mov	r0, r3
 800191c:	f000 ff28 	bl	8002770 <RCCEx_PLL3_Config>
 8001920:	4603      	mov	r3, r0
 8001922:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8001924:	e003      	b.n	800192e <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	75fb      	strb	r3, [r7, #23]
      break;
 800192a:	e000      	b.n	800192e <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 800192c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800192e:	7dfb      	ldrb	r3, [r7, #23]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d109      	bne.n	8001948 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001934:	497d      	ldr	r1, [pc, #500]	; (8001b2c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001936:	4b7d      	ldr	r3, [pc, #500]	; (8001b2c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001938:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800193a:	f023 0207 	bic.w	r2, r3, #7
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001942:	4313      	orrs	r3, r2
 8001944:	650b      	str	r3, [r1, #80]	; 0x50
 8001946:	e001      	b.n	800194c <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001948:	7dfb      	ldrb	r3, [r7, #23]
 800194a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001954:	2b00      	cmp	r3, #0
 8001956:	d03e      	beq.n	80019d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800195c:	2b80      	cmp	r3, #128	; 0x80
 800195e:	d01c      	beq.n	800199a <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8001960:	2b80      	cmp	r3, #128	; 0x80
 8001962:	d804      	bhi.n	800196e <HAL_RCCEx_PeriphCLKConfig+0x142>
 8001964:	2b00      	cmp	r3, #0
 8001966:	d008      	beq.n	800197a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8001968:	2b40      	cmp	r3, #64	; 0x40
 800196a:	d00d      	beq.n	8001988 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800196c:	e01e      	b.n	80019ac <HAL_RCCEx_PeriphCLKConfig+0x180>
 800196e:	2bc0      	cmp	r3, #192	; 0xc0
 8001970:	d01f      	beq.n	80019b2 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8001972:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001976:	d01e      	beq.n	80019b6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8001978:	e018      	b.n	80019ac <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800197a:	4a6c      	ldr	r2, [pc, #432]	; (8001b2c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800197c:	4b6b      	ldr	r3, [pc, #428]	; (8001b2c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800197e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001980:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001984:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8001986:	e017      	b.n	80019b8 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	3304      	adds	r3, #4
 800198c:	2100      	movs	r1, #0
 800198e:	4618      	mov	r0, r3
 8001990:	f000 fe3c 	bl	800260c <RCCEx_PLL2_Config>
 8001994:	4603      	mov	r3, r0
 8001996:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8001998:	e00e      	b.n	80019b8 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	3324      	adds	r3, #36	; 0x24
 800199e:	2100      	movs	r1, #0
 80019a0:	4618      	mov	r0, r3
 80019a2:	f000 fee5 	bl	8002770 <RCCEx_PLL3_Config>
 80019a6:	4603      	mov	r3, r0
 80019a8:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80019aa:	e005      	b.n	80019b8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80019ac:	2301      	movs	r3, #1
 80019ae:	75fb      	strb	r3, [r7, #23]
      break;
 80019b0:	e002      	b.n	80019b8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 80019b2:	bf00      	nop
 80019b4:	e000      	b.n	80019b8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 80019b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80019b8:	7dfb      	ldrb	r3, [r7, #23]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d109      	bne.n	80019d2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80019be:	495b      	ldr	r1, [pc, #364]	; (8001b2c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80019c0:	4b5a      	ldr	r3, [pc, #360]	; (8001b2c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80019c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019c4:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019cc:	4313      	orrs	r3, r2
 80019ce:	650b      	str	r3, [r1, #80]	; 0x50
 80019d0:	e001      	b.n	80019d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80019d2:	7dfb      	ldrb	r3, [r7, #23]
 80019d4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d044      	beq.n	8001a6c <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80019e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80019ec:	d01f      	beq.n	8001a2e <HAL_RCCEx_PeriphCLKConfig+0x202>
 80019ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80019f2:	d805      	bhi.n	8001a00 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d00a      	beq.n	8001a0e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80019f8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80019fc:	d00e      	beq.n	8001a1c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 80019fe:	e01f      	b.n	8001a40 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8001a00:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8001a04:	d01f      	beq.n	8001a46 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8001a06:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001a0a:	d01e      	beq.n	8001a4a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8001a0c:	e018      	b.n	8001a40 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001a0e:	4a47      	ldr	r2, [pc, #284]	; (8001b2c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001a10:	4b46      	ldr	r3, [pc, #280]	; (8001b2c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a18:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8001a1a:	e017      	b.n	8001a4c <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	3304      	adds	r3, #4
 8001a20:	2100      	movs	r1, #0
 8001a22:	4618      	mov	r0, r3
 8001a24:	f000 fdf2 	bl	800260c <RCCEx_PLL2_Config>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8001a2c:	e00e      	b.n	8001a4c <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	3324      	adds	r3, #36	; 0x24
 8001a32:	2100      	movs	r1, #0
 8001a34:	4618      	mov	r0, r3
 8001a36:	f000 fe9b 	bl	8002770 <RCCEx_PLL3_Config>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8001a3e:	e005      	b.n	8001a4c <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	75fb      	strb	r3, [r7, #23]
      break;
 8001a44:	e002      	b.n	8001a4c <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8001a46:	bf00      	nop
 8001a48:	e000      	b.n	8001a4c <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8001a4a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001a4c:	7dfb      	ldrb	r3, [r7, #23]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d10a      	bne.n	8001a68 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8001a52:	4936      	ldr	r1, [pc, #216]	; (8001b2c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001a54:	4b35      	ldr	r3, [pc, #212]	; (8001b2c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001a56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a58:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001a62:	4313      	orrs	r3, r2
 8001a64:	658b      	str	r3, [r1, #88]	; 0x58
 8001a66:	e001      	b.n	8001a6c <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001a68:	7dfb      	ldrb	r3, [r7, #23]
 8001a6a:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d044      	beq.n	8001b02 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8001a7e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001a82:	d01f      	beq.n	8001ac4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8001a84:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001a88:	d805      	bhi.n	8001a96 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d00a      	beq.n	8001aa4 <HAL_RCCEx_PeriphCLKConfig+0x278>
 8001a8e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a92:	d00e      	beq.n	8001ab2 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8001a94:	e01f      	b.n	8001ad6 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8001a96:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001a9a:	d01f      	beq.n	8001adc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8001a9c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001aa0:	d01e      	beq.n	8001ae0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8001aa2:	e018      	b.n	8001ad6 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001aa4:	4a21      	ldr	r2, [pc, #132]	; (8001b2c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001aa6:	4b21      	ldr	r3, [pc, #132]	; (8001b2c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aaa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001aae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8001ab0:	e017      	b.n	8001ae2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	3304      	adds	r3, #4
 8001ab6:	2100      	movs	r1, #0
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f000 fda7 	bl	800260c <RCCEx_PLL2_Config>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8001ac2:	e00e      	b.n	8001ae2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	3324      	adds	r3, #36	; 0x24
 8001ac8:	2100      	movs	r1, #0
 8001aca:	4618      	mov	r0, r3
 8001acc:	f000 fe50 	bl	8002770 <RCCEx_PLL3_Config>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8001ad4:	e005      	b.n	8001ae2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	75fb      	strb	r3, [r7, #23]
      break;
 8001ada:	e002      	b.n	8001ae2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8001adc:	bf00      	nop
 8001ade:	e000      	b.n	8001ae2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8001ae0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001ae2:	7dfb      	ldrb	r3, [r7, #23]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d10a      	bne.n	8001afe <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8001ae8:	4910      	ldr	r1, [pc, #64]	; (8001b2c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001aea:	4b10      	ldr	r3, [pc, #64]	; (8001b2c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001aec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aee:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8001af8:	4313      	orrs	r3, r2
 8001afa:	658b      	str	r3, [r1, #88]	; 0x58
 8001afc:	e001      	b.n	8001b02 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001afe:	7dfb      	ldrb	r3, [r7, #23]
 8001b00:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d035      	beq.n	8001b7a <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b12:	2b10      	cmp	r3, #16
 8001b14:	d00c      	beq.n	8001b30 <HAL_RCCEx_PeriphCLKConfig+0x304>
 8001b16:	2b10      	cmp	r3, #16
 8001b18:	d802      	bhi.n	8001b20 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d01b      	beq.n	8001b56 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8001b1e:	e017      	b.n	8001b50 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8001b20:	2b20      	cmp	r3, #32
 8001b22:	d00c      	beq.n	8001b3e <HAL_RCCEx_PeriphCLKConfig+0x312>
 8001b24:	2b30      	cmp	r3, #48	; 0x30
 8001b26:	d018      	beq.n	8001b5a <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8001b28:	e012      	b.n	8001b50 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8001b2a:	bf00      	nop
 8001b2c:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001b30:	4aaf      	ldr	r2, [pc, #700]	; (8001df0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8001b32:	4baf      	ldr	r3, [pc, #700]	; (8001df0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8001b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b3a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8001b3c:	e00e      	b.n	8001b5c <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	3304      	adds	r3, #4
 8001b42:	2102      	movs	r1, #2
 8001b44:	4618      	mov	r0, r3
 8001b46:	f000 fd61 	bl	800260c <RCCEx_PLL2_Config>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8001b4e:	e005      	b.n	8001b5c <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8001b50:	2301      	movs	r3, #1
 8001b52:	75fb      	strb	r3, [r7, #23]
      break;
 8001b54:	e002      	b.n	8001b5c <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8001b56:	bf00      	nop
 8001b58:	e000      	b.n	8001b5c <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8001b5a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001b5c:	7dfb      	ldrb	r3, [r7, #23]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d109      	bne.n	8001b76 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8001b62:	49a3      	ldr	r1, [pc, #652]	; (8001df0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8001b64:	4ba2      	ldr	r3, [pc, #648]	; (8001df0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8001b66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b68:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b70:	4313      	orrs	r3, r2
 8001b72:	64cb      	str	r3, [r1, #76]	; 0x4c
 8001b74:	e001      	b.n	8001b7a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001b76:	7dfb      	ldrb	r3, [r7, #23]
 8001b78:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d042      	beq.n	8001c0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b8e:	d01f      	beq.n	8001bd0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8001b90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b94:	d805      	bhi.n	8001ba2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d00a      	beq.n	8001bb0 <HAL_RCCEx_PeriphCLKConfig+0x384>
 8001b9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b9e:	d00e      	beq.n	8001bbe <HAL_RCCEx_PeriphCLKConfig+0x392>
 8001ba0:	e01f      	b.n	8001be2 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8001ba2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8001ba6:	d01f      	beq.n	8001be8 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8001ba8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001bac:	d01e      	beq.n	8001bec <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8001bae:	e018      	b.n	8001be2 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001bb0:	4a8f      	ldr	r2, [pc, #572]	; (8001df0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8001bb2:	4b8f      	ldr	r3, [pc, #572]	; (8001df0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8001bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8001bbc:	e017      	b.n	8001bee <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	3304      	adds	r3, #4
 8001bc2:	2100      	movs	r1, #0
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f000 fd21 	bl	800260c <RCCEx_PLL2_Config>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8001bce:	e00e      	b.n	8001bee <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	3324      	adds	r3, #36	; 0x24
 8001bd4:	2100      	movs	r1, #0
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f000 fdca 	bl	8002770 <RCCEx_PLL3_Config>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8001be0:	e005      	b.n	8001bee <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	75fb      	strb	r3, [r7, #23]
      break;
 8001be6:	e002      	b.n	8001bee <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8001be8:	bf00      	nop
 8001bea:	e000      	b.n	8001bee <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8001bec:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001bee:	7dfb      	ldrb	r3, [r7, #23]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d109      	bne.n	8001c08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8001bf4:	497e      	ldr	r1, [pc, #504]	; (8001df0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8001bf6:	4b7e      	ldr	r3, [pc, #504]	; (8001df0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8001bf8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001bfa:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c02:	4313      	orrs	r3, r2
 8001c04:	650b      	str	r3, [r1, #80]	; 0x50
 8001c06:	e001      	b.n	8001c0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001c08:	7dfb      	ldrb	r3, [r7, #23]
 8001c0a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d042      	beq.n	8001c9e <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c1c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001c20:	d01b      	beq.n	8001c5a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8001c22:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001c26:	d805      	bhi.n	8001c34 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d022      	beq.n	8001c72 <HAL_RCCEx_PeriphCLKConfig+0x446>
 8001c2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c30:	d00a      	beq.n	8001c48 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8001c32:	e01b      	b.n	8001c6c <HAL_RCCEx_PeriphCLKConfig+0x440>
 8001c34:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001c38:	d01d      	beq.n	8001c76 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8001c3a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c3e:	d01c      	beq.n	8001c7a <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8001c40:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001c44:	d01b      	beq.n	8001c7e <HAL_RCCEx_PeriphCLKConfig+0x452>
 8001c46:	e011      	b.n	8001c6c <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	3304      	adds	r3, #4
 8001c4c:	2101      	movs	r1, #1
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f000 fcdc 	bl	800260c <RCCEx_PLL2_Config>
 8001c54:	4603      	mov	r3, r0
 8001c56:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8001c58:	e012      	b.n	8001c80 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	3324      	adds	r3, #36	; 0x24
 8001c5e:	2101      	movs	r1, #1
 8001c60:	4618      	mov	r0, r3
 8001c62:	f000 fd85 	bl	8002770 <RCCEx_PLL3_Config>
 8001c66:	4603      	mov	r3, r0
 8001c68:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8001c6a:	e009      	b.n	8001c80 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	75fb      	strb	r3, [r7, #23]
      break;
 8001c70:	e006      	b.n	8001c80 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8001c72:	bf00      	nop
 8001c74:	e004      	b.n	8001c80 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8001c76:	bf00      	nop
 8001c78:	e002      	b.n	8001c80 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8001c7a:	bf00      	nop
 8001c7c:	e000      	b.n	8001c80 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8001c7e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001c80:	7dfb      	ldrb	r3, [r7, #23]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d109      	bne.n	8001c9a <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8001c86:	495a      	ldr	r1, [pc, #360]	; (8001df0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8001c88:	4b59      	ldr	r3, [pc, #356]	; (8001df0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8001c8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c8c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c94:	4313      	orrs	r3, r2
 8001c96:	650b      	str	r3, [r1, #80]	; 0x50
 8001c98:	e001      	b.n	8001c9e <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001c9a:	7dfb      	ldrb	r3, [r7, #23]
 8001c9c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d044      	beq.n	8001d34 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8001cb0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001cb4:	d01b      	beq.n	8001cee <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8001cb6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001cba:	d805      	bhi.n	8001cc8 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d022      	beq.n	8001d06 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8001cc0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001cc4:	d00a      	beq.n	8001cdc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8001cc6:	e01b      	b.n	8001d00 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8001cc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ccc:	d01d      	beq.n	8001d0a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8001cce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001cd2:	d01c      	beq.n	8001d0e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8001cd4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8001cd8:	d01b      	beq.n	8001d12 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8001cda:	e011      	b.n	8001d00 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	3304      	adds	r3, #4
 8001ce0:	2101      	movs	r1, #1
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f000 fc92 	bl	800260c <RCCEx_PLL2_Config>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8001cec:	e012      	b.n	8001d14 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	3324      	adds	r3, #36	; 0x24
 8001cf2:	2101      	movs	r1, #1
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f000 fd3b 	bl	8002770 <RCCEx_PLL3_Config>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8001cfe:	e009      	b.n	8001d14 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* HSE,  oscillator is used as source of SPI6 clock */
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	75fb      	strb	r3, [r7, #23]
      break;
 8001d04:	e006      	b.n	8001d14 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8001d06:	bf00      	nop
 8001d08:	e004      	b.n	8001d14 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8001d0a:	bf00      	nop
 8001d0c:	e002      	b.n	8001d14 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8001d0e:	bf00      	nop
 8001d10:	e000      	b.n	8001d14 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8001d12:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001d14:	7dfb      	ldrb	r3, [r7, #23]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d10a      	bne.n	8001d30 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8001d1a:	4935      	ldr	r1, [pc, #212]	; (8001df0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8001d1c:	4b34      	ldr	r3, [pc, #208]	; (8001df0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8001d1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d20:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	658b      	str	r3, [r1, #88]	; 0x58
 8001d2e:	e001      	b.n	8001d34 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001d30:	7dfb      	ldrb	r3, [r7, #23]
 8001d32:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d02d      	beq.n	8001d9c <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d44:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001d48:	d005      	beq.n	8001d56 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8001d4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001d4e:	d009      	beq.n	8001d64 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d013      	beq.n	8001d7c <HAL_RCCEx_PeriphCLKConfig+0x550>
 8001d54:	e00f      	b.n	8001d76 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001d56:	4a26      	ldr	r2, [pc, #152]	; (8001df0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8001d58:	4b25      	ldr	r3, [pc, #148]	; (8001df0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8001d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d60:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8001d62:	e00c      	b.n	8001d7e <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	3304      	adds	r3, #4
 8001d68:	2101      	movs	r1, #1
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f000 fc4e 	bl	800260c <RCCEx_PLL2_Config>
 8001d70:	4603      	mov	r3, r0
 8001d72:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8001d74:	e003      	b.n	8001d7e <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	75fb      	strb	r3, [r7, #23]
      break;
 8001d7a:	e000      	b.n	8001d7e <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8001d7c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001d7e:	7dfb      	ldrb	r3, [r7, #23]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d109      	bne.n	8001d98 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8001d84:	491a      	ldr	r1, [pc, #104]	; (8001df0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8001d86:	4b1a      	ldr	r3, [pc, #104]	; (8001df0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8001d88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d8a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d92:	4313      	orrs	r3, r2
 8001d94:	650b      	str	r3, [r1, #80]	; 0x50
 8001d96:	e001      	b.n	8001d9c <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001d98:	7dfb      	ldrb	r3, [r7, #23]
 8001d9a:	75bb      	strb	r3, [r7, #22]
    }
  }

#endif /*FDCAN1 || FDCAN2*/
  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d035      	beq.n	8001e14 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dac:	2b03      	cmp	r3, #3
 8001dae:	d81b      	bhi.n	8001de8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8001db0:	a201      	add	r2, pc, #4	; (adr r2, 8001db8 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8001db2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001db6:	bf00      	nop
 8001db8:	08001df5 	.word	0x08001df5
 8001dbc:	08001dc9 	.word	0x08001dc9
 8001dc0:	08001dd7 	.word	0x08001dd7
 8001dc4:	08001df5 	.word	0x08001df5
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001dc8:	4a09      	ldr	r2, [pc, #36]	; (8001df0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8001dca:	4b09      	ldr	r3, [pc, #36]	; (8001df0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8001dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dd2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8001dd4:	e00f      	b.n	8001df6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	3304      	adds	r3, #4
 8001dda:	2102      	movs	r1, #2
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f000 fc15 	bl	800260c <RCCEx_PLL2_Config>
 8001de2:	4603      	mov	r3, r0
 8001de4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8001de6:	e006      	b.n	8001df6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	75fb      	strb	r3, [r7, #23]
      break;
 8001dec:	e003      	b.n	8001df6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8001dee:	bf00      	nop
 8001df0:	58024400 	.word	0x58024400
      break;
 8001df4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001df6:	7dfb      	ldrb	r3, [r7, #23]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d109      	bne.n	8001e10 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8001dfc:	49ba      	ldr	r1, [pc, #744]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8001dfe:	4bba      	ldr	r3, [pc, #744]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8001e00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e02:	f023 0203 	bic.w	r2, r3, #3
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	64cb      	str	r3, [r1, #76]	; 0x4c
 8001e0e:	e001      	b.n	8001e14 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001e10:	7dfb      	ldrb	r3, [r7, #23]
 8001e12:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	f000 8086 	beq.w	8001f2e <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e22:	4ab2      	ldr	r2, [pc, #712]	; (80020ec <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8001e24:	4bb1      	ldr	r3, [pc, #708]	; (80020ec <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e2c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001e2e:	f7fe fad5 	bl	80003dc <HAL_GetTick>
 8001e32:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001e34:	e009      	b.n	8001e4a <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e36:	f7fe fad1 	bl	80003dc <HAL_GetTick>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	1ad3      	subs	r3, r2, r3
 8001e40:	2b64      	cmp	r3, #100	; 0x64
 8001e42:	d902      	bls.n	8001e4a <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8001e44:	2303      	movs	r3, #3
 8001e46:	75fb      	strb	r3, [r7, #23]
        break;
 8001e48:	e005      	b.n	8001e56 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001e4a:	4ba8      	ldr	r3, [pc, #672]	; (80020ec <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d0ef      	beq.n	8001e36 <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 8001e56:	7dfb      	ldrb	r3, [r7, #23]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d166      	bne.n	8001f2a <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8001e5c:	4ba2      	ldr	r3, [pc, #648]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8001e5e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001e66:	4053      	eors	r3, r2
 8001e68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d013      	beq.n	8001e98 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001e70:	4b9d      	ldr	r3, [pc, #628]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8001e72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e78:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001e7a:	4a9b      	ldr	r2, [pc, #620]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8001e7c:	4b9a      	ldr	r3, [pc, #616]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8001e7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e84:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001e86:	4a98      	ldr	r2, [pc, #608]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8001e88:	4b97      	ldr	r3, [pc, #604]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8001e8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e90:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8001e92:	4a95      	ldr	r2, [pc, #596]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source, wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001e9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ea2:	d115      	bne.n	8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ea4:	f7fe fa9a 	bl	80003dc <HAL_GetTick>
 8001ea8:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001eaa:	e00b      	b.n	8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eac:	f7fe fa96 	bl	80003dc <HAL_GetTick>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d902      	bls.n	8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	75fb      	strb	r3, [r7, #23]
            break;
 8001ec2:	e005      	b.n	8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001ec4:	4b88      	ldr	r3, [pc, #544]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8001ec6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ec8:	f003 0302 	and.w	r3, r3, #2
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d0ed      	beq.n	8001eac <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8001ed0:	7dfb      	ldrb	r3, [r7, #23]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d126      	bne.n	8001f24 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001edc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ee0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001ee4:	d10d      	bne.n	8001f02 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8001ee6:	4880      	ldr	r0, [pc, #512]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8001ee8:	4b7f      	ldr	r3, [pc, #508]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8001eea:	691b      	ldr	r3, [r3, #16]
 8001eec:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001ef6:	0919      	lsrs	r1, r3, #4
 8001ef8:	4b7d      	ldr	r3, [pc, #500]	; (80020f0 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8001efa:	400b      	ands	r3, r1
 8001efc:	4313      	orrs	r3, r2
 8001efe:	6103      	str	r3, [r0, #16]
 8001f00:	e005      	b.n	8001f0e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8001f02:	4a79      	ldr	r2, [pc, #484]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8001f04:	4b78      	ldr	r3, [pc, #480]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8001f06:	691b      	ldr	r3, [r3, #16]
 8001f08:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001f0c:	6113      	str	r3, [r2, #16]
 8001f0e:	4976      	ldr	r1, [pc, #472]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8001f10:	4b75      	ldr	r3, [pc, #468]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8001f12:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001f1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	670b      	str	r3, [r1, #112]	; 0x70
 8001f22:	e004      	b.n	8001f2e <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001f24:	7dfb      	ldrb	r3, [r7, #23]
 8001f26:	75bb      	strb	r3, [r7, #22]
 8001f28:	e001      	b.n	8001f2e <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f2a:	7dfb      	ldrb	r3, [r7, #23]
 8001f2c:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 0301 	and.w	r3, r3, #1
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d07d      	beq.n	8002036 <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001f3e:	2b28      	cmp	r3, #40	; 0x28
 8001f40:	d866      	bhi.n	8002010 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8001f42:	a201      	add	r2, pc, #4	; (adr r2, 8001f48 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8001f44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f48:	08002017 	.word	0x08002017
 8001f4c:	08002011 	.word	0x08002011
 8001f50:	08002011 	.word	0x08002011
 8001f54:	08002011 	.word	0x08002011
 8001f58:	08002011 	.word	0x08002011
 8001f5c:	08002011 	.word	0x08002011
 8001f60:	08002011 	.word	0x08002011
 8001f64:	08002011 	.word	0x08002011
 8001f68:	08001fed 	.word	0x08001fed
 8001f6c:	08002011 	.word	0x08002011
 8001f70:	08002011 	.word	0x08002011
 8001f74:	08002011 	.word	0x08002011
 8001f78:	08002011 	.word	0x08002011
 8001f7c:	08002011 	.word	0x08002011
 8001f80:	08002011 	.word	0x08002011
 8001f84:	08002011 	.word	0x08002011
 8001f88:	08001fff 	.word	0x08001fff
 8001f8c:	08002011 	.word	0x08002011
 8001f90:	08002011 	.word	0x08002011
 8001f94:	08002011 	.word	0x08002011
 8001f98:	08002011 	.word	0x08002011
 8001f9c:	08002011 	.word	0x08002011
 8001fa0:	08002011 	.word	0x08002011
 8001fa4:	08002011 	.word	0x08002011
 8001fa8:	08002017 	.word	0x08002017
 8001fac:	08002011 	.word	0x08002011
 8001fb0:	08002011 	.word	0x08002011
 8001fb4:	08002011 	.word	0x08002011
 8001fb8:	08002011 	.word	0x08002011
 8001fbc:	08002011 	.word	0x08002011
 8001fc0:	08002011 	.word	0x08002011
 8001fc4:	08002011 	.word	0x08002011
 8001fc8:	08002017 	.word	0x08002017
 8001fcc:	08002011 	.word	0x08002011
 8001fd0:	08002011 	.word	0x08002011
 8001fd4:	08002011 	.word	0x08002011
 8001fd8:	08002011 	.word	0x08002011
 8001fdc:	08002011 	.word	0x08002011
 8001fe0:	08002011 	.word	0x08002011
 8001fe4:	08002011 	.word	0x08002011
 8001fe8:	08002017 	.word	0x08002017
    case RCC_USART16CLKSOURCE_D2PCLK2: /* D2PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	3304      	adds	r3, #4
 8001ff0:	2101      	movs	r1, #1
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f000 fb0a 	bl	800260c <RCCEx_PLL2_Config>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8001ffc:	e00c      	b.n	8002018 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	3324      	adds	r3, #36	; 0x24
 8002002:	2101      	movs	r1, #1
 8002004:	4618      	mov	r0, r3
 8002006:	f000 fbb3 	bl	8002770 <RCCEx_PLL3_Config>
 800200a:	4603      	mov	r3, r0
 800200c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800200e:	e003      	b.n	8002018 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002010:	2301      	movs	r3, #1
 8002012:	75fb      	strb	r3, [r7, #23]
      break;
 8002014:	e000      	b.n	8002018 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8002016:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002018:	7dfb      	ldrb	r3, [r7, #23]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d109      	bne.n	8002032 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800201e:	4932      	ldr	r1, [pc, #200]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002020:	4b31      	ldr	r3, [pc, #196]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002022:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002024:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800202c:	4313      	orrs	r3, r2
 800202e:	654b      	str	r3, [r1, #84]	; 0x54
 8002030:	e001      	b.n	8002036 <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002032:	7dfb      	ldrb	r3, [r7, #23]
 8002034:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 0302 	and.w	r3, r3, #2
 800203e:	2b00      	cmp	r3, #0
 8002040:	d037      	beq.n	80020b2 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002046:	2b05      	cmp	r3, #5
 8002048:	d820      	bhi.n	800208c <HAL_RCCEx_PeriphCLKConfig+0x860>
 800204a:	a201      	add	r2, pc, #4	; (adr r2, 8002050 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 800204c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002050:	08002093 	.word	0x08002093
 8002054:	08002069 	.word	0x08002069
 8002058:	0800207b 	.word	0x0800207b
 800205c:	08002093 	.word	0x08002093
 8002060:	08002093 	.word	0x08002093
 8002064:	08002093 	.word	0x08002093
    case RCC_USART234578CLKSOURCE_D2PCLK1: /* D2PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	3304      	adds	r3, #4
 800206c:	2101      	movs	r1, #1
 800206e:	4618      	mov	r0, r3
 8002070:	f000 facc 	bl	800260c <RCCEx_PLL2_Config>
 8002074:	4603      	mov	r3, r0
 8002076:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002078:	e00c      	b.n	8002094 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	3324      	adds	r3, #36	; 0x24
 800207e:	2101      	movs	r1, #1
 8002080:	4618      	mov	r0, r3
 8002082:	f000 fb75 	bl	8002770 <RCCEx_PLL3_Config>
 8002086:	4603      	mov	r3, r0
 8002088:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800208a:	e003      	b.n	8002094 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	75fb      	strb	r3, [r7, #23]
      break;
 8002090:	e000      	b.n	8002094 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 8002092:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002094:	7dfb      	ldrb	r3, [r7, #23]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d109      	bne.n	80020ae <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800209a:	4913      	ldr	r1, [pc, #76]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800209c:	4b12      	ldr	r3, [pc, #72]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800209e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020a0:	f023 0207 	bic.w	r2, r3, #7
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020a8:	4313      	orrs	r3, r2
 80020aa:	654b      	str	r3, [r1, #84]	; 0x54
 80020ac:	e001      	b.n	80020b2 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80020ae:	7dfb      	ldrb	r3, [r7, #23]
 80020b0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 0304 	and.w	r3, r3, #4
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d040      	beq.n	8002140 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020c4:	2b05      	cmp	r3, #5
 80020c6:	d827      	bhi.n	8002118 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 80020c8:	a201      	add	r2, pc, #4	; (adr r2, 80020d0 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 80020ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020ce:	bf00      	nop
 80020d0:	0800211f 	.word	0x0800211f
 80020d4:	080020f5 	.word	0x080020f5
 80020d8:	08002107 	.word	0x08002107
 80020dc:	0800211f 	.word	0x0800211f
 80020e0:	0800211f 	.word	0x0800211f
 80020e4:	0800211f 	.word	0x0800211f
 80020e8:	58024400 	.word	0x58024400
 80020ec:	58024800 	.word	0x58024800
 80020f0:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_D3PCLK1: /* D3PCLK1 as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	3304      	adds	r3, #4
 80020f8:	2101      	movs	r1, #1
 80020fa:	4618      	mov	r0, r3
 80020fc:	f000 fa86 	bl	800260c <RCCEx_PLL2_Config>
 8002100:	4603      	mov	r3, r0
 8002102:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8002104:	e00c      	b.n	8002120 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	3324      	adds	r3, #36	; 0x24
 800210a:	2101      	movs	r1, #1
 800210c:	4618      	mov	r0, r3
 800210e:	f000 fb2f 	bl	8002770 <RCCEx_PLL3_Config>
 8002112:	4603      	mov	r3, r0
 8002114:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8002116:	e003      	b.n	8002120 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	75fb      	strb	r3, [r7, #23]
      break;
 800211c:	e000      	b.n	8002120 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 800211e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002120:	7dfb      	ldrb	r3, [r7, #23]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d10a      	bne.n	800213c <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002126:	49b3      	ldr	r1, [pc, #716]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8002128:	4bb2      	ldr	r3, [pc, #712]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 800212a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800212c:	f023 0207 	bic.w	r2, r3, #7
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002136:	4313      	orrs	r3, r2
 8002138:	658b      	str	r3, [r1, #88]	; 0x58
 800213a:	e001      	b.n	8002140 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800213c:	7dfb      	ldrb	r3, [r7, #23]
 800213e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f003 0320 	and.w	r3, r3, #32
 8002148:	2b00      	cmp	r3, #0
 800214a:	d044      	beq.n	80021d6 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002152:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002156:	d01b      	beq.n	8002190 <HAL_RCCEx_PeriphCLKConfig+0x964>
 8002158:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800215c:	d805      	bhi.n	800216a <HAL_RCCEx_PeriphCLKConfig+0x93e>
 800215e:	2b00      	cmp	r3, #0
 8002160:	d022      	beq.n	80021a8 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8002162:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002166:	d00a      	beq.n	800217e <HAL_RCCEx_PeriphCLKConfig+0x952>
 8002168:	e01b      	b.n	80021a2 <HAL_RCCEx_PeriphCLKConfig+0x976>
 800216a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800216e:	d01d      	beq.n	80021ac <HAL_RCCEx_PeriphCLKConfig+0x980>
 8002170:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002174:	d01c      	beq.n	80021b0 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8002176:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800217a:	d01b      	beq.n	80021b4 <HAL_RCCEx_PeriphCLKConfig+0x988>
 800217c:	e011      	b.n	80021a2 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	3304      	adds	r3, #4
 8002182:	2100      	movs	r1, #0
 8002184:	4618      	mov	r0, r3
 8002186:	f000 fa41 	bl	800260c <RCCEx_PLL2_Config>
 800218a:	4603      	mov	r3, r0
 800218c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800218e:	e012      	b.n	80021b6 <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	3324      	adds	r3, #36	; 0x24
 8002194:	2102      	movs	r1, #2
 8002196:	4618      	mov	r0, r3
 8002198:	f000 faea 	bl	8002770 <RCCEx_PLL3_Config>
 800219c:	4603      	mov	r3, r0
 800219e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80021a0:	e009      	b.n	80021b6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	75fb      	strb	r3, [r7, #23]
      break;
 80021a6:	e006      	b.n	80021b6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80021a8:	bf00      	nop
 80021aa:	e004      	b.n	80021b6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80021ac:	bf00      	nop
 80021ae:	e002      	b.n	80021b6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80021b0:	bf00      	nop
 80021b2:	e000      	b.n	80021b6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80021b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80021b6:	7dfb      	ldrb	r3, [r7, #23]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d10a      	bne.n	80021d2 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80021bc:	498d      	ldr	r1, [pc, #564]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80021be:	4b8d      	ldr	r3, [pc, #564]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80021c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021c2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80021cc:	4313      	orrs	r3, r2
 80021ce:	654b      	str	r3, [r1, #84]	; 0x54
 80021d0:	e001      	b.n	80021d6 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021d2:	7dfb      	ldrb	r3, [r7, #23]
 80021d4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d044      	beq.n	800226c <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80021e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80021ec:	d01b      	beq.n	8002226 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 80021ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80021f2:	d805      	bhi.n	8002200 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d022      	beq.n	800223e <HAL_RCCEx_PeriphCLKConfig+0xa12>
 80021f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021fc:	d00a      	beq.n	8002214 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 80021fe:	e01b      	b.n	8002238 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8002200:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002204:	d01d      	beq.n	8002242 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8002206:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800220a:	d01c      	beq.n	8002246 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 800220c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002210:	d01b      	beq.n	800224a <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8002212:	e011      	b.n	8002238 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	3304      	adds	r3, #4
 8002218:	2100      	movs	r1, #0
 800221a:	4618      	mov	r0, r3
 800221c:	f000 f9f6 	bl	800260c <RCCEx_PLL2_Config>
 8002220:	4603      	mov	r3, r0
 8002222:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8002224:	e012      	b.n	800224c <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	3324      	adds	r3, #36	; 0x24
 800222a:	2102      	movs	r1, #2
 800222c:	4618      	mov	r0, r3
 800222e:	f000 fa9f 	bl	8002770 <RCCEx_PLL3_Config>
 8002232:	4603      	mov	r3, r0
 8002234:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8002236:	e009      	b.n	800224c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	75fb      	strb	r3, [r7, #23]
      break;
 800223c:	e006      	b.n	800224c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800223e:	bf00      	nop
 8002240:	e004      	b.n	800224c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8002242:	bf00      	nop
 8002244:	e002      	b.n	800224c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8002246:	bf00      	nop
 8002248:	e000      	b.n	800224c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800224a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800224c:	7dfb      	ldrb	r3, [r7, #23]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d10a      	bne.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002252:	4968      	ldr	r1, [pc, #416]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8002254:	4b67      	ldr	r3, [pc, #412]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8002256:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002258:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002262:	4313      	orrs	r3, r2
 8002264:	658b      	str	r3, [r1, #88]	; 0x58
 8002266:	e001      	b.n	800226c <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002268:	7dfb      	ldrb	r3, [r7, #23]
 800226a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002274:	2b00      	cmp	r3, #0
 8002276:	d044      	beq.n	8002302 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800227e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002282:	d01b      	beq.n	80022bc <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8002284:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002288:	d805      	bhi.n	8002296 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 800228a:	2b00      	cmp	r3, #0
 800228c:	d022      	beq.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800228e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002292:	d00a      	beq.n	80022aa <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8002294:	e01b      	b.n	80022ce <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 8002296:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800229a:	d01d      	beq.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 800229c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80022a0:	d01c      	beq.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0xab0>
 80022a2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80022a6:	d01b      	beq.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 80022a8:	e011      	b.n	80022ce <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_D3PCLK1:      /* D3PCLK1 as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	3304      	adds	r3, #4
 80022ae:	2100      	movs	r1, #0
 80022b0:	4618      	mov	r0, r3
 80022b2:	f000 f9ab 	bl	800260c <RCCEx_PLL2_Config>
 80022b6:	4603      	mov	r3, r0
 80022b8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80022ba:	e012      	b.n	80022e2 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	3324      	adds	r3, #36	; 0x24
 80022c0:	2102      	movs	r1, #2
 80022c2:	4618      	mov	r0, r3
 80022c4:	f000 fa54 	bl	8002770 <RCCEx_PLL3_Config>
 80022c8:	4603      	mov	r3, r0
 80022ca:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80022cc:	e009      	b.n	80022e2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	75fb      	strb	r3, [r7, #23]
      break;
 80022d2:	e006      	b.n	80022e2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80022d4:	bf00      	nop
 80022d6:	e004      	b.n	80022e2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80022d8:	bf00      	nop
 80022da:	e002      	b.n	80022e2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80022dc:	bf00      	nop
 80022de:	e000      	b.n	80022e2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80022e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80022e2:	7dfb      	ldrb	r3, [r7, #23]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d10a      	bne.n	80022fe <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80022e8:	4942      	ldr	r1, [pc, #264]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80022ea:	4b42      	ldr	r3, [pc, #264]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80022ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80022f8:	4313      	orrs	r3, r2
 80022fa:	658b      	str	r3, [r1, #88]	; 0x58
 80022fc:	e001      	b.n	8002302 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022fe:	7dfb      	ldrb	r3, [r7, #23]
 8002300:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 0308 	and.w	r3, r3, #8
 800230a:	2b00      	cmp	r3, #0
 800230c:	d01b      	beq.n	8002346 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002314:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002318:	d10b      	bne.n	8002332 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	3324      	adds	r3, #36	; 0x24
 800231e:	2102      	movs	r1, #2
 8002320:	4618      	mov	r0, r3
 8002322:	f000 fa25 	bl	8002770 <RCCEx_PLL3_Config>
 8002326:	4603      	mov	r3, r0
 8002328:	2b00      	cmp	r3, #0
 800232a:	d00c      	beq.n	8002346 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
        {
          status = HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	75bb      	strb	r3, [r7, #22]
 8002330:	e009      	b.n	8002346 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
        }
    }

    else
    {
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8002332:	4930      	ldr	r1, [pc, #192]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8002334:	4b2f      	ldr	r3, [pc, #188]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8002336:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002338:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002342:	4313      	orrs	r3, r2
 8002344:	654b      	str	r3, [r1, #84]	; 0x54
    }

  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f003 0310 	and.w	r3, r3, #16
 800234e:	2b00      	cmp	r3, #0
 8002350:	d01b      	beq.n	800238a <HAL_RCCEx_PeriphCLKConfig+0xb5e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002358:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800235c:	d10b      	bne.n	8002376 <HAL_RCCEx_PeriphCLKConfig+0xb4a>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	3324      	adds	r3, #36	; 0x24
 8002362:	2102      	movs	r1, #2
 8002364:	4618      	mov	r0, r3
 8002366:	f000 fa03 	bl	8002770 <RCCEx_PLL3_Config>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d00c      	beq.n	800238a <HAL_RCCEx_PeriphCLKConfig+0xb5e>
      {
        status = HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	75bb      	strb	r3, [r7, #22]
 8002374:	e009      	b.n	800238a <HAL_RCCEx_PeriphCLKConfig+0xb5e>
      }
    }

    else
    {
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002376:	491f      	ldr	r1, [pc, #124]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8002378:	4b1e      	ldr	r3, [pc, #120]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 800237a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800237c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002386:	4313      	orrs	r3, r2
 8002388:	658b      	str	r3, [r1, #88]	; 0x58
    }
  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002392:	2b00      	cmp	r3, #0
 8002394:	d032      	beq.n	80023fc <HAL_RCCEx_PeriphCLKConfig+0xbd0>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800239c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023a0:	d00d      	beq.n	80023be <HAL_RCCEx_PeriphCLKConfig+0xb92>
 80023a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80023a6:	d016      	beq.n	80023d6 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d111      	bne.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0xba4>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	3304      	adds	r3, #4
 80023b0:	2100      	movs	r1, #0
 80023b2:	4618      	mov	r0, r3
 80023b4:	f000 f92a 	bl	800260c <RCCEx_PLL2_Config>
 80023b8:	4603      	mov	r3, r0
 80023ba:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80023bc:	e00c      	b.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0xbac>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	3324      	adds	r3, #36	; 0x24
 80023c2:	2102      	movs	r1, #2
 80023c4:	4618      	mov	r0, r3
 80023c6:	f000 f9d3 	bl	8002770 <RCCEx_PLL3_Config>
 80023ca:	4603      	mov	r3, r0
 80023cc:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80023ce:	e003      	b.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0xbac>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	75fb      	strb	r3, [r7, #23]
      break;
 80023d4:	e000      	b.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0xbac>
      break;
 80023d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80023d8:	7dfb      	ldrb	r3, [r7, #23]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d10c      	bne.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80023de:	4905      	ldr	r1, [pc, #20]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80023e0:	4b04      	ldr	r3, [pc, #16]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80023e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023e4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80023ee:	4313      	orrs	r3, r2
 80023f0:	658b      	str	r3, [r1, #88]	; 0x58
 80023f2:	e003      	b.n	80023fc <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 80023f4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023f8:	7dfb      	ldrb	r3, [r7, #23]
 80023fa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002404:	2b00      	cmp	r3, #0
 8002406:	d02f      	beq.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800240e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002412:	d00c      	beq.n	800242e <HAL_RCCEx_PeriphCLKConfig+0xc02>
 8002414:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002418:	d015      	beq.n	8002446 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 800241a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800241e:	d10f      	bne.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0xc14>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002420:	4a79      	ldr	r2, [pc, #484]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8002422:	4b79      	ldr	r3, [pc, #484]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8002424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002426:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800242a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800242c:	e00c      	b.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0xc1c>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	3324      	adds	r3, #36	; 0x24
 8002432:	2101      	movs	r1, #1
 8002434:	4618      	mov	r0, r3
 8002436:	f000 f99b 	bl	8002770 <RCCEx_PLL3_Config>
 800243a:	4603      	mov	r3, r0
 800243c:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800243e:	e003      	b.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0xc1c>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	75fb      	strb	r3, [r7, #23]
      break;
 8002444:	e000      	b.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0xc1c>
      break;
 8002446:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002448:	7dfb      	ldrb	r3, [r7, #23]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d10a      	bne.n	8002464 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800244e:	496e      	ldr	r1, [pc, #440]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8002450:	4b6d      	ldr	r3, [pc, #436]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8002452:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002454:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800245e:	4313      	orrs	r3, r2
 8002460:	654b      	str	r3, [r1, #84]	; 0x54
 8002462:	e001      	b.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002464:	7dfb      	ldrb	r3, [r7, #23]
 8002466:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002470:	2b00      	cmp	r3, #0
 8002472:	d029      	beq.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002478:	2b00      	cmp	r3, #0
 800247a:	d003      	beq.n	8002484 <HAL_RCCEx_PeriphCLKConfig+0xc58>
 800247c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002480:	d007      	beq.n	8002492 <HAL_RCCEx_PeriphCLKConfig+0xc66>
 8002482:	e00f      	b.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0xc78>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002484:	4a60      	ldr	r2, [pc, #384]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8002486:	4b60      	ldr	r3, [pc, #384]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8002488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800248a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800248e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8002490:	e00b      	b.n	80024aa <HAL_RCCEx_PeriphCLKConfig+0xc7e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	3304      	adds	r3, #4
 8002496:	2102      	movs	r1, #2
 8002498:	4618      	mov	r0, r3
 800249a:	f000 f8b7 	bl	800260c <RCCEx_PLL2_Config>
 800249e:	4603      	mov	r3, r0
 80024a0:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80024a2:	e002      	b.n	80024aa <HAL_RCCEx_PeriphCLKConfig+0xc7e>

    default:
      ret = HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	75fb      	strb	r3, [r7, #23]
      break;
 80024a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80024aa:	7dfb      	ldrb	r3, [r7, #23]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d109      	bne.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80024b0:	4955      	ldr	r1, [pc, #340]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80024b2:	4b55      	ldr	r3, [pc, #340]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80024b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024b6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024be:	4313      	orrs	r3, r2
 80024c0:	64cb      	str	r3, [r1, #76]	; 0x4c
 80024c2:	e001      	b.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024c4:	7dfb      	ldrb	r3, [r7, #23]
 80024c6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d00a      	beq.n	80024ea <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	3324      	adds	r3, #36	; 0x24
 80024d8:	2102      	movs	r1, #2
 80024da:	4618      	mov	r0, r3
 80024dc:	f000 f948 	bl	8002770 <RCCEx_PLL3_Config>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d001      	beq.n	80024ea <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    {
      status=HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d02f      	beq.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0xd2a>
  {

    switch(PeriphClkInit->RngClockSelection)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80024fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024fe:	d00c      	beq.n	800251a <HAL_RCCEx_PeriphCLKConfig+0xcee>
 8002500:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002504:	d802      	bhi.n	800250c <HAL_RCCEx_PeriphCLKConfig+0xce0>
 8002506:	2b00      	cmp	r3, #0
 8002508:	d011      	beq.n	800252e <HAL_RCCEx_PeriphCLKConfig+0xd02>
 800250a:	e00d      	b.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0xcfc>
 800250c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002510:	d00f      	beq.n	8002532 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8002512:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002516:	d00e      	beq.n	8002536 <HAL_RCCEx_PeriphCLKConfig+0xd0a>
 8002518:	e006      	b.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0xcfc>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800251a:	4a3b      	ldr	r2, [pc, #236]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 800251c:	4b3a      	ldr	r3, [pc, #232]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 800251e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002520:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002524:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8002526:	e007      	b.n	8002538 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	75fb      	strb	r3, [r7, #23]
      break;
 800252c:	e004      	b.n	8002538 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      break;
 800252e:	bf00      	nop
 8002530:	e002      	b.n	8002538 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      break;
 8002532:	bf00      	nop
 8002534:	e000      	b.n	8002538 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      break;
 8002536:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002538:	7dfb      	ldrb	r3, [r7, #23]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d109      	bne.n	8002552 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800253e:	4932      	ldr	r1, [pc, #200]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8002540:	4b31      	ldr	r3, [pc, #196]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8002542:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002544:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800254c:	4313      	orrs	r3, r2
 800254e:	654b      	str	r3, [r1, #84]	; 0x54
 8002550:	e001      	b.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0xd2a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002552:	7dfb      	ldrb	r3, [r7, #23]
 8002554:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d008      	beq.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0xd48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002562:	4929      	ldr	r1, [pc, #164]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8002564:	4b28      	ldr	r3, [pc, #160]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8002566:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002568:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002570:	4313      	orrs	r3, r2
 8002572:	650b      	str	r3, [r1, #80]	; 0x50
  }

  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800257c:	2b00      	cmp	r3, #0
 800257e:	d009      	beq.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0xd68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8002580:	4921      	ldr	r1, [pc, #132]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8002582:	4b21      	ldr	r3, [pc, #132]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8002584:	691b      	ldr	r3, [r3, #16]
 8002586:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002590:	4313      	orrs	r3, r2
 8002592:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800259c:	2b00      	cmp	r3, #0
 800259e:	d008      	beq.n	80025b2 <HAL_RCCEx_PeriphCLKConfig+0xd86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80025a0:	4919      	ldr	r1, [pc, #100]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80025a2:	4b19      	ldr	r3, [pc, #100]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80025a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025a6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80025ae:	4313      	orrs	r3, r2
 80025b0:	650b      	str	r3, [r1, #80]	; 0x50
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d00d      	beq.n	80025da <HAL_RCCEx_PeriphCLKConfig+0xdae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80025be:	4a12      	ldr	r2, [pc, #72]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80025c0:	4b11      	ldr	r3, [pc, #68]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80025c2:	691b      	ldr	r3, [r3, #16]
 80025c4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80025c8:	6113      	str	r3, [r2, #16]
 80025ca:	490f      	ldr	r1, [pc, #60]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80025cc:	4b0e      	ldr	r3, [pc, #56]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80025ce:	691a      	ldr	r2, [r3, #16]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80025d6:	4313      	orrs	r3, r2
 80025d8:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	da08      	bge.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80025e2:	4909      	ldr	r1, [pc, #36]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80025e4:	4b08      	ldr	r3, [pc, #32]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80025e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025e8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025f0:	4313      	orrs	r3, r2
 80025f2:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 80025f4:	7dbb      	ldrb	r3, [r7, #22]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d101      	bne.n	80025fe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    return HAL_OK;
 80025fa:	2300      	movs	r3, #0
 80025fc:	e000      	b.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0xdd4>
  }
  return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
}
 8002600:	4618      	mov	r0, r3
 8002602:	3718      	adds	r7, #24
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}
 8002608:	58024400 	.word	0x58024400

0800260c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b084      	sub	sp, #16
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
 8002614:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002616:	2300      	movs	r3, #0
 8002618:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800261a:	4b53      	ldr	r3, [pc, #332]	; (8002768 <RCCEx_PLL2_Config+0x15c>)
 800261c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800261e:	f003 0303 	and.w	r3, r3, #3
 8002622:	2b03      	cmp	r3, #3
 8002624:	d101      	bne.n	800262a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e099      	b.n	800275e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800262a:	4a4f      	ldr	r2, [pc, #316]	; (8002768 <RCCEx_PLL2_Config+0x15c>)
 800262c:	4b4e      	ldr	r3, [pc, #312]	; (8002768 <RCCEx_PLL2_Config+0x15c>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002634:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002636:	f7fd fed1 	bl	80003dc <HAL_GetTick>
 800263a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800263c:	e008      	b.n	8002650 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800263e:	f7fd fecd 	bl	80003dc <HAL_GetTick>
 8002642:	4602      	mov	r2, r0
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	1ad3      	subs	r3, r2, r3
 8002648:	2b02      	cmp	r3, #2
 800264a:	d901      	bls.n	8002650 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800264c:	2303      	movs	r3, #3
 800264e:	e086      	b.n	800275e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8002650:	4b45      	ldr	r3, [pc, #276]	; (8002768 <RCCEx_PLL2_Config+0x15c>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002658:	2b00      	cmp	r3, #0
 800265a:	d1f0      	bne.n	800263e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800265c:	4942      	ldr	r1, [pc, #264]	; (8002768 <RCCEx_PLL2_Config+0x15c>)
 800265e:	4b42      	ldr	r3, [pc, #264]	; (8002768 <RCCEx_PLL2_Config+0x15c>)
 8002660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002662:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	031b      	lsls	r3, r3, #12
 800266c:	4313      	orrs	r3, r2
 800266e:	628b      	str	r3, [r1, #40]	; 0x28
 8002670:	493d      	ldr	r1, [pc, #244]	; (8002768 <RCCEx_PLL2_Config+0x15c>)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	3b01      	subs	r3, #1
 8002678:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	3b01      	subs	r3, #1
 8002682:	025b      	lsls	r3, r3, #9
 8002684:	b29b      	uxth	r3, r3
 8002686:	431a      	orrs	r2, r3
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	3b01      	subs	r3, #1
 800268e:	041b      	lsls	r3, r3, #16
 8002690:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002694:	431a      	orrs	r2, r3
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	691b      	ldr	r3, [r3, #16]
 800269a:	3b01      	subs	r3, #1
 800269c:	061b      	lsls	r3, r3, #24
 800269e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80026a2:	4313      	orrs	r3, r2
 80026a4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80026a6:	4930      	ldr	r1, [pc, #192]	; (8002768 <RCCEx_PLL2_Config+0x15c>)
 80026a8:	4b2f      	ldr	r3, [pc, #188]	; (8002768 <RCCEx_PLL2_Config+0x15c>)
 80026aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ac:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	695b      	ldr	r3, [r3, #20]
 80026b4:	4313      	orrs	r3, r2
 80026b6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80026b8:	492b      	ldr	r1, [pc, #172]	; (8002768 <RCCEx_PLL2_Config+0x15c>)
 80026ba:	4b2b      	ldr	r3, [pc, #172]	; (8002768 <RCCEx_PLL2_Config+0x15c>)
 80026bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026be:	f023 0220 	bic.w	r2, r3, #32
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	699b      	ldr	r3, [r3, #24]
 80026c6:	4313      	orrs	r3, r2
 80026c8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80026ca:	4a27      	ldr	r2, [pc, #156]	; (8002768 <RCCEx_PLL2_Config+0x15c>)
 80026cc:	4b26      	ldr	r3, [pc, #152]	; (8002768 <RCCEx_PLL2_Config+0x15c>)
 80026ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026d0:	f023 0310 	bic.w	r3, r3, #16
 80026d4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80026d6:	4924      	ldr	r1, [pc, #144]	; (8002768 <RCCEx_PLL2_Config+0x15c>)
 80026d8:	4b23      	ldr	r3, [pc, #140]	; (8002768 <RCCEx_PLL2_Config+0x15c>)
 80026da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80026dc:	4b23      	ldr	r3, [pc, #140]	; (800276c <RCCEx_PLL2_Config+0x160>)
 80026de:	4013      	ands	r3, r2
 80026e0:	687a      	ldr	r2, [r7, #4]
 80026e2:	69d2      	ldr	r2, [r2, #28]
 80026e4:	00d2      	lsls	r2, r2, #3
 80026e6:	4313      	orrs	r3, r2
 80026e8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80026ea:	4a1f      	ldr	r2, [pc, #124]	; (8002768 <RCCEx_PLL2_Config+0x15c>)
 80026ec:	4b1e      	ldr	r3, [pc, #120]	; (8002768 <RCCEx_PLL2_Config+0x15c>)
 80026ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026f0:	f043 0310 	orr.w	r3, r3, #16
 80026f4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d106      	bne.n	800270a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80026fc:	4a1a      	ldr	r2, [pc, #104]	; (8002768 <RCCEx_PLL2_Config+0x15c>)
 80026fe:	4b1a      	ldr	r3, [pc, #104]	; (8002768 <RCCEx_PLL2_Config+0x15c>)
 8002700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002702:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002706:	62d3      	str	r3, [r2, #44]	; 0x2c
 8002708:	e00f      	b.n	800272a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	2b01      	cmp	r3, #1
 800270e:	d106      	bne.n	800271e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8002710:	4a15      	ldr	r2, [pc, #84]	; (8002768 <RCCEx_PLL2_Config+0x15c>)
 8002712:	4b15      	ldr	r3, [pc, #84]	; (8002768 <RCCEx_PLL2_Config+0x15c>)
 8002714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002716:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800271a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800271c:	e005      	b.n	800272a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800271e:	4a12      	ldr	r2, [pc, #72]	; (8002768 <RCCEx_PLL2_Config+0x15c>)
 8002720:	4b11      	ldr	r3, [pc, #68]	; (8002768 <RCCEx_PLL2_Config+0x15c>)
 8002722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002724:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002728:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800272a:	4a0f      	ldr	r2, [pc, #60]	; (8002768 <RCCEx_PLL2_Config+0x15c>)
 800272c:	4b0e      	ldr	r3, [pc, #56]	; (8002768 <RCCEx_PLL2_Config+0x15c>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002734:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002736:	f7fd fe51 	bl	80003dc <HAL_GetTick>
 800273a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800273c:	e008      	b.n	8002750 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800273e:	f7fd fe4d 	bl	80003dc <HAL_GetTick>
 8002742:	4602      	mov	r2, r0
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	1ad3      	subs	r3, r2, r3
 8002748:	2b02      	cmp	r3, #2
 800274a:	d901      	bls.n	8002750 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800274c:	2303      	movs	r3, #3
 800274e:	e006      	b.n	800275e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8002750:	4b05      	ldr	r3, [pc, #20]	; (8002768 <RCCEx_PLL2_Config+0x15c>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002758:	2b00      	cmp	r3, #0
 800275a:	d0f0      	beq.n	800273e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800275c:	7bfb      	ldrb	r3, [r7, #15]
}
 800275e:	4618      	mov	r0, r3
 8002760:	3710      	adds	r7, #16
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	58024400 	.word	0x58024400
 800276c:	ffff0007 	.word	0xffff0007

08002770 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b084      	sub	sp, #16
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
 8002778:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800277a:	2300      	movs	r3, #0
 800277c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800277e:	4b53      	ldr	r3, [pc, #332]	; (80028cc <RCCEx_PLL3_Config+0x15c>)
 8002780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002782:	f003 0303 	and.w	r3, r3, #3
 8002786:	2b03      	cmp	r3, #3
 8002788:	d101      	bne.n	800278e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e099      	b.n	80028c2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800278e:	4a4f      	ldr	r2, [pc, #316]	; (80028cc <RCCEx_PLL3_Config+0x15c>)
 8002790:	4b4e      	ldr	r3, [pc, #312]	; (80028cc <RCCEx_PLL3_Config+0x15c>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002798:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800279a:	f7fd fe1f 	bl	80003dc <HAL_GetTick>
 800279e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80027a0:	e008      	b.n	80027b4 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80027a2:	f7fd fe1b 	bl	80003dc <HAL_GetTick>
 80027a6:	4602      	mov	r2, r0
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	1ad3      	subs	r3, r2, r3
 80027ac:	2b02      	cmp	r3, #2
 80027ae:	d901      	bls.n	80027b4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80027b0:	2303      	movs	r3, #3
 80027b2:	e086      	b.n	80028c2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80027b4:	4b45      	ldr	r3, [pc, #276]	; (80028cc <RCCEx_PLL3_Config+0x15c>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d1f0      	bne.n	80027a2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80027c0:	4942      	ldr	r1, [pc, #264]	; (80028cc <RCCEx_PLL3_Config+0x15c>)
 80027c2:	4b42      	ldr	r3, [pc, #264]	; (80028cc <RCCEx_PLL3_Config+0x15c>)
 80027c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027c6:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	051b      	lsls	r3, r3, #20
 80027d0:	4313      	orrs	r3, r2
 80027d2:	628b      	str	r3, [r1, #40]	; 0x28
 80027d4:	493d      	ldr	r1, [pc, #244]	; (80028cc <RCCEx_PLL3_Config+0x15c>)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	3b01      	subs	r3, #1
 80027dc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	3b01      	subs	r3, #1
 80027e6:	025b      	lsls	r3, r3, #9
 80027e8:	b29b      	uxth	r3, r3
 80027ea:	431a      	orrs	r2, r3
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	3b01      	subs	r3, #1
 80027f2:	041b      	lsls	r3, r3, #16
 80027f4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80027f8:	431a      	orrs	r2, r3
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	691b      	ldr	r3, [r3, #16]
 80027fe:	3b01      	subs	r3, #1
 8002800:	061b      	lsls	r3, r3, #24
 8002802:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002806:	4313      	orrs	r3, r2
 8002808:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800280a:	4930      	ldr	r1, [pc, #192]	; (80028cc <RCCEx_PLL3_Config+0x15c>)
 800280c:	4b2f      	ldr	r3, [pc, #188]	; (80028cc <RCCEx_PLL3_Config+0x15c>)
 800280e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002810:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	695b      	ldr	r3, [r3, #20]
 8002818:	4313      	orrs	r3, r2
 800281a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800281c:	492b      	ldr	r1, [pc, #172]	; (80028cc <RCCEx_PLL3_Config+0x15c>)
 800281e:	4b2b      	ldr	r3, [pc, #172]	; (80028cc <RCCEx_PLL3_Config+0x15c>)
 8002820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002822:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	699b      	ldr	r3, [r3, #24]
 800282a:	4313      	orrs	r3, r2
 800282c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800282e:	4a27      	ldr	r2, [pc, #156]	; (80028cc <RCCEx_PLL3_Config+0x15c>)
 8002830:	4b26      	ldr	r3, [pc, #152]	; (80028cc <RCCEx_PLL3_Config+0x15c>)
 8002832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002834:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002838:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800283a:	4924      	ldr	r1, [pc, #144]	; (80028cc <RCCEx_PLL3_Config+0x15c>)
 800283c:	4b23      	ldr	r3, [pc, #140]	; (80028cc <RCCEx_PLL3_Config+0x15c>)
 800283e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002840:	4b23      	ldr	r3, [pc, #140]	; (80028d0 <RCCEx_PLL3_Config+0x160>)
 8002842:	4013      	ands	r3, r2
 8002844:	687a      	ldr	r2, [r7, #4]
 8002846:	69d2      	ldr	r2, [r2, #28]
 8002848:	00d2      	lsls	r2, r2, #3
 800284a:	4313      	orrs	r3, r2
 800284c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800284e:	4a1f      	ldr	r2, [pc, #124]	; (80028cc <RCCEx_PLL3_Config+0x15c>)
 8002850:	4b1e      	ldr	r3, [pc, #120]	; (80028cc <RCCEx_PLL3_Config+0x15c>)
 8002852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002854:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002858:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d106      	bne.n	800286e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8002860:	4a1a      	ldr	r2, [pc, #104]	; (80028cc <RCCEx_PLL3_Config+0x15c>)
 8002862:	4b1a      	ldr	r3, [pc, #104]	; (80028cc <RCCEx_PLL3_Config+0x15c>)
 8002864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002866:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800286a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800286c:	e00f      	b.n	800288e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	2b01      	cmp	r3, #1
 8002872:	d106      	bne.n	8002882 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8002874:	4a15      	ldr	r2, [pc, #84]	; (80028cc <RCCEx_PLL3_Config+0x15c>)
 8002876:	4b15      	ldr	r3, [pc, #84]	; (80028cc <RCCEx_PLL3_Config+0x15c>)
 8002878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800287a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800287e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8002880:	e005      	b.n	800288e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8002882:	4a12      	ldr	r2, [pc, #72]	; (80028cc <RCCEx_PLL3_Config+0x15c>)
 8002884:	4b11      	ldr	r3, [pc, #68]	; (80028cc <RCCEx_PLL3_Config+0x15c>)
 8002886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002888:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800288c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800288e:	4a0f      	ldr	r2, [pc, #60]	; (80028cc <RCCEx_PLL3_Config+0x15c>)
 8002890:	4b0e      	ldr	r3, [pc, #56]	; (80028cc <RCCEx_PLL3_Config+0x15c>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002898:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800289a:	f7fd fd9f 	bl	80003dc <HAL_GetTick>
 800289e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80028a0:	e008      	b.n	80028b4 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80028a2:	f7fd fd9b 	bl	80003dc <HAL_GetTick>
 80028a6:	4602      	mov	r2, r0
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	1ad3      	subs	r3, r2, r3
 80028ac:	2b02      	cmp	r3, #2
 80028ae:	d901      	bls.n	80028b4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80028b0:	2303      	movs	r3, #3
 80028b2:	e006      	b.n	80028c2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80028b4:	4b05      	ldr	r3, [pc, #20]	; (80028cc <RCCEx_PLL3_Config+0x15c>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d0f0      	beq.n	80028a2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80028c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3710      	adds	r7, #16
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	58024400 	.word	0x58024400
 80028d0:	ffff0007 	.word	0xffff0007

080028d4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b084      	sub	sp, #16
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  uint32_t crc_length = 0UL;
 80028dc:	2300      	movs	r3, #0
 80028de:	60fb      	str	r3, [r7, #12]
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d101      	bne.n	80028ea <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e0e0      	b.n	8002aac <HAL_SPI_Init+0x1d8>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2200      	movs	r2, #0
 80028ee:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a6f      	ldr	r2, [pc, #444]	; (8002ab4 <HAL_SPI_Init+0x1e0>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d00f      	beq.n	800291a <HAL_SPI_Init+0x46>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a6e      	ldr	r2, [pc, #440]	; (8002ab8 <HAL_SPI_Init+0x1e4>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d00a      	beq.n	800291a <HAL_SPI_Init+0x46>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a6c      	ldr	r2, [pc, #432]	; (8002abc <HAL_SPI_Init+0x1e8>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d005      	beq.n	800291a <HAL_SPI_Init+0x46>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	68db      	ldr	r3, [r3, #12]
 8002912:	2b0f      	cmp	r3, #15
 8002914:	d901      	bls.n	800291a <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	e0c8      	b.n	8002aac <HAL_SPI_Init+0x1d8>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f000 fc98 	bl	8003250 <SPI_GetPacketSize>
 8002920:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a63      	ldr	r2, [pc, #396]	; (8002ab4 <HAL_SPI_Init+0x1e0>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d00c      	beq.n	8002946 <HAL_SPI_Init+0x72>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a61      	ldr	r2, [pc, #388]	; (8002ab8 <HAL_SPI_Init+0x1e4>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d007      	beq.n	8002946 <HAL_SPI_Init+0x72>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a60      	ldr	r2, [pc, #384]	; (8002abc <HAL_SPI_Init+0x1e8>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d002      	beq.n	8002946 <HAL_SPI_Init+0x72>
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	2b08      	cmp	r3, #8
 8002944:	d811      	bhi.n	800296a <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800294a:	4a5a      	ldr	r2, [pc, #360]	; (8002ab4 <HAL_SPI_Init+0x1e0>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d009      	beq.n	8002964 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a58      	ldr	r2, [pc, #352]	; (8002ab8 <HAL_SPI_Init+0x1e4>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d004      	beq.n	8002964 <HAL_SPI_Init+0x90>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a57      	ldr	r2, [pc, #348]	; (8002abc <HAL_SPI_Init+0x1e8>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d104      	bne.n	800296e <HAL_SPI_Init+0x9a>
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	2b10      	cmp	r3, #16
 8002968:	d901      	bls.n	800296e <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e09e      	b.n	8002aac <HAL_SPI_Init+0x1d8>
      return HAL_ERROR;
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8002974:	b2db      	uxtb	r3, r3
 8002976:	2b00      	cmp	r3, #0
 8002978:	d106      	bne.n	8002988 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2200      	movs	r2, #0
 800297e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	f001 fab6 	bl	8003ef4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2202      	movs	r2, #2
 800298c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	687a      	ldr	r2, [r7, #4]
 8002996:	6812      	ldr	r2, [r2, #0]
 8002998:	6812      	ldr	r2, [r2, #0]
 800299a:	f022 0201 	bic.w	r2, r2, #1
 800299e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	699b      	ldr	r3, [r3, #24]
 80029a4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80029a8:	d110      	bne.n	80029cc <HAL_SPI_Init+0xf8>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029b2:	d10b      	bne.n	80029cc <HAL_SPI_Init+0xf8>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d107      	bne.n	80029cc <HAL_SPI_Init+0xf8>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	687a      	ldr	r2, [r7, #4]
 80029c2:	6812      	ldr	r2, [r2, #0]
 80029c4:	6812      	ldr	r2, [r2, #0]
 80029c6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80029ca:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	687a      	ldr	r2, [r7, #4]
 80029d2:	69d1      	ldr	r1, [r2, #28]
 80029d4:	687a      	ldr	r2, [r7, #4]
 80029d6:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80029d8:	4311      	orrs	r1, r2
 80029da:	68fa      	ldr	r2, [r7, #12]
 80029dc:	4311      	orrs	r1, r2
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80029e2:	4311      	orrs	r1, r2
 80029e4:	687a      	ldr	r2, [r7, #4]
 80029e6:	68d2      	ldr	r2, [r2, #12]
 80029e8:	430a      	orrs	r2, r1
 80029ea:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	687a      	ldr	r2, [r7, #4]
 80029f2:	6b51      	ldr	r1, [r2, #52]	; 0x34
 80029f4:	687a      	ldr	r2, [r7, #4]
 80029f6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80029f8:	4311      	orrs	r1, r2
 80029fa:	687a      	ldr	r2, [r7, #4]
 80029fc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80029fe:	4311      	orrs	r1, r2
 8002a00:	687a      	ldr	r2, [r7, #4]
 8002a02:	6992      	ldr	r2, [r2, #24]
 8002a04:	4311      	orrs	r1, r2
 8002a06:	687a      	ldr	r2, [r7, #4]
 8002a08:	6912      	ldr	r2, [r2, #16]
 8002a0a:	4311      	orrs	r1, r2
 8002a0c:	687a      	ldr	r2, [r7, #4]
 8002a0e:	6952      	ldr	r2, [r2, #20]
 8002a10:	4311      	orrs	r1, r2
 8002a12:	687a      	ldr	r2, [r7, #4]
 8002a14:	6a12      	ldr	r2, [r2, #32]
 8002a16:	4311      	orrs	r1, r2
 8002a18:	687a      	ldr	r2, [r7, #4]
 8002a1a:	6852      	ldr	r2, [r2, #4]
 8002a1c:	4311      	orrs	r1, r2
 8002a1e:	687a      	ldr	r2, [r7, #4]
 8002a20:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002a22:	4311      	orrs	r1, r2
 8002a24:	687a      	ldr	r2, [r7, #4]
 8002a26:	6892      	ldr	r2, [r2, #8]
 8002a28:	4311      	orrs	r1, r2
 8002a2a:	687a      	ldr	r2, [r7, #4]
 8002a2c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002a2e:	4311      	orrs	r1, r2
 8002a30:	687a      	ldr	r2, [r7, #4]
 8002a32:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002a34:	430a      	orrs	r2, r1
 8002a36:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d113      	bne.n	8002a68 <HAL_SPI_Init+0x194>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	687a      	ldr	r2, [r7, #4]
 8002a46:	6812      	ldr	r2, [r2, #0]
 8002a48:	6892      	ldr	r2, [r2, #8]
 8002a4a:	f422 52c0 	bic.w	r2, r2, #6144	; 0x1800
 8002a4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a52:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	687a      	ldr	r2, [r7, #4]
 8002a5a:	6812      	ldr	r2, [r2, #0]
 8002a5c:	6892      	ldr	r2, [r2, #8]
 8002a5e:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8002a62:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002a66:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	687a      	ldr	r2, [r7, #4]
 8002a6e:	6812      	ldr	r2, [r2, #0]
 8002a70:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002a72:	f022 0201 	bic.w	r2, r2, #1
 8002a76:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d00a      	beq.n	8002a9a <HAL_SPI_Init+0x1c6>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	687a      	ldr	r2, [r7, #4]
 8002a8a:	6812      	ldr	r2, [r2, #0]
 8002a8c:	68d2      	ldr	r2, [r2, #12]
 8002a8e:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8002a92:	687a      	ldr	r2, [r7, #4]
 8002a94:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002a96:	430a      	orrs	r2, r1
 8002a98:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8002aaa:	2300      	movs	r3, #0
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	3710      	adds	r7, #16
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}
 8002ab4:	40013000 	.word	0x40013000
 8002ab8:	40003800 	.word	0x40003800
 8002abc:	40003c00 	.word	0x40003c00

08002ac0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b08c      	sub	sp, #48	; 0x30
 8002ac4:	af02      	add	r7, sp, #8
 8002ac6:	60f8      	str	r0, [r7, #12]
 8002ac8:	60b9      	str	r1, [r7, #8]
 8002aca:	607a      	str	r2, [r7, #4]
 8002acc:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d101      	bne.n	8002ae2 <HAL_SPI_TransmitReceive+0x22>
 8002ade:	2302      	movs	r3, #2
 8002ae0:	e2d5      	b.n	800308e <HAL_SPI_TransmitReceive+0x5ce>
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002aea:	f7fd fc77 	bl	80003dc <HAL_GetTick>
 8002aee:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 8002af0:	887b      	ldrh	r3, [r7, #2]
 8002af2:	84fb      	strh	r3, [r7, #38]	; 0x26
  initial_RxXferCount = Size;
 8002af4:	887b      	ldrh	r3, [r7, #2]
 8002af6:	84bb      	strh	r3, [r7, #36]	; 0x24
  tmp_state           = hspi->State;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8002afe:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002b06:	7efb      	ldrb	r3, [r7, #27]
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d014      	beq.n	8002b36 <HAL_SPI_TransmitReceive+0x76>
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b12:	d106      	bne.n	8002b22 <HAL_SPI_TransmitReceive+0x62>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d102      	bne.n	8002b22 <HAL_SPI_TransmitReceive+0x62>
 8002b1c:	7efb      	ldrb	r3, [r7, #27]
 8002b1e:	2b04      	cmp	r3, #4
 8002b20:	d009      	beq.n	8002b36 <HAL_SPI_TransmitReceive+0x76>
  {
    errorcode = HAL_BUSY;
 8002b22:	2302      	movs	r3, #2
 8002b24:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    __HAL_UNLOCK(hspi);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8002b30:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002b34:	e2ab      	b.n	800308e <HAL_SPI_TransmitReceive+0x5ce>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d005      	beq.n	8002b48 <HAL_SPI_TransmitReceive+0x88>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d002      	beq.n	8002b48 <HAL_SPI_TransmitReceive+0x88>
 8002b42:	887b      	ldrh	r3, [r7, #2]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d109      	bne.n	8002b5c <HAL_SPI_TransmitReceive+0x9c>
  {
    errorcode = HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    __HAL_UNLOCK(hspi);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2200      	movs	r2, #0
 8002b52:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8002b56:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002b5a:	e298      	b.n	800308e <HAL_SPI_TransmitReceive+0x5ce>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	2b04      	cmp	r3, #4
 8002b66:	d003      	beq.n	8002b70 <HAL_SPI_TransmitReceive+0xb0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2205      	movs	r2, #5
 8002b6c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2200      	movs	r2, #0
 8002b74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	687a      	ldr	r2, [r7, #4]
 8002b7c:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	887a      	ldrh	r2, [r7, #2]
 8002b82:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	887a      	ldrh	r2, [r7, #2]
 8002b8a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	68ba      	ldr	r2, [r7, #8]
 8002b92:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	887a      	ldrh	r2, [r7, #2]
 8002b98:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	887a      	ldrh	r2, [r7, #2]
 8002ba0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	2200      	movs	r2, #0
 8002bae:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	6859      	ldr	r1, [r3, #4]
 8002bba:	4ba0      	ldr	r3, [pc, #640]	; (8002e3c <HAL_SPI_TransmitReceive+0x37c>)
 8002bbc:	400b      	ands	r3, r1
 8002bbe:	8879      	ldrh	r1, [r7, #2]
 8002bc0:	430b      	orrs	r3, r1
 8002bc2:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	68fa      	ldr	r2, [r7, #12]
 8002bca:	6812      	ldr	r2, [r2, #0]
 8002bcc:	6812      	ldr	r2, [r2, #0]
 8002bce:	f042 0201 	orr.w	r2, r2, #1
 8002bd2:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bdc:	d107      	bne.n	8002bee <HAL_SPI_TransmitReceive+0x12e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	68fa      	ldr	r2, [r7, #12]
 8002be4:	6812      	ldr	r2, [r2, #0]
 8002be6:	6812      	ldr	r2, [r2, #0]
 8002be8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bec:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	68db      	ldr	r3, [r3, #12]
 8002bf2:	2b0f      	cmp	r3, #15
 8002bf4:	d970      	bls.n	8002cd8 <HAL_SPI_TransmitReceive+0x218>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8002bf6:	e044      	b.n	8002c82 <HAL_SPI_TransmitReceive+0x1c2>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	695b      	ldr	r3, [r3, #20]
 8002bfe:	f003 0302 	and.w	r3, r3, #2
 8002c02:	2b02      	cmp	r3, #2
 8002c04:	d11a      	bne.n	8002c3c <HAL_SPI_TransmitReceive+0x17c>
 8002c06:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d017      	beq.n	8002c3c <HAL_SPI_TransmitReceive+0x17c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	68fa      	ldr	r2, [r7, #12]
 8002c12:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002c14:	6812      	ldr	r2, [r2, #0]
 8002c16:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c1c:	1d1a      	adds	r2, r3, #4
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8002c28:	b29b      	uxth	r3, r3
 8002c2a:	3b01      	subs	r3, #1
 8002c2c:	b29a      	uxth	r2, r3
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8002c3a:	84fb      	strh	r3, [r7, #38]	; 0x26
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	695a      	ldr	r2, [r3, #20]
 8002c42:	f248 0308 	movw	r3, #32776	; 0x8008
 8002c46:	4013      	ands	r3, r2
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d01a      	beq.n	8002c82 <HAL_SPI_TransmitReceive+0x1c2>
 8002c4c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d017      	beq.n	8002c82 <HAL_SPI_TransmitReceive+0x1c2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c56:	68fa      	ldr	r2, [r7, #12]
 8002c58:	6812      	ldr	r2, [r2, #0]
 8002c5a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002c5c:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c62:	1d1a      	adds	r2, r3, #4
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8002c6e:	b29b      	uxth	r3, r3
 8002c70:	3b01      	subs	r3, #1
 8002c72:	b29a      	uxth	r2, r3
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8002c80:	84bb      	strh	r3, [r7, #36]	; 0x24
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8002c82:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d1b7      	bne.n	8002bf8 <HAL_SPI_TransmitReceive+0x138>
 8002c88:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d1b4      	bne.n	8002bf8 <HAL_SPI_TransmitReceive+0x138>
      }
    }

    /* Timeout management */
    if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002c8e:	f7fd fba5 	bl	80003dc <HAL_GetTick>
 8002c92:	4602      	mov	r2, r0
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	1ad2      	subs	r2, r2, r3
 8002c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d303      	bcc.n	8002ca6 <HAL_SPI_TransmitReceive+0x1e6>
 8002c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ca0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ca4:	d103      	bne.n	8002cae <HAL_SPI_TransmitReceive+0x1ee>
 8002ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	f040 81c9 	bne.w	8003040 <HAL_SPI_TransmitReceive+0x580>
    {
      /* Call standard close procedure with error check */
      SPI_CloseTransfer(hspi);
 8002cae:	68f8      	ldr	r0, [r7, #12]
 8002cb0:	f000 fa00 	bl	80030b4 <SPI_CloseTransfer>

      /* Process Unlocked */
      __HAL_UNLOCK(hspi);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002cc2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      hspi->State = HAL_SPI_STATE_READY;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2201      	movs	r2, #1
 8002cd0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      return HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e1da      	b.n	800308e <HAL_SPI_TransmitReceive+0x5ce>
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	2b07      	cmp	r3, #7
 8002cde:	f240 81a7 	bls.w	8003030 <HAL_SPI_TransmitReceive+0x570>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8002ce2:	e0ad      	b.n	8002e40 <HAL_SPI_TransmitReceive+0x380>
    {
      /* Check TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	695b      	ldr	r3, [r3, #20]
 8002cea:	f003 0302 	and.w	r3, r3, #2
 8002cee:	2b02      	cmp	r3, #2
 8002cf0:	d13b      	bne.n	8002d6a <HAL_SPI_TransmitReceive+0x2aa>
 8002cf2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d038      	beq.n	8002d6a <HAL_SPI_TransmitReceive+0x2aa>
      {
        if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8002cf8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d91c      	bls.n	8002d38 <HAL_SPI_TransmitReceive+0x278>
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d018      	beq.n	8002d38 <HAL_SPI_TransmitReceive+0x278>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	68fa      	ldr	r2, [r7, #12]
 8002d0c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002d0e:	6812      	ldr	r2, [r2, #0]
 8002d10:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d16:	1d1a      	adds	r2, r3, #4
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8002d22:	b29b      	uxth	r3, r3
 8002d24:	3b02      	subs	r3, #2
 8002d26:	b29a      	uxth	r2, r3
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8002d34:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002d36:	e018      	b.n	8002d6a <HAL_SPI_TransmitReceive+0x2aa>
        }
        else
        {
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	3320      	adds	r3, #32
 8002d3e:	68fa      	ldr	r2, [r7, #12]
 8002d40:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002d42:	8812      	ldrh	r2, [r2, #0]
 8002d44:	801a      	strh	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d4a:	1c9a      	adds	r2, r3, #2
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8002d56:	b29b      	uxth	r3, r3
 8002d58:	3b01      	subs	r3, #1
 8002d5a:	b29a      	uxth	r2, r3
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8002d68:	84fb      	strh	r3, [r7, #38]	; 0x26
        }
      }

      /* Check RXWNE/FRLVL flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	695b      	ldr	r3, [r3, #20]
 8002d70:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d03c      	beq.n	8002df2 <HAL_SPI_TransmitReceive+0x332>
 8002d78:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d039      	beq.n	8002df2 <HAL_SPI_TransmitReceive+0x332>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	695b      	ldr	r3, [r3, #20]
 8002d84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d018      	beq.n	8002dbe <HAL_SPI_TransmitReceive+0x2fe>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d90:	68fa      	ldr	r2, [r7, #12]
 8002d92:	6812      	ldr	r2, [r2, #0]
 8002d94:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002d96:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d9c:	1d1a      	adds	r2, r3, #4
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8002da8:	b29b      	uxth	r3, r3
 8002daa:	3b02      	subs	r3, #2
 8002dac:	b29a      	uxth	r2, r3
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8002dba:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002dbc:	e019      	b.n	8002df2 <HAL_SPI_TransmitReceive+0x332>
        }
        else
        {
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002dc2:	68fa      	ldr	r2, [r7, #12]
 8002dc4:	6812      	ldr	r2, [r2, #0]
 8002dc6:	3230      	adds	r2, #48	; 0x30
 8002dc8:	8812      	ldrh	r2, [r2, #0]
 8002dca:	b292      	uxth	r2, r2
 8002dcc:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002dd2:	1c9a      	adds	r2, r3, #2
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8002dde:	b29b      	uxth	r3, r3
 8002de0:	3b01      	subs	r3, #1
 8002de2:	b29a      	uxth	r2, r3
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8002df0:	84bb      	strh	r3, [r7, #36]	; 0x24
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002df2:	f7fd faf3 	bl	80003dc <HAL_GetTick>
 8002df6:	4602      	mov	r2, r0
 8002df8:	69fb      	ldr	r3, [r7, #28]
 8002dfa:	1ad2      	subs	r2, r2, r3
 8002dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d303      	bcc.n	8002e0a <HAL_SPI_TransmitReceive+0x34a>
 8002e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e08:	d102      	bne.n	8002e10 <HAL_SPI_TransmitReceive+0x350>
 8002e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d117      	bne.n	8002e40 <HAL_SPI_TransmitReceive+0x380>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8002e10:	68f8      	ldr	r0, [r7, #12]
 8002e12:	f000 f94f 	bl	80030b4 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e24:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2201      	movs	r2, #1
 8002e32:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	e129      	b.n	800308e <HAL_SPI_TransmitReceive+0x5ce>
 8002e3a:	bf00      	nop
 8002e3c:	ffff0000 	.word	0xffff0000
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8002e40:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	f47f af4e 	bne.w	8002ce4 <HAL_SPI_TransmitReceive+0x224>
 8002e48:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	f47f af4a 	bne.w	8002ce4 <HAL_SPI_TransmitReceive+0x224>
 8002e50:	e0f6      	b.n	8003040 <HAL_SPI_TransmitReceive+0x580>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	695b      	ldr	r3, [r3, #20]
 8002e58:	f003 0302 	and.w	r3, r3, #2
 8002e5c:	2b02      	cmp	r3, #2
 8002e5e:	d15c      	bne.n	8002f1a <HAL_SPI_TransmitReceive+0x45a>
 8002e60:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d059      	beq.n	8002f1a <HAL_SPI_TransmitReceive+0x45a>
      {
        if ((initial_TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8002e66:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002e68:	2b03      	cmp	r3, #3
 8002e6a:	d91c      	bls.n	8002ea6 <HAL_SPI_TransmitReceive+0x3e6>
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e70:	2b40      	cmp	r3, #64	; 0x40
 8002e72:	d918      	bls.n	8002ea6 <HAL_SPI_TransmitReceive+0x3e6>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	68fa      	ldr	r2, [r7, #12]
 8002e7a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002e7c:	6812      	ldr	r2, [r2, #0]
 8002e7e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e84:	1d1a      	adds	r2, r3, #4
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8002e90:	b29b      	uxth	r3, r3
 8002e92:	3b04      	subs	r3, #4
 8002e94:	b29a      	uxth	r2, r3
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8002ea2:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002ea4:	e039      	b.n	8002f1a <HAL_SPI_TransmitReceive+0x45a>
        }
        else if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8002ea6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d91d      	bls.n	8002ee8 <HAL_SPI_TransmitReceive+0x428>
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d019      	beq.n	8002ee8 <HAL_SPI_TransmitReceive+0x428>
        {
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	3320      	adds	r3, #32
 8002eba:	68fa      	ldr	r2, [r7, #12]
 8002ebc:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002ebe:	8812      	ldrh	r2, [r2, #0]
 8002ec0:	801a      	strh	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ec6:	1c9a      	adds	r2, r3, #2
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	3b02      	subs	r3, #2
 8002ed6:	b29a      	uxth	r2, r3
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8002ee4:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002ee6:	e018      	b.n	8002f1a <HAL_SPI_TransmitReceive+0x45a>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	3320      	adds	r3, #32
 8002eee:	68fa      	ldr	r2, [r7, #12]
 8002ef0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002ef2:	7812      	ldrb	r2, [r2, #0]
 8002ef4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002efa:	1c5a      	adds	r2, r3, #1
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8002f06:	b29b      	uxth	r3, r3
 8002f08:	3b01      	subs	r3, #1
 8002f0a:	b29a      	uxth	r2, r3
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8002f18:	84fb      	strh	r3, [r7, #38]	; 0x26
        }
      }

      /* Wait until RXWNE/FRLVL flag is reset */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	695b      	ldr	r3, [r3, #20]
 8002f20:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d05f      	beq.n	8002fe8 <HAL_SPI_TransmitReceive+0x528>
 8002f28:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d05c      	beq.n	8002fe8 <HAL_SPI_TransmitReceive+0x528>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	695b      	ldr	r3, [r3, #20]
 8002f34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d018      	beq.n	8002f6e <HAL_SPI_TransmitReceive+0x4ae>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f40:	68fa      	ldr	r2, [r7, #12]
 8002f42:	6812      	ldr	r2, [r2, #0]
 8002f44:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002f46:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f4c:	1d1a      	adds	r2, r3, #4
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8002f58:	b29b      	uxth	r3, r3
 8002f5a:	3b04      	subs	r3, #4
 8002f5c:	b29a      	uxth	r2, r3
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8002f6a:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002f6c:	e03c      	b.n	8002fe8 <HAL_SPI_TransmitReceive+0x528>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	695b      	ldr	r3, [r3, #20]
 8002f74:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8002f78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f7c:	d91a      	bls.n	8002fb4 <HAL_SPI_TransmitReceive+0x4f4>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f82:	68fa      	ldr	r2, [r7, #12]
 8002f84:	6812      	ldr	r2, [r2, #0]
 8002f86:	3230      	adds	r2, #48	; 0x30
 8002f88:	8812      	ldrh	r2, [r2, #0]
 8002f8a:	b292      	uxth	r2, r2
 8002f8c:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f92:	1c9a      	adds	r2, r3, #2
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8002f9e:	b29b      	uxth	r3, r3
 8002fa0:	3b02      	subs	r3, #2
 8002fa2:	b29a      	uxth	r2, r3
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8002fb0:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002fb2:	e019      	b.n	8002fe8 <HAL_SPI_TransmitReceive+0x528>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002fb8:	68fa      	ldr	r2, [r7, #12]
 8002fba:	6812      	ldr	r2, [r2, #0]
 8002fbc:	3230      	adds	r2, #48	; 0x30
 8002fbe:	7812      	ldrb	r2, [r2, #0]
 8002fc0:	b2d2      	uxtb	r2, r2
 8002fc2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002fc8:	1c5a      	adds	r2, r3, #1
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8002fd4:	b29b      	uxth	r3, r3
 8002fd6:	3b01      	subs	r3, #1
 8002fd8:	b29a      	uxth	r2, r3
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8002fe6:	84bb      	strh	r3, [r7, #36]	; 0x24
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002fe8:	f7fd f9f8 	bl	80003dc <HAL_GetTick>
 8002fec:	4602      	mov	r2, r0
 8002fee:	69fb      	ldr	r3, [r7, #28]
 8002ff0:	1ad2      	subs	r2, r2, r3
 8002ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d303      	bcc.n	8003000 <HAL_SPI_TransmitReceive+0x540>
 8002ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ffa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ffe:	d102      	bne.n	8003006 <HAL_SPI_TransmitReceive+0x546>
 8003000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003002:	2b00      	cmp	r3, #0
 8003004:	d114      	bne.n	8003030 <HAL_SPI_TransmitReceive+0x570>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8003006:	68f8      	ldr	r0, [r7, #12]
 8003008:	f000 f854 	bl	80030b4 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2200      	movs	r2, #0
 8003010:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800301a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2201      	movs	r2, #1
 8003028:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	e02e      	b.n	800308e <HAL_SPI_TransmitReceive+0x5ce>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8003030:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003032:	2b00      	cmp	r3, #0
 8003034:	f47f af0d 	bne.w	8002e52 <HAL_SPI_TransmitReceive+0x392>
 8003038:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800303a:	2b00      	cmp	r3, #0
 800303c:	f47f af09 	bne.w	8002e52 <HAL_SPI_TransmitReceive+0x392>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8003040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003042:	9300      	str	r3, [sp, #0]
 8003044:	69fb      	ldr	r3, [r7, #28]
 8003046:	2200      	movs	r2, #0
 8003048:	2108      	movs	r1, #8
 800304a:	68f8      	ldr	r0, [r7, #12]
 800304c:	f000 f8d2 	bl	80031f4 <SPI_WaitOnFlagUntilTimeout>
 8003050:	4603      	mov	r3, r0
 8003052:	2b00      	cmp	r3, #0
 8003054:	d007      	beq.n	8003066 <HAL_SPI_TransmitReceive+0x5a6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800305c:	f043 0220 	orr.w	r2, r3, #32
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8003066:	68f8      	ldr	r0, [r7, #12]
 8003068:	f000 f824 	bl	80030b4 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2200      	movs	r2, #0
 8003070:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2201      	movs	r2, #1
 8003078:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003082:	2b00      	cmp	r3, #0
 8003084:	d001      	beq.n	800308a <HAL_SPI_TransmitReceive+0x5ca>
  {
    return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e001      	b.n	800308e <HAL_SPI_TransmitReceive+0x5ce>
  }
  return errorcode;
 800308a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800308e:	4618      	mov	r0, r3
 8003090:	3728      	adds	r7, #40	; 0x28
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}
 8003096:	bf00      	nop

08003098 <HAL_SPI_GetState>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8003098:	b480      	push	{r7}
 800309a:	b083      	sub	sp, #12
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80030a6:	b2db      	uxtb	r3, r3
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	370c      	adds	r7, #12
 80030ac:	46bd      	mov	sp, r7
 80030ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b2:	4770      	bx	lr

080030b4 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b085      	sub	sp, #20
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	695b      	ldr	r3, [r3, #20]
 80030c2:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	687a      	ldr	r2, [r7, #4]
 80030ca:	6812      	ldr	r2, [r2, #0]
 80030cc:	6992      	ldr	r2, [r2, #24]
 80030ce:	f042 0208 	orr.w	r2, r2, #8
 80030d2:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	687a      	ldr	r2, [r7, #4]
 80030da:	6812      	ldr	r2, [r2, #0]
 80030dc:	6992      	ldr	r2, [r2, #24]
 80030de:	f042 0210 	orr.w	r2, r2, #16
 80030e2:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	687a      	ldr	r2, [r7, #4]
 80030ea:	6812      	ldr	r2, [r2, #0]
 80030ec:	6812      	ldr	r2, [r2, #0]
 80030ee:	f022 0201 	bic.w	r2, r2, #1
 80030f2:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	6919      	ldr	r1, [r3, #16]
 80030fe:	4b3c      	ldr	r3, [pc, #240]	; (80031f0 <SPI_CloseTransfer+0x13c>)
 8003100:	400b      	ands	r3, r1
 8003102:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	687a      	ldr	r2, [r7, #4]
 800310a:	6812      	ldr	r2, [r2, #0]
 800310c:	6892      	ldr	r2, [r2, #8]
 800310e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8003112:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800311a:	b2db      	uxtb	r3, r3
 800311c:	2b04      	cmp	r3, #4
 800311e:	d014      	beq.n	800314a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	f003 0320 	and.w	r3, r3, #32
 8003126:	2b00      	cmp	r3, #0
 8003128:	d00f      	beq.n	800314a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003130:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	687a      	ldr	r2, [r7, #4]
 8003140:	6812      	ldr	r2, [r2, #0]
 8003142:	6992      	ldr	r2, [r2, #24]
 8003144:	f042 0220 	orr.w	r2, r2, #32
 8003148:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8003150:	b2db      	uxtb	r3, r3
 8003152:	2b03      	cmp	r3, #3
 8003154:	d014      	beq.n	8003180 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800315c:	2b00      	cmp	r3, #0
 800315e:	d00f      	beq.n	8003180 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003166:	f043 0204 	orr.w	r2, r3, #4
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	687a      	ldr	r2, [r7, #4]
 8003176:	6812      	ldr	r2, [r2, #0]
 8003178:	6992      	ldr	r2, [r2, #24]
 800317a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800317e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003186:	2b00      	cmp	r3, #0
 8003188:	d00f      	beq.n	80031aa <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003190:	f043 0201 	orr.w	r2, r3, #1
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	687a      	ldr	r2, [r7, #4]
 80031a0:	6812      	ldr	r2, [r2, #0]
 80031a2:	6992      	ldr	r2, [r2, #24]
 80031a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031a8:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d00f      	beq.n	80031d4 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031ba:	f043 0208 	orr.w	r2, r3, #8
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	687a      	ldr	r2, [r7, #4]
 80031ca:	6812      	ldr	r2, [r2, #0]
 80031cc:	6992      	ldr	r2, [r2, #24]
 80031ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031d2:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2200      	movs	r2, #0
 80031d8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2200      	movs	r2, #0
 80031e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 80031e4:	bf00      	nop
 80031e6:	3714      	adds	r7, #20
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr
 80031f0:	fffffc90 	.word	0xfffffc90

080031f4 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b084      	sub	sp, #16
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	60f8      	str	r0, [r7, #12]
 80031fc:	60b9      	str	r1, [r7, #8]
 80031fe:	603b      	str	r3, [r7, #0]
 8003200:	4613      	mov	r3, r2
 8003202:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8003204:	e010      	b.n	8003228 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003206:	f7fd f8e9 	bl	80003dc <HAL_GetTick>
 800320a:	4602      	mov	r2, r0
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	1ad2      	subs	r2, r2, r3
 8003210:	69bb      	ldr	r3, [r7, #24]
 8003212:	429a      	cmp	r2, r3
 8003214:	d303      	bcc.n	800321e <SPI_WaitOnFlagUntilTimeout+0x2a>
 8003216:	69bb      	ldr	r3, [r7, #24]
 8003218:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800321c:	d102      	bne.n	8003224 <SPI_WaitOnFlagUntilTimeout+0x30>
 800321e:	69bb      	ldr	r3, [r7, #24]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d101      	bne.n	8003228 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8003224:	2303      	movs	r3, #3
 8003226:	e00f      	b.n	8003248 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	695a      	ldr	r2, [r3, #20]
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	401a      	ands	r2, r3
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	429a      	cmp	r2, r3
 8003236:	bf0c      	ite	eq
 8003238:	2301      	moveq	r3, #1
 800323a:	2300      	movne	r3, #0
 800323c:	b2db      	uxtb	r3, r3
 800323e:	461a      	mov	r2, r3
 8003240:	79fb      	ldrb	r3, [r7, #7]
 8003242:	429a      	cmp	r2, r3
 8003244:	d0df      	beq.n	8003206 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8003246:	2300      	movs	r3, #0
}
 8003248:	4618      	mov	r0, r3
 800324a:	3710      	adds	r7, #16
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}

08003250 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8003250:	b480      	push	{r7}
 8003252:	b085      	sub	sp, #20
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800325c:	095b      	lsrs	r3, r3, #5
 800325e:	3301      	adds	r3, #1
 8003260:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	68db      	ldr	r3, [r3, #12]
 8003266:	3301      	adds	r3, #1
 8003268:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	3307      	adds	r3, #7
 800326e:	08db      	lsrs	r3, r3, #3
 8003270:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	68fa      	ldr	r2, [r7, #12]
 8003276:	fb02 f303 	mul.w	r3, r2, r3
}
 800327a:	4618      	mov	r0, r3
 800327c:	3714      	adds	r7, #20
 800327e:	46bd      	mov	sp, r7
 8003280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003284:	4770      	bx	lr

08003286 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003286:	b580      	push	{r7, lr}
 8003288:	b082      	sub	sp, #8
 800328a:	af00      	add	r7, sp, #0
 800328c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d101      	bne.n	8003298 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	e01d      	b.n	80032d4 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800329e:	b2db      	uxtb	r3, r3
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d106      	bne.n	80032b2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2200      	movs	r2, #0
 80032a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80032ac:	6878      	ldr	r0, [r7, #4]
 80032ae:	f000 fff7 	bl	80042a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2202      	movs	r2, #2
 80032b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	3304      	adds	r3, #4
 80032c2:	4619      	mov	r1, r3
 80032c4:	4610      	mov	r0, r2
 80032c6:	f000 fa4b 	bl	8003760 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2201      	movs	r2, #1
 80032ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80032d2:	2300      	movs	r3, #0
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	3708      	adds	r7, #8
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}

080032dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80032dc:	b480      	push	{r7}
 80032de:	b085      	sub	sp, #20
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	687a      	ldr	r2, [r7, #4]
 80032ea:	6812      	ldr	r2, [r2, #0]
 80032ec:	68d2      	ldr	r2, [r2, #12]
 80032ee:	f042 0201 	orr.w	r2, r2, #1
 80032f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	689a      	ldr	r2, [r3, #8]
 80032fa:	4b0c      	ldr	r3, [pc, #48]	; (800332c <HAL_TIM_Base_Start_IT+0x50>)
 80032fc:	4013      	ands	r3, r2
 80032fe:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2b06      	cmp	r3, #6
 8003304:	d00b      	beq.n	800331e <HAL_TIM_Base_Start_IT+0x42>
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800330c:	d007      	beq.n	800331e <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	687a      	ldr	r2, [r7, #4]
 8003314:	6812      	ldr	r2, [r2, #0]
 8003316:	6812      	ldr	r2, [r2, #0]
 8003318:	f042 0201 	orr.w	r2, r2, #1
 800331c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800331e:	2300      	movs	r3, #0
}
 8003320:	4618      	mov	r0, r3
 8003322:	3714      	adds	r7, #20
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr
 800332c:	00010007 	.word	0x00010007

08003330 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b082      	sub	sp, #8
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	691b      	ldr	r3, [r3, #16]
 800333e:	f003 0302 	and.w	r3, r3, #2
 8003342:	2b02      	cmp	r3, #2
 8003344:	d122      	bne.n	800338c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	f003 0302 	and.w	r3, r3, #2
 8003350:	2b02      	cmp	r3, #2
 8003352:	d11b      	bne.n	800338c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f06f 0202 	mvn.w	r2, #2
 800335c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2201      	movs	r2, #1
 8003362:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	699b      	ldr	r3, [r3, #24]
 800336a:	f003 0303 	and.w	r3, r3, #3
 800336e:	2b00      	cmp	r3, #0
 8003370:	d003      	beq.n	800337a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f000 f9d6 	bl	8003724 <HAL_TIM_IC_CaptureCallback>
 8003378:	e005      	b.n	8003386 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f000 f9c8 	bl	8003710 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003380:	6878      	ldr	r0, [r7, #4]
 8003382:	f000 f9d9 	bl	8003738 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2200      	movs	r2, #0
 800338a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	691b      	ldr	r3, [r3, #16]
 8003392:	f003 0304 	and.w	r3, r3, #4
 8003396:	2b04      	cmp	r3, #4
 8003398:	d122      	bne.n	80033e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	68db      	ldr	r3, [r3, #12]
 80033a0:	f003 0304 	and.w	r3, r3, #4
 80033a4:	2b04      	cmp	r3, #4
 80033a6:	d11b      	bne.n	80033e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f06f 0204 	mvn.w	r2, #4
 80033b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2202      	movs	r2, #2
 80033b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	699b      	ldr	r3, [r3, #24]
 80033be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d003      	beq.n	80033ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f000 f9ac 	bl	8003724 <HAL_TIM_IC_CaptureCallback>
 80033cc:	e005      	b.n	80033da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	f000 f99e 	bl	8003710 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033d4:	6878      	ldr	r0, [r7, #4]
 80033d6:	f000 f9af 	bl	8003738 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2200      	movs	r2, #0
 80033de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	691b      	ldr	r3, [r3, #16]
 80033e6:	f003 0308 	and.w	r3, r3, #8
 80033ea:	2b08      	cmp	r3, #8
 80033ec:	d122      	bne.n	8003434 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	68db      	ldr	r3, [r3, #12]
 80033f4:	f003 0308 	and.w	r3, r3, #8
 80033f8:	2b08      	cmp	r3, #8
 80033fa:	d11b      	bne.n	8003434 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f06f 0208 	mvn.w	r2, #8
 8003404:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2204      	movs	r2, #4
 800340a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	69db      	ldr	r3, [r3, #28]
 8003412:	f003 0303 	and.w	r3, r3, #3
 8003416:	2b00      	cmp	r3, #0
 8003418:	d003      	beq.n	8003422 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f000 f982 	bl	8003724 <HAL_TIM_IC_CaptureCallback>
 8003420:	e005      	b.n	800342e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f000 f974 	bl	8003710 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	f000 f985 	bl	8003738 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2200      	movs	r2, #0
 8003432:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	691b      	ldr	r3, [r3, #16]
 800343a:	f003 0310 	and.w	r3, r3, #16
 800343e:	2b10      	cmp	r3, #16
 8003440:	d122      	bne.n	8003488 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	68db      	ldr	r3, [r3, #12]
 8003448:	f003 0310 	and.w	r3, r3, #16
 800344c:	2b10      	cmp	r3, #16
 800344e:	d11b      	bne.n	8003488 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f06f 0210 	mvn.w	r2, #16
 8003458:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2208      	movs	r2, #8
 800345e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	69db      	ldr	r3, [r3, #28]
 8003466:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800346a:	2b00      	cmp	r3, #0
 800346c:	d003      	beq.n	8003476 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f000 f958 	bl	8003724 <HAL_TIM_IC_CaptureCallback>
 8003474:	e005      	b.n	8003482 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f000 f94a 	bl	8003710 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	f000 f95b 	bl	8003738 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2200      	movs	r2, #0
 8003486:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	691b      	ldr	r3, [r3, #16]
 800348e:	f003 0301 	and.w	r3, r3, #1
 8003492:	2b01      	cmp	r3, #1
 8003494:	d10e      	bne.n	80034b4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	68db      	ldr	r3, [r3, #12]
 800349c:	f003 0301 	and.w	r3, r3, #1
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d107      	bne.n	80034b4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f06f 0201 	mvn.w	r2, #1
 80034ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f000 fbbc 	bl	8003c2c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	691b      	ldr	r3, [r3, #16]
 80034ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034be:	2b80      	cmp	r3, #128	; 0x80
 80034c0:	d10e      	bne.n	80034e0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034cc:	2b80      	cmp	r3, #128	; 0x80
 80034ce:	d107      	bne.n	80034e0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80034d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f000 fade 	bl	8003a9c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	691b      	ldr	r3, [r3, #16]
 80034e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034ee:	d10e      	bne.n	800350e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	68db      	ldr	r3, [r3, #12]
 80034f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034fa:	2b80      	cmp	r3, #128	; 0x80
 80034fc:	d107      	bne.n	800350e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003506:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003508:	6878      	ldr	r0, [r7, #4]
 800350a:	f000 fad1 	bl	8003ab0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	691b      	ldr	r3, [r3, #16]
 8003514:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003518:	2b40      	cmp	r3, #64	; 0x40
 800351a:	d10e      	bne.n	800353a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	68db      	ldr	r3, [r3, #12]
 8003522:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003526:	2b40      	cmp	r3, #64	; 0x40
 8003528:	d107      	bne.n	800353a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003532:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003534:	6878      	ldr	r0, [r7, #4]
 8003536:	f000 f909 	bl	800374c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	691b      	ldr	r3, [r3, #16]
 8003540:	f003 0320 	and.w	r3, r3, #32
 8003544:	2b20      	cmp	r3, #32
 8003546:	d10e      	bne.n	8003566 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	68db      	ldr	r3, [r3, #12]
 800354e:	f003 0320 	and.w	r3, r3, #32
 8003552:	2b20      	cmp	r3, #32
 8003554:	d107      	bne.n	8003566 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f06f 0220 	mvn.w	r2, #32
 800355e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003560:	6878      	ldr	r0, [r7, #4]
 8003562:	f000 fa91 	bl	8003a88 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003566:	bf00      	nop
 8003568:	3708      	adds	r7, #8
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}
	...

08003570 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b084      	sub	sp, #16
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
 8003578:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003580:	2b01      	cmp	r3, #1
 8003582:	d101      	bne.n	8003588 <HAL_TIM_ConfigClockSource+0x18>
 8003584:	2302      	movs	r3, #2
 8003586:	e0b7      	b.n	80036f8 <HAL_TIM_ConfigClockSource+0x188>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2201      	movs	r2, #1
 800358c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2202      	movs	r2, #2
 8003594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80035a0:	68fa      	ldr	r2, [r7, #12]
 80035a2:	4b57      	ldr	r3, [pc, #348]	; (8003700 <HAL_TIM_ConfigClockSource+0x190>)
 80035a4:	4013      	ands	r3, r2
 80035a6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80035ae:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	68fa      	ldr	r2, [r7, #12]
 80035b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	2b70      	cmp	r3, #112	; 0x70
 80035be:	d02e      	beq.n	800361e <HAL_TIM_ConfigClockSource+0xae>
 80035c0:	2b70      	cmp	r3, #112	; 0x70
 80035c2:	d812      	bhi.n	80035ea <HAL_TIM_ConfigClockSource+0x7a>
 80035c4:	2b30      	cmp	r3, #48	; 0x30
 80035c6:	f000 8084 	beq.w	80036d2 <HAL_TIM_ConfigClockSource+0x162>
 80035ca:	2b30      	cmp	r3, #48	; 0x30
 80035cc:	d806      	bhi.n	80035dc <HAL_TIM_ConfigClockSource+0x6c>
 80035ce:	2b10      	cmp	r3, #16
 80035d0:	d07f      	beq.n	80036d2 <HAL_TIM_ConfigClockSource+0x162>
 80035d2:	2b20      	cmp	r3, #32
 80035d4:	d07d      	beq.n	80036d2 <HAL_TIM_ConfigClockSource+0x162>
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d07b      	beq.n	80036d2 <HAL_TIM_ConfigClockSource+0x162>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80035da:	e084      	b.n	80036e6 <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 80035dc:	2b50      	cmp	r3, #80	; 0x50
 80035de:	d048      	beq.n	8003672 <HAL_TIM_ConfigClockSource+0x102>
 80035e0:	2b60      	cmp	r3, #96	; 0x60
 80035e2:	d056      	beq.n	8003692 <HAL_TIM_ConfigClockSource+0x122>
 80035e4:	2b40      	cmp	r3, #64	; 0x40
 80035e6:	d064      	beq.n	80036b2 <HAL_TIM_ConfigClockSource+0x142>
      break;
 80035e8:	e07d      	b.n	80036e6 <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 80035ea:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80035ee:	d070      	beq.n	80036d2 <HAL_TIM_ConfigClockSource+0x162>
 80035f0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80035f4:	d809      	bhi.n	800360a <HAL_TIM_ConfigClockSource+0x9a>
 80035f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035fa:	d027      	beq.n	800364c <HAL_TIM_ConfigClockSource+0xdc>
 80035fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003600:	d067      	beq.n	80036d2 <HAL_TIM_ConfigClockSource+0x162>
 8003602:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003606:	d06d      	beq.n	80036e4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003608:	e06d      	b.n	80036e6 <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 800360a:	4a3e      	ldr	r2, [pc, #248]	; (8003704 <HAL_TIM_ConfigClockSource+0x194>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d060      	beq.n	80036d2 <HAL_TIM_ConfigClockSource+0x162>
 8003610:	4a3d      	ldr	r2, [pc, #244]	; (8003708 <HAL_TIM_ConfigClockSource+0x198>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d05d      	beq.n	80036d2 <HAL_TIM_ConfigClockSource+0x162>
 8003616:	4a3d      	ldr	r2, [pc, #244]	; (800370c <HAL_TIM_ConfigClockSource+0x19c>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d05a      	beq.n	80036d2 <HAL_TIM_ConfigClockSource+0x162>
      break;
 800361c:	e063      	b.n	80036e6 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6818      	ldr	r0, [r3, #0]
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	6899      	ldr	r1, [r3, #8]
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	685a      	ldr	r2, [r3, #4]
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	68db      	ldr	r3, [r3, #12]
 800362e:	f000 f9af 	bl	8003990 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003640:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	68fa      	ldr	r2, [r7, #12]
 8003648:	609a      	str	r2, [r3, #8]
      break;
 800364a:	e04c      	b.n	80036e6 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6818      	ldr	r0, [r3, #0]
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	6899      	ldr	r1, [r3, #8]
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	685a      	ldr	r2, [r3, #4]
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	68db      	ldr	r3, [r3, #12]
 800365c:	f000 f998 	bl	8003990 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	687a      	ldr	r2, [r7, #4]
 8003666:	6812      	ldr	r2, [r2, #0]
 8003668:	6892      	ldr	r2, [r2, #8]
 800366a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800366e:	609a      	str	r2, [r3, #8]
      break;
 8003670:	e039      	b.n	80036e6 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6818      	ldr	r0, [r3, #0]
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	6859      	ldr	r1, [r3, #4]
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	68db      	ldr	r3, [r3, #12]
 800367e:	461a      	mov	r2, r3
 8003680:	f000 f908 	bl	8003894 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	2150      	movs	r1, #80	; 0x50
 800368a:	4618      	mov	r0, r3
 800368c:	f000 f962 	bl	8003954 <TIM_ITRx_SetConfig>
      break;
 8003690:	e029      	b.n	80036e6 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6818      	ldr	r0, [r3, #0]
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	6859      	ldr	r1, [r3, #4]
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	68db      	ldr	r3, [r3, #12]
 800369e:	461a      	mov	r2, r3
 80036a0:	f000 f927 	bl	80038f2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	2160      	movs	r1, #96	; 0x60
 80036aa:	4618      	mov	r0, r3
 80036ac:	f000 f952 	bl	8003954 <TIM_ITRx_SetConfig>
      break;
 80036b0:	e019      	b.n	80036e6 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6818      	ldr	r0, [r3, #0]
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	6859      	ldr	r1, [r3, #4]
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	68db      	ldr	r3, [r3, #12]
 80036be:	461a      	mov	r2, r3
 80036c0:	f000 f8e8 	bl	8003894 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	2140      	movs	r1, #64	; 0x40
 80036ca:	4618      	mov	r0, r3
 80036cc:	f000 f942 	bl	8003954 <TIM_ITRx_SetConfig>
      break;
 80036d0:	e009      	b.n	80036e6 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4619      	mov	r1, r3
 80036dc:	4610      	mov	r0, r2
 80036de:	f000 f939 	bl	8003954 <TIM_ITRx_SetConfig>
      break;
 80036e2:	e000      	b.n	80036e6 <HAL_TIM_ConfigClockSource+0x176>
      break;
 80036e4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2201      	movs	r2, #1
 80036ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2200      	movs	r2, #0
 80036f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80036f6:	2300      	movs	r3, #0
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	3710      	adds	r7, #16
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}
 8003700:	ffceff88 	.word	0xffceff88
 8003704:	00100030 	.word	0x00100030
 8003708:	00100040 	.word	0x00100040
 800370c:	00100020 	.word	0x00100020

08003710 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003710:	b480      	push	{r7}
 8003712:	b083      	sub	sp, #12
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003718:	bf00      	nop
 800371a:	370c      	adds	r7, #12
 800371c:	46bd      	mov	sp, r7
 800371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003722:	4770      	bx	lr

08003724 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003724:	b480      	push	{r7}
 8003726:	b083      	sub	sp, #12
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800372c:	bf00      	nop
 800372e:	370c      	adds	r7, #12
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr

08003738 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003738:	b480      	push	{r7}
 800373a:	b083      	sub	sp, #12
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003740:	bf00      	nop
 8003742:	370c      	adds	r7, #12
 8003744:	46bd      	mov	sp, r7
 8003746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374a:	4770      	bx	lr

0800374c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800374c:	b480      	push	{r7}
 800374e:	b083      	sub	sp, #12
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003754:	bf00      	nop
 8003756:	370c      	adds	r7, #12
 8003758:	46bd      	mov	sp, r7
 800375a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375e:	4770      	bx	lr

08003760 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003760:	b480      	push	{r7}
 8003762:	b085      	sub	sp, #20
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
 8003768:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	4a40      	ldr	r2, [pc, #256]	; (8003874 <TIM_Base_SetConfig+0x114>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d013      	beq.n	80037a0 <TIM_Base_SetConfig+0x40>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800377e:	d00f      	beq.n	80037a0 <TIM_Base_SetConfig+0x40>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	4a3d      	ldr	r2, [pc, #244]	; (8003878 <TIM_Base_SetConfig+0x118>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d00b      	beq.n	80037a0 <TIM_Base_SetConfig+0x40>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	4a3c      	ldr	r2, [pc, #240]	; (800387c <TIM_Base_SetConfig+0x11c>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d007      	beq.n	80037a0 <TIM_Base_SetConfig+0x40>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	4a3b      	ldr	r2, [pc, #236]	; (8003880 <TIM_Base_SetConfig+0x120>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d003      	beq.n	80037a0 <TIM_Base_SetConfig+0x40>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	4a3a      	ldr	r2, [pc, #232]	; (8003884 <TIM_Base_SetConfig+0x124>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d108      	bne.n	80037b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	68fa      	ldr	r2, [r7, #12]
 80037ae:	4313      	orrs	r3, r2
 80037b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	4a2f      	ldr	r2, [pc, #188]	; (8003874 <TIM_Base_SetConfig+0x114>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d01f      	beq.n	80037fa <TIM_Base_SetConfig+0x9a>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037c0:	d01b      	beq.n	80037fa <TIM_Base_SetConfig+0x9a>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	4a2c      	ldr	r2, [pc, #176]	; (8003878 <TIM_Base_SetConfig+0x118>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d017      	beq.n	80037fa <TIM_Base_SetConfig+0x9a>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	4a2b      	ldr	r2, [pc, #172]	; (800387c <TIM_Base_SetConfig+0x11c>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d013      	beq.n	80037fa <TIM_Base_SetConfig+0x9a>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	4a2a      	ldr	r2, [pc, #168]	; (8003880 <TIM_Base_SetConfig+0x120>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d00f      	beq.n	80037fa <TIM_Base_SetConfig+0x9a>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	4a29      	ldr	r2, [pc, #164]	; (8003884 <TIM_Base_SetConfig+0x124>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d00b      	beq.n	80037fa <TIM_Base_SetConfig+0x9a>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	4a28      	ldr	r2, [pc, #160]	; (8003888 <TIM_Base_SetConfig+0x128>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d007      	beq.n	80037fa <TIM_Base_SetConfig+0x9a>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	4a27      	ldr	r2, [pc, #156]	; (800388c <TIM_Base_SetConfig+0x12c>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d003      	beq.n	80037fa <TIM_Base_SetConfig+0x9a>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	4a26      	ldr	r2, [pc, #152]	; (8003890 <TIM_Base_SetConfig+0x130>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d108      	bne.n	800380c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003800:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	68db      	ldr	r3, [r3, #12]
 8003806:	68fa      	ldr	r2, [r7, #12]
 8003808:	4313      	orrs	r3, r2
 800380a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	695b      	ldr	r3, [r3, #20]
 8003816:	4313      	orrs	r3, r2
 8003818:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	68fa      	ldr	r2, [r7, #12]
 800381e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	689a      	ldr	r2, [r3, #8]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	4a10      	ldr	r2, [pc, #64]	; (8003874 <TIM_Base_SetConfig+0x114>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d00f      	beq.n	8003858 <TIM_Base_SetConfig+0xf8>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	4a12      	ldr	r2, [pc, #72]	; (8003884 <TIM_Base_SetConfig+0x124>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d00b      	beq.n	8003858 <TIM_Base_SetConfig+0xf8>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	4a11      	ldr	r2, [pc, #68]	; (8003888 <TIM_Base_SetConfig+0x128>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d007      	beq.n	8003858 <TIM_Base_SetConfig+0xf8>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	4a10      	ldr	r2, [pc, #64]	; (800388c <TIM_Base_SetConfig+0x12c>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d003      	beq.n	8003858 <TIM_Base_SetConfig+0xf8>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	4a0f      	ldr	r2, [pc, #60]	; (8003890 <TIM_Base_SetConfig+0x130>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d103      	bne.n	8003860 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	691a      	ldr	r2, [r3, #16]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2201      	movs	r2, #1
 8003864:	615a      	str	r2, [r3, #20]
}
 8003866:	bf00      	nop
 8003868:	3714      	adds	r7, #20
 800386a:	46bd      	mov	sp, r7
 800386c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003870:	4770      	bx	lr
 8003872:	bf00      	nop
 8003874:	40010000 	.word	0x40010000
 8003878:	40000400 	.word	0x40000400
 800387c:	40000800 	.word	0x40000800
 8003880:	40000c00 	.word	0x40000c00
 8003884:	40010400 	.word	0x40010400
 8003888:	40014000 	.word	0x40014000
 800388c:	40014400 	.word	0x40014400
 8003890:	40014800 	.word	0x40014800

08003894 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003894:	b480      	push	{r7}
 8003896:	b087      	sub	sp, #28
 8003898:	af00      	add	r7, sp, #0
 800389a:	60f8      	str	r0, [r7, #12]
 800389c:	60b9      	str	r1, [r7, #8]
 800389e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	6a1b      	ldr	r3, [r3, #32]
 80038a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	6a1b      	ldr	r3, [r3, #32]
 80038aa:	f023 0201 	bic.w	r2, r3, #1
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	699b      	ldr	r3, [r3, #24]
 80038b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80038be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	011b      	lsls	r3, r3, #4
 80038c4:	693a      	ldr	r2, [r7, #16]
 80038c6:	4313      	orrs	r3, r2
 80038c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	f023 030a 	bic.w	r3, r3, #10
 80038d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80038d2:	697a      	ldr	r2, [r7, #20]
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	4313      	orrs	r3, r2
 80038d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	693a      	ldr	r2, [r7, #16]
 80038de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	697a      	ldr	r2, [r7, #20]
 80038e4:	621a      	str	r2, [r3, #32]
}
 80038e6:	bf00      	nop
 80038e8:	371c      	adds	r7, #28
 80038ea:	46bd      	mov	sp, r7
 80038ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f0:	4770      	bx	lr

080038f2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038f2:	b480      	push	{r7}
 80038f4:	b087      	sub	sp, #28
 80038f6:	af00      	add	r7, sp, #0
 80038f8:	60f8      	str	r0, [r7, #12]
 80038fa:	60b9      	str	r1, [r7, #8]
 80038fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	6a1b      	ldr	r3, [r3, #32]
 8003902:	f023 0210 	bic.w	r2, r3, #16
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	699b      	ldr	r3, [r3, #24]
 800390e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	6a1b      	ldr	r3, [r3, #32]
 8003914:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800391c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	031b      	lsls	r3, r3, #12
 8003922:	697a      	ldr	r2, [r7, #20]
 8003924:	4313      	orrs	r3, r2
 8003926:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800392e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	011b      	lsls	r3, r3, #4
 8003934:	693a      	ldr	r2, [r7, #16]
 8003936:	4313      	orrs	r3, r2
 8003938:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	697a      	ldr	r2, [r7, #20]
 800393e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	693a      	ldr	r2, [r7, #16]
 8003944:	621a      	str	r2, [r3, #32]
}
 8003946:	bf00      	nop
 8003948:	371c      	adds	r7, #28
 800394a:	46bd      	mov	sp, r7
 800394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003950:	4770      	bx	lr
	...

08003954 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_ITR7: Internal Trigger 7
  *            @arg TIM_TS_ITR8: Internal Trigger 8
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003954:	b480      	push	{r7}
 8003956:	b085      	sub	sp, #20
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
 800395c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003964:	68fa      	ldr	r2, [r7, #12]
 8003966:	4b09      	ldr	r3, [pc, #36]	; (800398c <TIM_ITRx_SetConfig+0x38>)
 8003968:	4013      	ands	r3, r2
 800396a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800396c:	683a      	ldr	r2, [r7, #0]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	4313      	orrs	r3, r2
 8003972:	f043 0307 	orr.w	r3, r3, #7
 8003976:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	68fa      	ldr	r2, [r7, #12]
 800397c:	609a      	str	r2, [r3, #8]
}
 800397e:	bf00      	nop
 8003980:	3714      	adds	r7, #20
 8003982:	46bd      	mov	sp, r7
 8003984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003988:	4770      	bx	lr
 800398a:	bf00      	nop
 800398c:	ffcfff8f 	.word	0xffcfff8f

08003990 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003990:	b480      	push	{r7}
 8003992:	b087      	sub	sp, #28
 8003994:	af00      	add	r7, sp, #0
 8003996:	60f8      	str	r0, [r7, #12]
 8003998:	60b9      	str	r1, [r7, #8]
 800399a:	607a      	str	r2, [r7, #4]
 800399c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80039aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	021a      	lsls	r2, r3, #8
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	431a      	orrs	r2, r3
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	4313      	orrs	r3, r2
 80039b8:	697a      	ldr	r2, [r7, #20]
 80039ba:	4313      	orrs	r3, r2
 80039bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	697a      	ldr	r2, [r7, #20]
 80039c2:	609a      	str	r2, [r3, #8]
}
 80039c4:	bf00      	nop
 80039c6:	371c      	adds	r7, #28
 80039c8:	46bd      	mov	sp, r7
 80039ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ce:	4770      	bx	lr

080039d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b085      	sub	sp, #20
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
 80039d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	d101      	bne.n	80039e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80039e4:	2302      	movs	r3, #2
 80039e6:	e045      	b.n	8003a74 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2201      	movs	r2, #1
 80039ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2202      	movs	r2, #2
 80039f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a1c      	ldr	r2, [pc, #112]	; (8003a80 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d004      	beq.n	8003a1c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a1b      	ldr	r2, [pc, #108]	; (8003a84 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d108      	bne.n	8003a2e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003a22:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	68fa      	ldr	r2, [r7, #12]
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a34:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	68fa      	ldr	r2, [r7, #12]
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a46:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	68ba      	ldr	r2, [r7, #8]
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	68fa      	ldr	r2, [r7, #12]
 8003a58:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	68ba      	ldr	r2, [r7, #8]
 8003a60:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2201      	movs	r2, #1
 8003a66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a72:	2300      	movs	r3, #0
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	3714      	adds	r7, #20
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr
 8003a80:	40010000 	.word	0x40010000
 8003a84:	40010400 	.word	0x40010400

08003a88 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b083      	sub	sp, #12
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003a90:	bf00      	nop
 8003a92:	370c      	adds	r7, #12
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr

08003a9c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b083      	sub	sp, #12
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003aa4:	bf00      	nop
 8003aa6:	370c      	adds	r7, #12
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aae:	4770      	bx	lr

08003ab0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b083      	sub	sp, #12
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003ab8:	bf00      	nop
 8003aba:	370c      	adds	r7, #12
 8003abc:	46bd      	mov	sp, r7
 8003abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac2:	4770      	bx	lr

08003ac4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b08a      	sub	sp, #40	; 0x28
 8003ac8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003aca:	f107 0314 	add.w	r3, r7, #20
 8003ace:	2200      	movs	r2, #0
 8003ad0:	601a      	str	r2, [r3, #0]
 8003ad2:	605a      	str	r2, [r3, #4]
 8003ad4:	609a      	str	r2, [r3, #8]
 8003ad6:	60da      	str	r2, [r3, #12]
 8003ad8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003ada:	4a45      	ldr	r2, [pc, #276]	; (8003bf0 <MX_GPIO_Init+0x12c>)
 8003adc:	4b44      	ldr	r3, [pc, #272]	; (8003bf0 <MX_GPIO_Init+0x12c>)
 8003ade:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003ae2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ae6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003aea:	4b41      	ldr	r3, [pc, #260]	; (8003bf0 <MX_GPIO_Init+0x12c>)
 8003aec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003af0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003af4:	613b      	str	r3, [r7, #16]
 8003af6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003af8:	4a3d      	ldr	r2, [pc, #244]	; (8003bf0 <MX_GPIO_Init+0x12c>)
 8003afa:	4b3d      	ldr	r3, [pc, #244]	; (8003bf0 <MX_GPIO_Init+0x12c>)
 8003afc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b00:	f043 0301 	orr.w	r3, r3, #1
 8003b04:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003b08:	4b39      	ldr	r3, [pc, #228]	; (8003bf0 <MX_GPIO_Init+0x12c>)
 8003b0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b0e:	f003 0301 	and.w	r3, r3, #1
 8003b12:	60fb      	str	r3, [r7, #12]
 8003b14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b16:	4a36      	ldr	r2, [pc, #216]	; (8003bf0 <MX_GPIO_Init+0x12c>)
 8003b18:	4b35      	ldr	r3, [pc, #212]	; (8003bf0 <MX_GPIO_Init+0x12c>)
 8003b1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b1e:	f043 0302 	orr.w	r3, r3, #2
 8003b22:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003b26:	4b32      	ldr	r3, [pc, #200]	; (8003bf0 <MX_GPIO_Init+0x12c>)
 8003b28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b2c:	f003 0302 	and.w	r3, r3, #2
 8003b30:	60bb      	str	r3, [r7, #8]
 8003b32:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003b34:	4a2e      	ldr	r2, [pc, #184]	; (8003bf0 <MX_GPIO_Init+0x12c>)
 8003b36:	4b2e      	ldr	r3, [pc, #184]	; (8003bf0 <MX_GPIO_Init+0x12c>)
 8003b38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b3c:	f043 0308 	orr.w	r3, r3, #8
 8003b40:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003b44:	4b2a      	ldr	r3, [pc, #168]	; (8003bf0 <MX_GPIO_Init+0x12c>)
 8003b46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b4a:	f003 0308 	and.w	r3, r3, #8
 8003b4e:	607b      	str	r3, [r7, #4]
 8003b50:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8003b52:	2200      	movs	r2, #0
 8003b54:	f244 0181 	movw	r1, #16513	; 0x4081
 8003b58:	4826      	ldr	r0, [pc, #152]	; (8003bf4 <MX_GPIO_Init+0x130>)
 8003b5a:	f7fc ff15 	bl	8000988 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 8003b5e:	2201      	movs	r2, #1
 8003b60:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003b64:	4824      	ldr	r0, [pc, #144]	; (8003bf8 <MX_GPIO_Init+0x134>)
 8003b66:	f7fc ff0f 	bl	8000988 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = INT_Pin;
 8003b6a:	2308      	movs	r3, #8
 8003b6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003b6e:	4b23      	ldr	r3, [pc, #140]	; (8003bfc <MX_GPIO_Init+0x138>)
 8003b70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b72:	2300      	movs	r3, #0
 8003b74:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INT_GPIO_Port, &GPIO_InitStruct);
 8003b76:	f107 0314 	add.w	r3, r7, #20
 8003b7a:	4619      	mov	r1, r3
 8003b7c:	4820      	ldr	r0, [pc, #128]	; (8003c00 <MX_GPIO_Init+0x13c>)
 8003b7e:	f7fc fd53 	bl	8000628 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003b82:	2380      	movs	r3, #128	; 0x80
 8003b84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003b86:	2303      	movs	r3, #3
 8003b88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b8e:	f107 0314 	add.w	r3, r7, #20
 8003b92:	4619      	mov	r1, r3
 8003b94:	481a      	ldr	r0, [pc, #104]	; (8003c00 <MX_GPIO_Init+0x13c>)
 8003b96:	f7fc fd47 	bl	8000628 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8003b9a:	f244 0381 	movw	r3, #16513	; 0x4081
 8003b9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003bac:	f107 0314 	add.w	r3, r7, #20
 8003bb0:	4619      	mov	r1, r3
 8003bb2:	4810      	ldr	r0, [pc, #64]	; (8003bf4 <MX_GPIO_Init+0x130>)
 8003bb4:	f7fc fd38 	bl	8000628 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 8003bb8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003bbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8003bca:	f107 0314 	add.w	r3, r7, #20
 8003bce:	4619      	mov	r1, r3
 8003bd0:	4809      	ldr	r0, [pc, #36]	; (8003bf8 <MX_GPIO_Init+0x134>)
 8003bd2:	f7fc fd29 	bl	8000628 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	2100      	movs	r1, #0
 8003bda:	2009      	movs	r0, #9
 8003bdc:	f7fc fcef 	bl	80005be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8003be0:	2009      	movs	r0, #9
 8003be2:	f7fc fd06 	bl	80005f2 <HAL_NVIC_EnableIRQ>

}
 8003be6:	bf00      	nop
 8003be8:	3728      	adds	r7, #40	; 0x28
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}
 8003bee:	bf00      	nop
 8003bf0:	58024400 	.word	0x58024400
 8003bf4:	58020400 	.word	0x58020400
 8003bf8:	58020c00 	.word	0x58020c00
 8003bfc:	11110000 	.word	0x11110000
 8003c00:	58020000 	.word	0x58020000

08003c04 <HAL_GPIO_EXTI_Callback>:
uint16_t reg;
char _100_msec;
char int_pin;
void SystemClock_Config(void);

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8003c04:	b480      	push	{r7}
 8003c06:	b083      	sub	sp, #12
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	80fb      	strh	r3, [r7, #6]
	if( GPIO_Pin == INT_Pin ) {
 8003c0e:	88fb      	ldrh	r3, [r7, #6]
 8003c10:	2b08      	cmp	r3, #8
 8003c12:	d102      	bne.n	8003c1a <HAL_GPIO_EXTI_Callback+0x16>
		int_pin = 1;
 8003c14:	4b04      	ldr	r3, [pc, #16]	; (8003c28 <HAL_GPIO_EXTI_Callback+0x24>)
 8003c16:	2201      	movs	r2, #1
 8003c18:	701a      	strb	r2, [r3, #0]
	}
}
 8003c1a:	bf00      	nop
 8003c1c:	370c      	adds	r7, #12
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c24:	4770      	bx	lr
 8003c26:	bf00      	nop
 8003c28:	20000078 	.word	0x20000078

08003c2c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8003c2c:	b480      	push	{r7}
 8003c2e:	b083      	sub	sp, #12
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM1){
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a08      	ldr	r2, [pc, #32]	; (8003c5c <HAL_TIM_PeriodElapsedCallback+0x30>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d108      	bne.n	8003c50 <HAL_TIM_PeriodElapsedCallback+0x24>
		counter++;
 8003c3e:	4b08      	ldr	r3, [pc, #32]	; (8003c60 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8003c40:	781b      	ldrb	r3, [r3, #0]
 8003c42:	3301      	adds	r3, #1
 8003c44:	b2da      	uxtb	r2, r3
 8003c46:	4b06      	ldr	r3, [pc, #24]	; (8003c60 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8003c48:	701a      	strb	r2, [r3, #0]
//		if((counter % 10) == 0){
//			_1_sec = 1;
//		}
		_100_msec = 1;
 8003c4a:	4b06      	ldr	r3, [pc, #24]	; (8003c64 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	701a      	strb	r2, [r3, #0]
	}
}
 8003c50:	bf00      	nop
 8003c52:	370c      	adds	r7, #12
 8003c54:	46bd      	mov	sp, r7
 8003c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5a:	4770      	bx	lr
 8003c5c:	40010000 	.word	0x40010000
 8003c60:	20000036 	.word	0x20000036
 8003c64:	20000030 	.word	0x20000030

08003c68 <main>:

int main(void){
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	af00      	add	r7, sp, #0
	HAL_Init();
 8003c6c:	f7fc fb34 	bl	80002d8 <HAL_Init>

	SystemClock_Config();
 8003c70:	f000 f830 	bl	8003cd4 <SystemClock_Config>

	MX_GPIO_Init();
 8003c74:	f7ff ff26 	bl	8003ac4 <MX_GPIO_Init>
	MX_TIM1_Init();
 8003c78:	f000 fabe 	bl	80041f8 <MX_TIM1_Init>
	HAL_TIM_Base_Start_IT(&htim1);
 8003c7c:	4811      	ldr	r0, [pc, #68]	; (8003cc4 <main+0x5c>)
 8003c7e:	f7ff fb2d 	bl	80032dc <HAL_TIM_Base_Start_IT>
	MX_SPI1_Init();
 8003c82:	f000 f8df 	bl	8003e44 <MX_SPI1_Init>

//	AS5050A_SPI_Write (0x3FF8, 0x0001);
//	AS5050A_SPI_Read_2Byte(0x3F22);
//	AS5050A_SPI_Read_2Byte(0x3FF8);
//	AS5050A_SPI_Read_2Byte(0x3380);
	AS5050A_SPI_Read_2Byte(SPI_ANGULAR_DATA_REG);
 8003c86:	f643 70ff 	movw	r0, #16383	; 0x3fff
 8003c8a:	f000 f99d 	bl	8003fc8 <AS5050A_SPI_Read_2Byte>
//	 AS5050A_SPI_Read_2Byte(SPI_ERR_STATUS_REG);


	while (1){
		if(_100_msec == 1){
 8003c8e:	4b0e      	ldr	r3, [pc, #56]	; (8003cc8 <main+0x60>)
 8003c90:	781b      	ldrb	r3, [r3, #0]
 8003c92:	2b01      	cmp	r3, #1
 8003c94:	d10e      	bne.n	8003cb4 <main+0x4c>
			_100_msec = 0;
 8003c96:	4b0c      	ldr	r3, [pc, #48]	; (8003cc8 <main+0x60>)
 8003c98:	2200      	movs	r2, #0
 8003c9a:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8003c9c:	2101      	movs	r1, #1
 8003c9e:	480b      	ldr	r0, [pc, #44]	; (8003ccc <main+0x64>)
 8003ca0:	f7fc fe8b 	bl	80009ba <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8003ca4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003ca8:	4808      	ldr	r0, [pc, #32]	; (8003ccc <main+0x64>)
 8003caa:	f7fc fe86 	bl	80009ba <HAL_GPIO_TogglePin>
			int_pin = 1;
 8003cae:	4b08      	ldr	r3, [pc, #32]	; (8003cd0 <main+0x68>)
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	701a      	strb	r2, [r3, #0]

		}
		if(int_pin == 1){
 8003cb4:	4b06      	ldr	r3, [pc, #24]	; (8003cd0 <main+0x68>)
 8003cb6:	781b      	ldrb	r3, [r3, #0]
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	d1e8      	bne.n	8003c8e <main+0x26>
			int_pin = 0;
 8003cbc:	4b04      	ldr	r3, [pc, #16]	; (8003cd0 <main+0x68>)
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	701a      	strb	r2, [r3, #0]
		if(_100_msec == 1){
 8003cc2:	e7e4      	b.n	8003c8e <main+0x26>
 8003cc4:	20000038 	.word	0x20000038
 8003cc8:	20000030 	.word	0x20000030
 8003ccc:	58020400 	.word	0x58020400
 8003cd0:	20000078 	.word	0x20000078

08003cd4 <SystemClock_Config>:
//		HAL_Delay(100);

	}
}

void SystemClock_Config(void){
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b0cc      	sub	sp, #304	; 0x130
 8003cd8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003cda:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003cde:	224c      	movs	r2, #76	; 0x4c
 8003ce0:	2100      	movs	r1, #0
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f000 fb52 	bl	800438c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003ce8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003cec:	2220      	movs	r2, #32
 8003cee:	2100      	movs	r1, #0
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f000 fb4b 	bl	800438c <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003cf6:	f107 0308 	add.w	r3, r7, #8
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	23bc      	movs	r3, #188	; 0xbc
 8003cfe:	461a      	mov	r2, r3
 8003d00:	2100      	movs	r1, #0
 8003d02:	f000 fb43 	bl	800438c <memset>

	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8003d06:	2002      	movs	r0, #2
 8003d08:	f7fc fe8a 	bl	8000a20 <HAL_PWREx_ConfigSupply>
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8003d0c:	1d3b      	adds	r3, r7, #4
 8003d0e:	2200      	movs	r2, #0
 8003d10:	601a      	str	r2, [r3, #0]
 8003d12:	4a46      	ldr	r2, [pc, #280]	; (8003e2c <SystemClock_Config+0x158>)
 8003d14:	4b45      	ldr	r3, [pc, #276]	; (8003e2c <SystemClock_Config+0x158>)
 8003d16:	699b      	ldr	r3, [r3, #24]
 8003d18:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003d1c:	6193      	str	r3, [r2, #24]
 8003d1e:	4b43      	ldr	r3, [pc, #268]	; (8003e2c <SystemClock_Config+0x158>)
 8003d20:	699b      	ldr	r3, [r3, #24]
 8003d22:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8003d26:	1d3b      	adds	r3, r7, #4
 8003d28:	601a      	str	r2, [r3, #0]
 8003d2a:	4a41      	ldr	r2, [pc, #260]	; (8003e30 <SystemClock_Config+0x15c>)
 8003d2c:	4b40      	ldr	r3, [pc, #256]	; (8003e30 <SystemClock_Config+0x15c>)
 8003d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d30:	f043 0301 	orr.w	r3, r3, #1
 8003d34:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003d36:	4b3e      	ldr	r3, [pc, #248]	; (8003e30 <SystemClock_Config+0x15c>)
 8003d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d3a:	f003 0201 	and.w	r2, r3, #1
 8003d3e:	1d3b      	adds	r3, r7, #4
 8003d40:	601a      	str	r2, [r3, #0]
 8003d42:	1d3b      	adds	r3, r7, #4
 8003d44:	681b      	ldr	r3, [r3, #0]

	while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8003d46:	bf00      	nop
 8003d48:	4b38      	ldr	r3, [pc, #224]	; (8003e2c <SystemClock_Config+0x158>)
 8003d4a:	699b      	ldr	r3, [r3, #24]
 8003d4c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d54:	d1f8      	bne.n	8003d48 <SystemClock_Config+0x74>
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003d56:	2301      	movs	r3, #1
 8003d58:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003d5c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003d60:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003d64:	2302      	movs	r3, #2
 8003d66:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003d6a:	2302      	movs	r3, #2
 8003d6c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	RCC_OscInitStruct.PLL.PLLM = 1;
 8003d70:	2301      	movs	r3, #1
 8003d72:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	RCC_OscInitStruct.PLL.PLLN = 120;
 8003d76:	2378      	movs	r3, #120	; 0x78
 8003d78:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	RCC_OscInitStruct.PLL.PLLP = 2;
 8003d7c:	2302      	movs	r3, #2
 8003d7e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8003d82:	2302      	movs	r3, #2
 8003d84:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	RCC_OscInitStruct.PLL.PLLR = 2;
 8003d88:	2302      	movs	r3, #2
 8003d8a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8003d8e:	230c      	movs	r3, #12
 8003d90:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8003d94:	2300      	movs	r3, #0
 8003d96:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK){
 8003da0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003da4:	4618      	mov	r0, r3
 8003da6:	f7fc fe73 	bl	8000a90 <HAL_RCC_OscConfig>
 8003daa:	4603      	mov	r3, r0
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d001      	beq.n	8003db4 <SystemClock_Config+0xe0>
		Error_Handler();
 8003db0:	f000 f840 	bl	8003e34 <Error_Handler>
	}
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003db4:	233f      	movs	r3, #63	; 0x3f
 8003db6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
							  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
							  |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003dba:	2303      	movs	r3, #3
 8003dbc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8003dc6:	2308      	movs	r3, #8
 8003dc8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8003dcc:	2340      	movs	r3, #64	; 0x40
 8003dce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8003dd2:	2340      	movs	r3, #64	; 0x40
 8003dd4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8003dd8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ddc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8003de0:	2340      	movs	r3, #64	; 0x40
 8003de2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK){
 8003de6:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003dea:	2104      	movs	r1, #4
 8003dec:	4618      	mov	r0, r3
 8003dee:	f7fd fa07 	bl	8001200 <HAL_RCC_ClockConfig>
 8003df2:	4603      	mov	r3, r0
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d001      	beq.n	8003dfc <SystemClock_Config+0x128>
		Error_Handler();
 8003df8:	f000 f81c 	bl	8003e34 <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8003dfc:	f107 0308 	add.w	r3, r7, #8
 8003e00:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003e04:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8003e06:	f107 0308 	add.w	r3, r7, #8
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	65da      	str	r2, [r3, #92]	; 0x5c
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK){
 8003e0e:	f107 0308 	add.w	r3, r7, #8
 8003e12:	4618      	mov	r0, r3
 8003e14:	f7fd fd0a 	bl	800182c <HAL_RCCEx_PeriphCLKConfig>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d001      	beq.n	8003e22 <SystemClock_Config+0x14e>
		Error_Handler();
 8003e1e:	f000 f809 	bl	8003e34 <Error_Handler>
	}
}
 8003e22:	bf00      	nop
 8003e24:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}
 8003e2c:	58024800 	.word	0x58024800
 8003e30:	58000400 	.word	0x58000400

08003e34 <Error_Handler>:

void Error_Handler(void){
 8003e34:	b480      	push	{r7}
 8003e36:	af00      	add	r7, sp, #0
}
 8003e38:	bf00      	nop
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e40:	4770      	bx	lr
	...

08003e44 <MX_SPI1_Init>:
	unsigned int i;
	for(i = 0; i < 100; i++){
	}

}
void MX_SPI1_Init(void){
 8003e44:	b580      	push	{r7, lr}
 8003e46:	af00      	add	r7, sp, #0

	hspi1.Instance = SPI1;
 8003e48:	4b28      	ldr	r3, [pc, #160]	; (8003eec <MX_SPI1_Init+0xa8>)
 8003e4a:	4a29      	ldr	r2, [pc, #164]	; (8003ef0 <MX_SPI1_Init+0xac>)
 8003e4c:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;				//SPI_MODE_MASTER
 8003e4e:	4b27      	ldr	r3, [pc, #156]	; (8003eec <MX_SPI1_Init+0xa8>)
 8003e50:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8003e54:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003e56:	4b25      	ldr	r3, [pc, #148]	; (8003eec <MX_SPI1_Init+0xa8>)
 8003e58:	2200      	movs	r2, #0
 8003e5a:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_16BIT;		//SPI_DATASIZE_8BIT
 8003e5c:	4b23      	ldr	r3, [pc, #140]	; (8003eec <MX_SPI1_Init+0xa8>)
 8003e5e:	220f      	movs	r2, #15
 8003e60:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003e62:	4b22      	ldr	r3, [pc, #136]	; (8003eec <MX_SPI1_Init+0xa8>)
 8003e64:	2200      	movs	r2, #0
 8003e66:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;			//SPI_PHASE_1EDGE
 8003e68:	4b20      	ldr	r3, [pc, #128]	; (8003eec <MX_SPI1_Init+0xa8>)
 8003e6a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003e6e:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8003e70:	4b1e      	ldr	r3, [pc, #120]	; (8003eec <MX_SPI1_Init+0xa8>)
 8003e72:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003e76:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8003e78:	4b1c      	ldr	r3, [pc, #112]	; (8003eec <MX_SPI1_Init+0xa8>)
 8003e7a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8003e7e:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003e80:	4b1a      	ldr	r3, [pc, #104]	; (8003eec <MX_SPI1_Init+0xa8>)
 8003e82:	2200      	movs	r2, #0
 8003e84:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003e86:	4b19      	ldr	r3, [pc, #100]	; (8003eec <MX_SPI1_Init+0xa8>)
 8003e88:	2200      	movs	r2, #0
 8003e8a:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e8c:	4b17      	ldr	r3, [pc, #92]	; (8003eec <MX_SPI1_Init+0xa8>)
 8003e8e:	2200      	movs	r2, #0
 8003e90:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 0x0;
 8003e92:	4b16      	ldr	r3, [pc, #88]	; (8003eec <MX_SPI1_Init+0xa8>)
 8003e94:	2200      	movs	r2, #0
 8003e96:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003e98:	4b14      	ldr	r3, [pc, #80]	; (8003eec <MX_SPI1_Init+0xa8>)
 8003e9a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003e9e:	635a      	str	r2, [r3, #52]	; 0x34
	hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8003ea0:	4b12      	ldr	r3, [pc, #72]	; (8003eec <MX_SPI1_Init+0xa8>)
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	639a      	str	r2, [r3, #56]	; 0x38
	hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8003ea6:	4b11      	ldr	r3, [pc, #68]	; (8003eec <MX_SPI1_Init+0xa8>)
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	63da      	str	r2, [r3, #60]	; 0x3c
	hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8003eac:	4b0f      	ldr	r3, [pc, #60]	; (8003eec <MX_SPI1_Init+0xa8>)
 8003eae:	2200      	movs	r2, #0
 8003eb0:	641a      	str	r2, [r3, #64]	; 0x40
	hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8003eb2:	4b0e      	ldr	r3, [pc, #56]	; (8003eec <MX_SPI1_Init+0xa8>)
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	645a      	str	r2, [r3, #68]	; 0x44
	hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8003eb8:	4b0c      	ldr	r3, [pc, #48]	; (8003eec <MX_SPI1_Init+0xa8>)
 8003eba:	2200      	movs	r2, #0
 8003ebc:	649a      	str	r2, [r3, #72]	; 0x48
	hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8003ebe:	4b0b      	ldr	r3, [pc, #44]	; (8003eec <MX_SPI1_Init+0xa8>)
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	64da      	str	r2, [r3, #76]	; 0x4c
	hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8003ec4:	4b09      	ldr	r3, [pc, #36]	; (8003eec <MX_SPI1_Init+0xa8>)
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	651a      	str	r2, [r3, #80]	; 0x50
	hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8003eca:	4b08      	ldr	r3, [pc, #32]	; (8003eec <MX_SPI1_Init+0xa8>)
 8003ecc:	2200      	movs	r2, #0
 8003ece:	655a      	str	r2, [r3, #84]	; 0x54
	hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8003ed0:	4b06      	ldr	r3, [pc, #24]	; (8003eec <MX_SPI1_Init+0xa8>)
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	659a      	str	r2, [r3, #88]	; 0x58
	if (HAL_SPI_Init(&hspi1) != HAL_OK){
 8003ed6:	4805      	ldr	r0, [pc, #20]	; (8003eec <MX_SPI1_Init+0xa8>)
 8003ed8:	f7fe fcfc 	bl	80028d4 <HAL_SPI_Init>
 8003edc:	4603      	mov	r3, r0
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d001      	beq.n	8003ee6 <MX_SPI1_Init+0xa2>
		Error_Handler();
 8003ee2:	f7ff ffa7 	bl	8003e34 <Error_Handler>
	}
}
 8003ee6:	bf00      	nop
 8003ee8:	bd80      	pop	{r7, pc}
 8003eea:	bf00      	nop
 8003eec:	2000007c 	.word	0x2000007c
 8003ef0:	40013000 	.word	0x40013000

08003ef4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle){
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b08a      	sub	sp, #40	; 0x28
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003efc:	f107 0314 	add.w	r3, r7, #20
 8003f00:	2200      	movs	r2, #0
 8003f02:	601a      	str	r2, [r3, #0]
 8003f04:	605a      	str	r2, [r3, #4]
 8003f06:	609a      	str	r2, [r3, #8]
 8003f08:	60da      	str	r2, [r3, #12]
 8003f0a:	611a      	str	r2, [r3, #16]
	if(spiHandle->Instance==SPI1){
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a29      	ldr	r2, [pc, #164]	; (8003fb8 <HAL_SPI_MspInit+0xc4>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d14c      	bne.n	8003fb0 <HAL_SPI_MspInit+0xbc>
		__HAL_RCC_SPI1_CLK_ENABLE();
 8003f16:	4a29      	ldr	r2, [pc, #164]	; (8003fbc <HAL_SPI_MspInit+0xc8>)
 8003f18:	4b28      	ldr	r3, [pc, #160]	; (8003fbc <HAL_SPI_MspInit+0xc8>)
 8003f1a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003f1e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003f22:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003f26:	4b25      	ldr	r3, [pc, #148]	; (8003fbc <HAL_SPI_MspInit+0xc8>)
 8003f28:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003f2c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f30:	613b      	str	r3, [r7, #16]
 8003f32:	693b      	ldr	r3, [r7, #16]

		__HAL_RCC_GPIOA_CLK_ENABLE();
 8003f34:	4a21      	ldr	r2, [pc, #132]	; (8003fbc <HAL_SPI_MspInit+0xc8>)
 8003f36:	4b21      	ldr	r3, [pc, #132]	; (8003fbc <HAL_SPI_MspInit+0xc8>)
 8003f38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003f3c:	f043 0301 	orr.w	r3, r3, #1
 8003f40:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003f44:	4b1d      	ldr	r3, [pc, #116]	; (8003fbc <HAL_SPI_MspInit+0xc8>)
 8003f46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003f4a:	f003 0301 	and.w	r3, r3, #1
 8003f4e:	60fb      	str	r3, [r7, #12]
 8003f50:	68fb      	ldr	r3, [r7, #12]
		__HAL_RCC_GPIOD_CLK_ENABLE();
 8003f52:	4a1a      	ldr	r2, [pc, #104]	; (8003fbc <HAL_SPI_MspInit+0xc8>)
 8003f54:	4b19      	ldr	r3, [pc, #100]	; (8003fbc <HAL_SPI_MspInit+0xc8>)
 8003f56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003f5a:	f043 0308 	orr.w	r3, r3, #8
 8003f5e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003f62:	4b16      	ldr	r3, [pc, #88]	; (8003fbc <HAL_SPI_MspInit+0xc8>)
 8003f64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003f68:	f003 0308 	and.w	r3, r3, #8
 8003f6c:	60bb      	str	r3, [r7, #8]
 8003f6e:	68bb      	ldr	r3, [r7, #8]
		/**SPI1 GPIO Configuration
		PA5     ------> SPI1_SCK
		PA6     ------> SPI1_MISO
		PD7     ------> SPI1_MOSI
		*/
		GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8003f70:	2360      	movs	r3, #96	; 0x60
 8003f72:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f74:	2302      	movs	r3, #2
 8003f76:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003f80:	2305      	movs	r3, #5
 8003f82:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f84:	f107 0314 	add.w	r3, r7, #20
 8003f88:	4619      	mov	r1, r3
 8003f8a:	480d      	ldr	r0, [pc, #52]	; (8003fc0 <HAL_SPI_MspInit+0xcc>)
 8003f8c:	f7fc fb4c 	bl	8000628 <HAL_GPIO_Init>

		GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003f90:	2380      	movs	r3, #128	; 0x80
 8003f92:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f94:	2302      	movs	r3, #2
 8003f96:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003fa0:	2305      	movs	r3, #5
 8003fa2:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003fa4:	f107 0314 	add.w	r3, r7, #20
 8003fa8:	4619      	mov	r1, r3
 8003faa:	4806      	ldr	r0, [pc, #24]	; (8003fc4 <HAL_SPI_MspInit+0xd0>)
 8003fac:	f7fc fb3c 	bl	8000628 <HAL_GPIO_Init>

	}
}
 8003fb0:	bf00      	nop
 8003fb2:	3728      	adds	r7, #40	; 0x28
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}
 8003fb8:	40013000 	.word	0x40013000
 8003fbc:	58024400 	.word	0x58024400
 8003fc0:	58020000 	.word	0x58020000
 8003fc4:	58020c00 	.word	0x58020c00

08003fc8 <AS5050A_SPI_Read_2Byte>:
		HAL_GPIO_DeInit(GPIOD, GPIO_PIN_7);

	}
} 

uint16_t AS5050A_SPI_Read_2Byte (uint16_t addr){
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b086      	sub	sp, #24
 8003fcc:	af02      	add	r7, sp, #8
 8003fce:	4603      	mov	r3, r0
 8003fd0:	80fb      	strh	r3, [r7, #6]
	uint16_t tx_data = READ_COMMAND | addr<<1 | PAR_EN;
 8003fd2:	88fb      	ldrh	r3, [r7, #6]
 8003fd4:	005b      	lsls	r3, r3, #1
 8003fd6:	b21a      	sxth	r2, r3
 8003fd8:	4b25      	ldr	r3, [pc, #148]	; (8004070 <AS5050A_SPI_Read_2Byte+0xa8>)
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	b21b      	sxth	r3, r3
 8003fde:	b29b      	uxth	r3, r3
 8003fe0:	81fb      	strh	r3, [r7, #14]
	uint16_t rx_data;
//	rx_data[0] = 0;
//	rx_data[1] = 0;
	while(HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_BUSY_TX_RX);
 8003fe2:	bf00      	nop
 8003fe4:	4823      	ldr	r0, [pc, #140]	; (8004074 <AS5050A_SPI_Read_2Byte+0xac>)
 8003fe6:	f7ff f857 	bl	8003098 <HAL_SPI_GetState>
 8003fea:	4603      	mov	r3, r0
 8003fec:	2b05      	cmp	r3, #5
 8003fee:	d0f9      	beq.n	8003fe4 <AS5050A_SPI_Read_2Byte+0x1c>
	CS_PIN_LOW;
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003ff6:	4820      	ldr	r0, [pc, #128]	; (8004078 <AS5050A_SPI_Read_2Byte+0xb0>)
 8003ff8:	f7fc fcc6 	bl	8000988 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*) &tx_data,(uint8_t*) &rx_data,  1, 50);
 8003ffc:	f107 020c 	add.w	r2, r7, #12
 8004000:	f107 010e 	add.w	r1, r7, #14
 8004004:	2332      	movs	r3, #50	; 0x32
 8004006:	9300      	str	r3, [sp, #0]
 8004008:	2301      	movs	r3, #1
 800400a:	481a      	ldr	r0, [pc, #104]	; (8004074 <AS5050A_SPI_Read_2Byte+0xac>)
 800400c:	f7fe fd58 	bl	8002ac0 <HAL_SPI_TransmitReceive>
	CS_PIN_HIGH;
 8004010:	2201      	movs	r2, #1
 8004012:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004016:	4818      	ldr	r0, [pc, #96]	; (8004078 <AS5050A_SPI_Read_2Byte+0xb0>)
 8004018:	f7fc fcb6 	bl	8000988 <HAL_GPIO_WritePin>
	uint16_t ttx_data = READ_COMMAND | addr<<1 | PAR_DIS;
 800401c:	88fb      	ldrh	r3, [r7, #6]
 800401e:	005b      	lsls	r3, r3, #1
 8004020:	b21a      	sxth	r2, r3
 8004022:	4b16      	ldr	r3, [pc, #88]	; (800407c <AS5050A_SPI_Read_2Byte+0xb4>)
 8004024:	4313      	orrs	r3, r2
 8004026:	b21b      	sxth	r3, r3
 8004028:	b29b      	uxth	r3, r3
 800402a:	817b      	strh	r3, [r7, #10]

	while(HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_BUSY_TX_RX);
 800402c:	bf00      	nop
 800402e:	4811      	ldr	r0, [pc, #68]	; (8004074 <AS5050A_SPI_Read_2Byte+0xac>)
 8004030:	f7ff f832 	bl	8003098 <HAL_SPI_GetState>
 8004034:	4603      	mov	r3, r0
 8004036:	2b05      	cmp	r3, #5
 8004038:	d0f9      	beq.n	800402e <AS5050A_SPI_Read_2Byte+0x66>
	CS_PIN_LOW;
 800403a:	2200      	movs	r2, #0
 800403c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004040:	480d      	ldr	r0, [pc, #52]	; (8004078 <AS5050A_SPI_Read_2Byte+0xb0>)
 8004042:	f7fc fca1 	bl	8000988 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*) &ttx_data,(uint8_t*) &rx_data,  1, 50);
 8004046:	f107 020c 	add.w	r2, r7, #12
 800404a:	f107 010a 	add.w	r1, r7, #10
 800404e:	2332      	movs	r3, #50	; 0x32
 8004050:	9300      	str	r3, [sp, #0]
 8004052:	2301      	movs	r3, #1
 8004054:	4807      	ldr	r0, [pc, #28]	; (8004074 <AS5050A_SPI_Read_2Byte+0xac>)
 8004056:	f7fe fd33 	bl	8002ac0 <HAL_SPI_TransmitReceive>
//	CS_PIN_HIGH;
//	blind_loop();
//	while(HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_BUSY_TX_RX);
//	CS_PIN_LOW;
//	HAL_SPI_Receive(&hspi1, (uint8_t*) &rx_data, 1, 50);
	CS_PIN_HIGH;
 800405a:	2201      	movs	r2, #1
 800405c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004060:	4805      	ldr	r0, [pc, #20]	; (8004078 <AS5050A_SPI_Read_2Byte+0xb0>)
 8004062:	f7fc fc91 	bl	8000988 <HAL_GPIO_WritePin>
	return rx_data;
 8004066:	89bb      	ldrh	r3, [r7, #12]
}
 8004068:	4618      	mov	r0, r3
 800406a:	3710      	adds	r7, #16
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}
 8004070:	ffff8001 	.word	0xffff8001
 8004074:	2000007c 	.word	0x2000007c
 8004078:	58020c00 	.word	0x58020c00
 800407c:	ffff8000 	.word	0xffff8000

08004080 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004080:	b480      	push	{r7}
 8004082:	b083      	sub	sp, #12
 8004084:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004086:	4a0a      	ldr	r2, [pc, #40]	; (80040b0 <HAL_MspInit+0x30>)
 8004088:	4b09      	ldr	r3, [pc, #36]	; (80040b0 <HAL_MspInit+0x30>)
 800408a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800408e:	f043 0302 	orr.w	r3, r3, #2
 8004092:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004096:	4b06      	ldr	r3, [pc, #24]	; (80040b0 <HAL_MspInit+0x30>)
 8004098:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800409c:	f003 0302 	and.w	r3, r3, #2
 80040a0:	607b      	str	r3, [r7, #4]
 80040a2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80040a4:	bf00      	nop
 80040a6:	370c      	adds	r7, #12
 80040a8:	46bd      	mov	sp, r7
 80040aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ae:	4770      	bx	lr
 80040b0:	58024400 	.word	0x58024400

080040b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80040b4:	b480      	push	{r7}
 80040b6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80040b8:	bf00      	nop
 80040ba:	46bd      	mov	sp, r7
 80040bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c0:	4770      	bx	lr

080040c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80040c2:	b480      	push	{r7}
 80040c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80040c6:	e7fe      	b.n	80040c6 <HardFault_Handler+0x4>

080040c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80040c8:	b480      	push	{r7}
 80040ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80040cc:	e7fe      	b.n	80040cc <MemManage_Handler+0x4>

080040ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80040ce:	b480      	push	{r7}
 80040d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80040d2:	e7fe      	b.n	80040d2 <BusFault_Handler+0x4>

080040d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80040d4:	b480      	push	{r7}
 80040d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80040d8:	e7fe      	b.n	80040d8 <UsageFault_Handler+0x4>

080040da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80040da:	b480      	push	{r7}
 80040dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80040de:	bf00      	nop
 80040e0:	46bd      	mov	sp, r7
 80040e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e6:	4770      	bx	lr

080040e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80040e8:	b480      	push	{r7}
 80040ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80040ec:	bf00      	nop
 80040ee:	46bd      	mov	sp, r7
 80040f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f4:	4770      	bx	lr

080040f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80040f6:	b480      	push	{r7}
 80040f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80040fa:	bf00      	nop
 80040fc:	46bd      	mov	sp, r7
 80040fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004102:	4770      	bx	lr

08004104 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004108:	f7fc f954 	bl	80003b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800410c:	bf00      	nop
 800410e:	bd80      	pop	{r7, pc}

08004110 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8004114:	2008      	movs	r0, #8
 8004116:	f7fc fc6b 	bl	80009f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800411a:	bf00      	nop
 800411c:	bd80      	pop	{r7, pc}
	...

08004120 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004124:	4802      	ldr	r0, [pc, #8]	; (8004130 <TIM1_UP_IRQHandler+0x10>)
 8004126:	f7ff f903 	bl	8003330 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800412a:	bf00      	nop
 800412c:	bd80      	pop	{r7, pc}
 800412e:	bf00      	nop
 8004130:	20000038 	.word	0x20000038

08004134 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004134:	b480      	push	{r7}
 8004136:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004138:	4a29      	ldr	r2, [pc, #164]	; (80041e0 <SystemInit+0xac>)
 800413a:	4b29      	ldr	r3, [pc, #164]	; (80041e0 <SystemInit+0xac>)
 800413c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004140:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004144:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8004148:	4a26      	ldr	r2, [pc, #152]	; (80041e4 <SystemInit+0xb0>)
 800414a:	4b26      	ldr	r3, [pc, #152]	; (80041e4 <SystemInit+0xb0>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f043 0301 	orr.w	r3, r3, #1
 8004152:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004154:	4b23      	ldr	r3, [pc, #140]	; (80041e4 <SystemInit+0xb0>)
 8004156:	2200      	movs	r2, #0
 8004158:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800415a:	4922      	ldr	r1, [pc, #136]	; (80041e4 <SystemInit+0xb0>)
 800415c:	4b21      	ldr	r3, [pc, #132]	; (80041e4 <SystemInit+0xb0>)
 800415e:	681a      	ldr	r2, [r3, #0]
 8004160:	4b21      	ldr	r3, [pc, #132]	; (80041e8 <SystemInit+0xb4>)
 8004162:	4013      	ands	r3, r2
 8004164:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8004166:	4b1f      	ldr	r3, [pc, #124]	; (80041e4 <SystemInit+0xb0>)
 8004168:	2200      	movs	r2, #0
 800416a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800416c:	4b1d      	ldr	r3, [pc, #116]	; (80041e4 <SystemInit+0xb0>)
 800416e:	2200      	movs	r2, #0
 8004170:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8004172:	4b1c      	ldr	r3, [pc, #112]	; (80041e4 <SystemInit+0xb0>)
 8004174:	2200      	movs	r2, #0
 8004176:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8004178:	4b1a      	ldr	r3, [pc, #104]	; (80041e4 <SystemInit+0xb0>)
 800417a:	2200      	movs	r2, #0
 800417c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 800417e:	4b19      	ldr	r3, [pc, #100]	; (80041e4 <SystemInit+0xb0>)
 8004180:	2200      	movs	r2, #0
 8004182:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8004184:	4b17      	ldr	r3, [pc, #92]	; (80041e4 <SystemInit+0xb0>)
 8004186:	2200      	movs	r2, #0
 8004188:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800418a:	4b16      	ldr	r3, [pc, #88]	; (80041e4 <SystemInit+0xb0>)
 800418c:	2200      	movs	r2, #0
 800418e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8004190:	4b14      	ldr	r3, [pc, #80]	; (80041e4 <SystemInit+0xb0>)
 8004192:	2200      	movs	r2, #0
 8004194:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8004196:	4b13      	ldr	r3, [pc, #76]	; (80041e4 <SystemInit+0xb0>)
 8004198:	2200      	movs	r2, #0
 800419a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 800419c:	4b11      	ldr	r3, [pc, #68]	; (80041e4 <SystemInit+0xb0>)
 800419e:	2200      	movs	r2, #0
 80041a0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80041a2:	4b10      	ldr	r3, [pc, #64]	; (80041e4 <SystemInit+0xb0>)
 80041a4:	2200      	movs	r2, #0
 80041a6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80041a8:	4a0e      	ldr	r2, [pc, #56]	; (80041e4 <SystemInit+0xb0>)
 80041aa:	4b0e      	ldr	r3, [pc, #56]	; (80041e4 <SystemInit+0xb0>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041b2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80041b4:	4b0b      	ldr	r3, [pc, #44]	; (80041e4 <SystemInit+0xb0>)
 80041b6:	2200      	movs	r2, #0
 80041b8:	661a      	str	r2, [r3, #96]	; 0x60
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif /* VECT_TAB_SRAM */

#else
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80041ba:	4b0c      	ldr	r3, [pc, #48]	; (80041ec <SystemInit+0xb8>)
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	4b0c      	ldr	r3, [pc, #48]	; (80041f0 <SystemInit+0xbc>)
 80041c0:	4013      	ands	r3, r2
 80041c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041c6:	d202      	bcs.n	80041ce <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80041c8:	4b0a      	ldr	r3, [pc, #40]	; (80041f4 <SystemInit+0xc0>)
 80041ca:	2201      	movs	r2, #1
 80041cc:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80041ce:	4b04      	ldr	r3, [pc, #16]	; (80041e0 <SystemInit+0xac>)
 80041d0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80041d4:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80041d6:	bf00      	nop
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr
 80041e0:	e000ed00 	.word	0xe000ed00
 80041e4:	58024400 	.word	0x58024400
 80041e8:	eaf6ed7f 	.word	0xeaf6ed7f
 80041ec:	5c001000 	.word	0x5c001000
 80041f0:	ffff0000 	.word	0xffff0000
 80041f4:	51008108 	.word	0x51008108

080041f8 <MX_TIM1_Init>:
/* Includes ------------------------------------------------------------------*/
#include "tim.h"

TIM_HandleTypeDef htim1;

void MX_TIM1_Init(void){
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b088      	sub	sp, #32
 80041fc:	af00      	add	r7, sp, #0
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80041fe:	f107 0310 	add.w	r3, r7, #16
 8004202:	2200      	movs	r2, #0
 8004204:	601a      	str	r2, [r3, #0]
 8004206:	605a      	str	r2, [r3, #4]
 8004208:	609a      	str	r2, [r3, #8]
 800420a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800420c:	1d3b      	adds	r3, r7, #4
 800420e:	2200      	movs	r2, #0
 8004210:	601a      	str	r2, [r3, #0]
 8004212:	605a      	str	r2, [r3, #4]
 8004214:	609a      	str	r2, [r3, #8]

	htim1.Instance = TIM1;
 8004216:	4b20      	ldr	r3, [pc, #128]	; (8004298 <MX_TIM1_Init+0xa0>)
 8004218:	4a20      	ldr	r2, [pc, #128]	; (800429c <MX_TIM1_Init+0xa4>)
 800421a:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 2999;
 800421c:	4b1e      	ldr	r3, [pc, #120]	; (8004298 <MX_TIM1_Init+0xa0>)
 800421e:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8004222:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004224:	4b1c      	ldr	r3, [pc, #112]	; (8004298 <MX_TIM1_Init+0xa0>)
 8004226:	2200      	movs	r2, #0
 8004228:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 9999;
 800422a:	4b1b      	ldr	r3, [pc, #108]	; (8004298 <MX_TIM1_Init+0xa0>)
 800422c:	f242 720f 	movw	r2, #9999	; 0x270f
 8004230:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004232:	4b19      	ldr	r3, [pc, #100]	; (8004298 <MX_TIM1_Init+0xa0>)
 8004234:	2200      	movs	r2, #0
 8004236:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8004238:	4b17      	ldr	r3, [pc, #92]	; (8004298 <MX_TIM1_Init+0xa0>)
 800423a:	2200      	movs	r2, #0
 800423c:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800423e:	4b16      	ldr	r3, [pc, #88]	; (8004298 <MX_TIM1_Init+0xa0>)
 8004240:	2200      	movs	r2, #0
 8004242:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK){
 8004244:	4814      	ldr	r0, [pc, #80]	; (8004298 <MX_TIM1_Init+0xa0>)
 8004246:	f7ff f81e 	bl	8003286 <HAL_TIM_Base_Init>
 800424a:	4603      	mov	r3, r0
 800424c:	2b00      	cmp	r3, #0
 800424e:	d001      	beq.n	8004254 <MX_TIM1_Init+0x5c>
		Error_Handler();
 8004250:	f7ff fdf0 	bl	8003e34 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004254:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004258:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK){
 800425a:	f107 0310 	add.w	r3, r7, #16
 800425e:	4619      	mov	r1, r3
 8004260:	480d      	ldr	r0, [pc, #52]	; (8004298 <MX_TIM1_Init+0xa0>)
 8004262:	f7ff f985 	bl	8003570 <HAL_TIM_ConfigClockSource>
 8004266:	4603      	mov	r3, r0
 8004268:	2b00      	cmp	r3, #0
 800426a:	d001      	beq.n	8004270 <MX_TIM1_Init+0x78>
		Error_Handler();
 800426c:	f7ff fde2 	bl	8003e34 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004270:	2300      	movs	r3, #0
 8004272:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8004274:	2300      	movs	r3, #0
 8004276:	60bb      	str	r3, [r7, #8]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004278:	2300      	movs	r3, #0
 800427a:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK){
 800427c:	1d3b      	adds	r3, r7, #4
 800427e:	4619      	mov	r1, r3
 8004280:	4805      	ldr	r0, [pc, #20]	; (8004298 <MX_TIM1_Init+0xa0>)
 8004282:	f7ff fba5 	bl	80039d0 <HAL_TIMEx_MasterConfigSynchronization>
 8004286:	4603      	mov	r3, r0
 8004288:	2b00      	cmp	r3, #0
 800428a:	d001      	beq.n	8004290 <MX_TIM1_Init+0x98>
		Error_Handler();
 800428c:	f7ff fdd2 	bl	8003e34 <Error_Handler>
	}
}
 8004290:	bf00      	nop
 8004292:	3720      	adds	r7, #32
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}
 8004298:	20000038 	.word	0x20000038
 800429c:	40010000 	.word	0x40010000

080042a0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle){
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b084      	sub	sp, #16
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]

	if(tim_baseHandle->Instance==TIM1){
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a0e      	ldr	r2, [pc, #56]	; (80042e8 <HAL_TIM_Base_MspInit+0x48>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d116      	bne.n	80042e0 <HAL_TIM_Base_MspInit+0x40>
		__HAL_RCC_TIM1_CLK_ENABLE();
 80042b2:	4a0e      	ldr	r2, [pc, #56]	; (80042ec <HAL_TIM_Base_MspInit+0x4c>)
 80042b4:	4b0d      	ldr	r3, [pc, #52]	; (80042ec <HAL_TIM_Base_MspInit+0x4c>)
 80042b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80042ba:	f043 0301 	orr.w	r3, r3, #1
 80042be:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80042c2:	4b0a      	ldr	r3, [pc, #40]	; (80042ec <HAL_TIM_Base_MspInit+0x4c>)
 80042c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80042c8:	f003 0301 	and.w	r3, r3, #1
 80042cc:	60fb      	str	r3, [r7, #12]
 80042ce:	68fb      	ldr	r3, [r7, #12]

		HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80042d0:	2200      	movs	r2, #0
 80042d2:	2100      	movs	r1, #0
 80042d4:	2019      	movs	r0, #25
 80042d6:	f7fc f972 	bl	80005be <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80042da:	2019      	movs	r0, #25
 80042dc:	f7fc f989 	bl	80005f2 <HAL_NVIC_EnableIRQ>
	}
}
 80042e0:	bf00      	nop
 80042e2:	3710      	adds	r7, #16
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd80      	pop	{r7, pc}
 80042e8:	40010000 	.word	0x40010000
 80042ec:	58024400 	.word	0x58024400

080042f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80042f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004328 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80042f4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80042f6:	e003      	b.n	8004300 <LoopCopyDataInit>

080042f8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80042f8:	4b0c      	ldr	r3, [pc, #48]	; (800432c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80042fa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80042fc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80042fe:	3104      	adds	r1, #4

08004300 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004300:	480b      	ldr	r0, [pc, #44]	; (8004330 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004302:	4b0c      	ldr	r3, [pc, #48]	; (8004334 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004304:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004306:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004308:	d3f6      	bcc.n	80042f8 <CopyDataInit>
  ldr  r2, =_sbss
 800430a:	4a0b      	ldr	r2, [pc, #44]	; (8004338 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800430c:	e002      	b.n	8004314 <LoopFillZerobss>

0800430e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800430e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004310:	f842 3b04 	str.w	r3, [r2], #4

08004314 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004314:	4b09      	ldr	r3, [pc, #36]	; (800433c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004316:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004318:	d3f9      	bcc.n	800430e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800431a:	f7ff ff0b 	bl	8004134 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800431e:	f000 f811 	bl	8004344 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004322:	f7ff fca1 	bl	8003c68 <main>
  bx  lr    
 8004326:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004328:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800432c:	080043cc 	.word	0x080043cc
  ldr  r0, =_sdata
 8004330:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004334:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8004338:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 800433c:	20000104 	.word	0x20000104

08004340 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004340:	e7fe      	b.n	8004340 <ADC3_IRQHandler>
	...

08004344 <__libc_init_array>:
 8004344:	b570      	push	{r4, r5, r6, lr}
 8004346:	4e0d      	ldr	r6, [pc, #52]	; (800437c <__libc_init_array+0x38>)
 8004348:	4c0d      	ldr	r4, [pc, #52]	; (8004380 <__libc_init_array+0x3c>)
 800434a:	1ba4      	subs	r4, r4, r6
 800434c:	10a4      	asrs	r4, r4, #2
 800434e:	2500      	movs	r5, #0
 8004350:	42a5      	cmp	r5, r4
 8004352:	d109      	bne.n	8004368 <__libc_init_array+0x24>
 8004354:	4e0b      	ldr	r6, [pc, #44]	; (8004384 <__libc_init_array+0x40>)
 8004356:	4c0c      	ldr	r4, [pc, #48]	; (8004388 <__libc_init_array+0x44>)
 8004358:	f000 f820 	bl	800439c <_init>
 800435c:	1ba4      	subs	r4, r4, r6
 800435e:	10a4      	asrs	r4, r4, #2
 8004360:	2500      	movs	r5, #0
 8004362:	42a5      	cmp	r5, r4
 8004364:	d105      	bne.n	8004372 <__libc_init_array+0x2e>
 8004366:	bd70      	pop	{r4, r5, r6, pc}
 8004368:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800436c:	4798      	blx	r3
 800436e:	3501      	adds	r5, #1
 8004370:	e7ee      	b.n	8004350 <__libc_init_array+0xc>
 8004372:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004376:	4798      	blx	r3
 8004378:	3501      	adds	r5, #1
 800437a:	e7f2      	b.n	8004362 <__libc_init_array+0x1e>
 800437c:	080043c4 	.word	0x080043c4
 8004380:	080043c4 	.word	0x080043c4
 8004384:	080043c4 	.word	0x080043c4
 8004388:	080043c8 	.word	0x080043c8

0800438c <memset>:
 800438c:	4402      	add	r2, r0
 800438e:	4603      	mov	r3, r0
 8004390:	4293      	cmp	r3, r2
 8004392:	d100      	bne.n	8004396 <memset+0xa>
 8004394:	4770      	bx	lr
 8004396:	f803 1b01 	strb.w	r1, [r3], #1
 800439a:	e7f9      	b.n	8004390 <memset+0x4>

0800439c <_init>:
 800439c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800439e:	bf00      	nop
 80043a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043a2:	bc08      	pop	{r3}
 80043a4:	469e      	mov	lr, r3
 80043a6:	4770      	bx	lr

080043a8 <_fini>:
 80043a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043aa:	bf00      	nop
 80043ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043ae:	bc08      	pop	{r3}
 80043b0:	469e      	mov	lr, r3
 80043b2:	4770      	bx	lr
